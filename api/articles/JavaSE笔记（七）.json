{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"JavaSE笔记（七）","date":"2022-03-09T03:42:26.687Z","updated":"2022-02-18T04:06:56.000Z","comments":true,"path":"api/articles/JavaSE笔记（七）.json","keywords":null,"cover":[],"content":"<h1 id=\"Java反射和注解\"><a href=\"#Java反射和注解\" class=\"headerlink\" title=\"Java反射和注解\"></a>Java反射和注解</h1><p><strong>注意：</strong>本章节涉及到JVM相关底层原理，难度会有一些大。</p>\n<p>反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，对于任意一个类，都能够知道这个类所有的属性和方法，对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象方法的功能叫Java的反射机制。</p>\n<p>简而言之，我们可以通过反射机制，获取到类的一些属性，包括类里面有哪些字段，有哪些方法，继承自哪个类，甚至还能获取到泛型！它的权限非常高，慎重使用！</p>\n<h2 id=\"Java类加载机制\"><a href=\"#Java类加载机制\" class=\"headerlink\" title=\"Java类加载机制\"></a>Java类加载机制</h2><p>在学习Java的反射机制之前，我们需要先了解一下类的加载机制，一个类是如何被加载和使用的：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg3.itboth.com%2F60%2F50%2FUrUVN3.png&refer=http%3A%2F%2Fimg3.itboth.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1637635409&t=f25ea82c853619c26897ff5b4d041d5b\" alt=\"img\"></p>\n<p>在Java程序启动时，JVM会将一部分类（class文件）先加载（并不是所有的类都会在一开始加载），通过ClassLoader将类加载，在加载过程中，会将类的信息提取出来（存放在元空间中，JDK1.8之前存放在永久代），同时也会生成一个Class对象存放在内存（堆内存），注意此Class对象只会存在一个，与加载的类唯一对应！</p>\n<p><strong>思考：</strong>既然说和与加载的类唯一对应，那如果我们手动创建一个与JDK包名一样，同时类名也保持一致，那么JVM会加载这个类吗？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package java.lang;\n\npublic class String &#123;    &#x2F;&#x2F;JDK提供的String类也是\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;我姓🐴，我叫🐴nb&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>我们发现，会出现以下报错：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:\n   public static void main(String[] args)</code></pre>\n\n<p>但是我们明明在自己写的String类中定义了main方法啊，为什么会找不到此方法呢？实际上这是ClassLoader的<code>双亲委派机制</code>在保护Java程序的正常运行：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201217213314510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGV5YW5iYW8=,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>实际上我们的类最开始是由BootstarpClassLoader进行加载，BootstarpClassLoader用于加载JDK提供的类，而我们自己编写的类实际上是AppClassLoader，只有BootstarpClassLoader都没有加载的类，才会让AppClassLoader来加载，因此我们自己编写的同名包同名类不会被加载，而实际要去启动的是真正的String类，也就自然找不到<code>main</code>方法了！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Main &#123;\n    public static void main(String[] args) &#123;\n        System.out.println(Main.class.getClassLoader());   &#x2F;&#x2F;查看当前类的类加载器\n        System.out.println(Main.class.getClassLoader().getParent());  &#x2F;&#x2F;父加载器\n        System.out.println(Main.class.getClassLoader().getParent().getParent());  &#x2F;&#x2F;爷爷加载器\n        System.out.println(String.class.getClassLoader());   &#x2F;&#x2F;String类的加载器\n    &#125;\n&#125;</code></pre>\n\n<p>由于BootstarpClassLoader是C++编写的，我们在Java中是获取不到的。</p>\n<h2 id=\"Class对象\"><a href=\"#Class对象\" class=\"headerlink\" title=\"Class对象\"></a>Class对象</h2><p>通过前面，我们了解了类的加载，同时会提取一个类的信息生成Class对象存放在内存中，而反射机制其实就是利用这些存放的类信息，来获取类的信息和操作类。那么如何获取到每个类对应的Class对象呢，我们可以通过以下方式：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ClassNotFoundException &#123;\n    Class&lt;String&gt; clazz &#x3D; String.class;   &#x2F;&#x2F;使用class关键字，通过类名获取\n    Class&lt;?&gt; clazz2 &#x3D; Class.forName(&quot;java.lang.String&quot;);   &#x2F;&#x2F;使用Class类静态方法forName()，通过包名.类名获取，注意返回值是Class&lt;?&gt;\n    Class&lt;?&gt; clazz3 &#x3D; new String(&quot;cpdd&quot;).getClass();  &#x2F;&#x2F;通过实例对象获取\n&#125;</code></pre>\n\n<p>注意Class类也是一个泛型类，只有第一种方法，能够直接获取到对应类型的Class对象，而以下两种方法使用了<code>?</code>通配符作为返回值，但是实际上都和第一个返回的是同一个对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Class&lt;String&gt; clazz &#x3D; String.class;   &#x2F;&#x2F;使用class关键字，通过类名获取\nClass&lt;?&gt; clazz2 &#x3D; Class.forName(&quot;java.lang.String&quot;);   &#x2F;&#x2F;使用Class类静态方法forName()，通过包名.类名获取，注意返回值是Class&lt;?&gt;\nClass&lt;?&gt; clazz3 &#x3D; new String(&quot;cpdd&quot;).getClass();\n\nSystem.out.println(clazz &#x3D;&#x3D; clazz2);\nSystem.out.println(clazz &#x3D;&#x3D; clazz3);</code></pre>\n\n<p>通过比较，验证了我们一开始的结论，在JVM中每个类始终只存在一个Class对象，无论通过什么方法获取，都是一样的。现在我们再来看看这个问题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Class&lt;?&gt; clazz &#x3D; int.class;   &#x2F;&#x2F;基本数据类型有Class对象吗？\n    System.out.println(clazz);\n&#125;</code></pre>\n\n<p>迷了，不是每个类才有Class对象吗，基本数据类型又不是类，这也行吗？实际上，基本数据类型也有对应的Class对象（反射操作可能需要用到），而且我们不仅可以通过class关键字获取，其实本质上是定义在对应的包装类中的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * The &#123;@code Class&#125; instance representing the primitive type\n * &#123;@code int&#125;.\n *\n * @since   JDK1.1\n *&#x2F;\n@SuppressWarnings(&quot;unchecked&quot;)\npublic static final Class&lt;Integer&gt;  TYPE &#x3D; (Class&lt;Integer&gt;) Class.getPrimitiveClass(&quot;int&quot;);\n\n&#x2F;*\n * Return the Virtual Machine&#39;s Class object for the named\n * primitive type\n *&#x2F;\nstatic native Class&lt;?&gt; getPrimitiveClass(String name);   &#x2F;&#x2F;C++实现，并非Java定义</code></pre>\n\n<p>每个包装类中（包括Void），都有一个获取原始类型Class方法，注意，getPrimitiveClass获取的是原始类型，并不是包装类型，只是可以使用包装类来表示。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Class&lt;?&gt; clazz &#x3D; int.class;\n    System.out.println(Integer.TYPE &#x3D;&#x3D; int.class);\n&#125;</code></pre>\n\n<p>通过对比，我们发现实际上包装类型都有一个TYPE，其实也就是基本类型的Class，那么包装类的Class和基本类的Class一样吗？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    System.out.println(Integer.TYPE &#x3D;&#x3D; Integer.class);\n&#125;</code></pre>\n\n<p>我们发现，包装类型的Class对象并不是基本类型Class对象。数组类型也是一种类型，只是编程不可见，因此我们可以直接获取数组的Class对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Class&lt;String[]&gt; clazz &#x3D; String[].class;\n    System.out.println(clazz.getName());  &#x2F;&#x2F;获取类名称（得到的是包名+类名的完整名称）\n    System.out.println(clazz.getSimpleName());\n    System.out.println(clazz.getTypeName());\n    System.out.println(clazz.getClassLoader());   &#x2F;&#x2F;获取它的类加载器\n    System.out.println(clazz.cast(new Integer(&quot;10&quot;)));   &#x2F;&#x2F;强制类型转换\n&#125;</code></pre>\n\n<h3 id=\"再谈instanceof\"><a href=\"#再谈instanceof\" class=\"headerlink\" title=\"再谈instanceof\"></a>再谈instanceof</h3><p>正常情况下，我们使用instanceof进行类型比较：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    String str &#x3D; &quot;&quot;;\n    System.out.println(str instanceof String);\n&#125;</code></pre>\n\n<p>它可以判断一个对象是否为此接口或是类的实现或是子类，而现在我们有了更多的方式去判断类型：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    String str &#x3D; &quot;&quot;;\n    System.out.println(str.getClass() &#x3D;&#x3D; String.class);   &#x2F;&#x2F;直接判断是否为这个类型\n&#125;</code></pre>\n\n<p>如果需要判断是否为子类或是接口&#x2F;抽象类的实现，我们可以使用<code>asSubClass()</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Integer i &#x3D; 10;\n    i.getClass().asSubclass(Number.class);   &#x2F;&#x2F;当Integer不是Number的子类时，会产生异常\n&#125;</code></pre>\n\n<h3 id=\"获取父类信息\"><a href=\"#获取父类信息\" class=\"headerlink\" title=\"获取父类信息\"></a>获取父类信息</h3><p>通过<code>getSuperclass()</code>方法，我们可以获取到父类的Class对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Integer i &#x3D; 10;\n    System.out.println(i.getClass().getSuperclass());\n&#125;</code></pre>\n\n<p>也可以通过<code>getGenericSuperclass()</code>获取父类的原始类型的Type：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Integer i &#x3D; 10;\n    Type type &#x3D; i.getClass().getGenericSuperclass();\n    System.out.println(type);\n    System.out.println(type instanceof Class);\n&#125;</code></pre>\n\n<p>我们发现Type实际上是Class类的父接口，但是获取到的Type的实现并不一定是Class。</p>\n<p>同理，我们也可以像上面这样获取父接口：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Integer i &#x3D; 10;\n    for (Class&lt;?&gt; anInterface : i.getClass().getInterfaces()) &#123;\n        System.out.println(anInterface.getName());\n    &#125;\n  \n  \tfor (Type genericInterface : i.getClass().getGenericInterfaces()) &#123;\n        System.out.println(genericInterface.getTypeName());\n    &#125;\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"创建类对象\"><a href=\"#创建类对象\" class=\"headerlink\" title=\"创建类对象\"></a>创建类对象</h2><p>既然我们拿到了类的定义，那么是否可以通过Class对象来创建对象、调用方法、修改变量呢？当然是可以的，那我们首先来探讨一下如何创建一个类的对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws InstantiationException, IllegalAccessException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    Student student &#x3D; clazz.newInstance();\n    student.test();\n&#125;\n\nstatic class Student&#123;\n    public void test()&#123;\n        System.out.println(&quot;萨日朗&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>通过使用<code>newInstance()</code>方法来创建对应类型的实例，返回泛型T，注意它会抛出InstantiationException和IllegalAccessException异常，那么什么情况下会出现异常呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws InstantiationException, IllegalAccessException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    Student student &#x3D; clazz.newInstance();\n    student.test();\n&#125;\n\nstatic class Student&#123;\n\n    public Student(String text)&#123;\n        \n    &#125;\n\n    public void test()&#123;\n        System.out.println(&quot;萨日朗&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>当类默认的构造方法被带参构造覆盖时，会出现InstantiationException异常，因为<code>newInstance()</code>只适用于默认无参构造。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws InstantiationException, IllegalAccessException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    Student student &#x3D; clazz.newInstance();\n    student.test();\n&#125;\n\nstatic class Student&#123;\n\n    private Student()&#123;&#125;\n\n    public void test()&#123;\n        System.out.println(&quot;萨日朗&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>当默认无参构造的权限不是<code>public</code>时，会出现IllegalAccessException异常，表示我们无权去调用默认构造方法。在JDK9之后，不再推荐使用<code>newInstance()</code>方法了，而是使用我们接下来要介绍到的，通过获取构造器，来实例化对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    Student student &#x3D; clazz.getConstructor(String.class).newInstance(&quot;what&#39;s up&quot;);\n    student.test();\n&#125;\n\nstatic class Student&#123;\n\n    public Student(String str)&#123;&#125;\n\n    public void test()&#123;\n        System.out.println(&quot;萨日朗&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>通过获取类的构造方法（构造器）来创建对象实例，会更加合理，我们可以使用<code>getConstructor()</code>方法来获取类的构造方法，同时我们需要向其中填入参数，也就是构造方法需要的类型，当然我们这里只演示了。那么，当访问权限不是public的时候呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    Student student &#x3D; clazz.getConstructor(String.class).newInstance(&quot;what&#39;s up&quot;);\n    student.test();\n&#125;\n\nstatic class Student&#123;\n\n    private Student(String str)&#123;&#125;\n\n    public void test()&#123;\n        System.out.println(&quot;萨日朗&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>我们发现，当访问权限不足时，会无法找到此构造方法，那么如何找到非public的构造方法呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Class&lt;Student&gt; clazz &#x3D; Student.class;\nConstructor&lt;Student&gt; constructor &#x3D; clazz.getDeclaredConstructor(String.class);\nconstructor.setAccessible(true);   &#x2F;&#x2F;修改访问权限\nStudent student &#x3D; constructor.newInstance(&quot;what&#39;s up&quot;);\nstudent.test();</code></pre>\n\n<p>使用<code>getDeclaredConstructor()</code>方法可以找到类中的非public构造方法，但是在使用之前，我们需要先修改访问权限，在修改访问权限之后，就可以使用非public方法了（这意味着，反射可以无视权限修饰符访问类的内容）</p>\n<hr>\n<h2 id=\"调用类的方法\"><a href=\"#调用类的方法\" class=\"headerlink\" title=\"调用类的方法\"></a>调用类的方法</h2><p>我们可以通过反射来调用类的方法（本质上还是类的实例进行调用）只是利用反射机制实现了方法的调用，我们在包下创建一个新的类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.test;\n\npublic class Student &#123;\n    public void test(String str)&#123;\n        System.out.println(&quot;萨日朗&quot;+str);\n    &#125;\n&#125;</code></pre>\n\n<p>这次我们通过<code>forName(String)</code>来找到这个类并创建一个新的对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.test.Student&quot;);\n    Object instance &#x3D; clazz.newInstance();   &#x2F;&#x2F;创建出学生对象\n    Method method &#x3D; clazz.getMethod(&quot;test&quot;, String.class);   &#x2F;&#x2F;通过方法名和形参类型获取类中的方法\n    \n    method.invoke(instance, &quot;what&#39;s up&quot;);   &#x2F;&#x2F;通过Method对象的invoke方法来调用方法\n&#125;</code></pre>\n\n<p>通过调用<code>getMethod()</code>方法，我们可以获取到类中所有声明为public的方法，得到一个Method对象，我们可以通过Method对象的<code>invoke()</code>方法（返回值就是方法的返回值，因为这里是void，返回值为null）来调用已经获取到的方法，注意传参。</p>\n<p>我们发现，利用反射之后，在一个对象从构造到方法调用，没有任何一处需要引用到对象的实际类型，我们也没有导入Student类，整个过程都是反射在代替进行操作，使得整个过程被模糊了，过多的使用反射，会极大地降低后期维护性。</p>\n<p>同构造方法一样，当出现非public方法时，我们可以通过反射来无视权限修饰符，获取非public方法并调用，现在我们将<code>test()</code>方法的权限修饰符改为private：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.test.Student&quot;);\n    Object instance &#x3D; clazz.newInstance();   &#x2F;&#x2F;创建出学生对象\n    Method method &#x3D; clazz.getDeclaredMethod(&quot;test&quot;, String.class);   &#x2F;&#x2F;通过方法名和形参类型获取类中的方法\n    method.setAccessible(true);\n\n    method.invoke(instance, &quot;what&#39;s up&quot;);   &#x2F;&#x2F;通过Method对象的invoke方法来调用方法\n&#125;</code></pre>\n\n<p>Method和Constructor都和Class一样，他们存储了方法的信息，包括方法的形式参数列表，返回值，方法的名称等内容，我们可以直接通过Method对象来获取这些信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.test.Student&quot;);\n    Method method &#x3D; clazz.getDeclaredMethod(&quot;test&quot;, String.class);   &#x2F;&#x2F;通过方法名和形参类型获取类中的方法\n    \n    System.out.println(method.getName());   &#x2F;&#x2F;获取方法名称\n    System.out.println(method.getReturnType());   &#x2F;&#x2F;获取返回值类型\n&#125;</code></pre>\n\n<p>当方法的参数为可变参数时，我们该如何获取方法呢？实际上，我们在之前就已经提到过，可变参数实际上就是一个数组，因此我们可以直接使用数组的class对象表示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Method method &#x3D; clazz.getDeclaredMethod(&quot;test&quot;, String[].class);</code></pre>\n\n<p>反射非常强大，尤其是我们提到的越权访问，但是请一定谨慎使用，别人将某个方法设置为private一定有他的理由，如果实在是需要使用别人定义为private的方法，就必须确保这样做是安全的，在没有了解别人代码的整个过程就强行越权访问，可能会出现无法预知的错误。</p>\n<hr>\n<h2 id=\"修改类的属性\"><a href=\"#修改类的属性\" class=\"headerlink\" title=\"修改类的属性\"></a>修改类的属性</h2><p>我们还可以通过反射访问一个类中定义的成员字段也可以修改一个类的对象中的成员字段值，通过<code>getField()</code>方法来获取一个类定义的指定字段：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.test.Student&quot;);\n    Object instance &#x3D; clazz.newInstance();\n\n    Field field &#x3D; clazz.getField(&quot;i&quot;);   &#x2F;&#x2F;获取类的成员字段i\n    field.set(instance, 100);   &#x2F;&#x2F;将类实例instance的成员字段i设置为100\n\n    Method method &#x3D; clazz.getMethod(&quot;test&quot;);\n    method.invoke(instance);\n&#125;</code></pre>\n\n<p>在得到Field之后，我们就可以直接通过<code>set()</code>方法为某个对象，设定此属性的值，比如上面，我们就为instance对象设定值为100，当访问private字段时，同样可以按照上面的操作进行越权访问：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Class&lt;?&gt; clazz &#x3D; Class.forName(&quot;com.test.Student&quot;);\n    Object instance &#x3D; clazz.newInstance();\n\n    Field field &#x3D; clazz.getDeclaredField(&quot;i&quot;);   &#x2F;&#x2F;获取类的成员字段i\n    field.setAccessible(true);\n    field.set(instance, 100);   &#x2F;&#x2F;将类实例instance的成员字段i设置为100\n\n    Method method &#x3D; clazz.getMethod(&quot;test&quot;);\n    method.invoke(instance);\n&#125;</code></pre>\n\n<p>现在我们已经知道，反射几乎可以把一个类的老底都给扒出来，任何属性，任何内容，都可以被反射修改，无论权限修饰符是什么，那么，如果我的字段被标记为final呢？现在在字段<code>i</code>前面添加<code>final</code>关键字，我们再来看看效果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private final int i &#x3D; 10;</code></pre>\n\n<p>这时，当字段为final时，就修改失败了！当然，通过反射可以直接将final修饰符直接去除，去除后，就可以随意修改内容了，我们来尝试修改Integer的value值：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    Integer i &#x3D; 10;\n\n    Field field &#x3D; Integer.class.getDeclaredField(&quot;value&quot;);\n\n    Field modifiersField &#x3D; Field.class.getDeclaredField(&quot;modifiers&quot;);  &#x2F;&#x2F;这里要获取Field类的modifiers字段进行修改\n    modifiersField.setAccessible(true);\n    modifiersField.setInt(field,field.getModifiers()&amp;~Modifier.FINAL);  &#x2F;&#x2F;去除final标记\n\n    field.setAccessible(true);\n    field.set(i, 100);   &#x2F;&#x2F;强行设置值\n\n    System.out.println(i);\n&#125;</code></pre>\n\n<p>我们可以发现，反射非常暴力，就连被定义为final字段的值都能强行修改，几乎能够无视一切阻拦。我们来试试看修改一些其他的类型：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws ReflectiveOperationException &#123;\n    List&lt;String&gt; i &#x3D; new ArrayList&lt;&gt;();\n\n    Field field &#x3D; ArrayList.class.getDeclaredField(&quot;size&quot;);\n    field.setAccessible(true);\n    field.set(i, 10);\n\n    i.add(&quot;测试&quot;);   &#x2F;&#x2F;只添加一个元素\n    System.out.println(i.size());  &#x2F;&#x2F;大小直接变成11\n    i.remove(10);   &#x2F;&#x2F;瞎移除都不带报错的，淦\n&#125;</code></pre>\n\n<p>实际上，整个ArrayList体系由于我们的反射操作，导致被破坏，因此它已经无法正常工作了！</p>\n<p>再次强调，在进行反射操作时，必须注意是否安全，虽然拥有了创世主的能力，但是我们不能滥用，我们只能把它当做一个不得已才去使用的工具！</p>\n<hr>\n<h2 id=\"自定义ClassLoader加载类\"><a href=\"#自定义ClassLoader加载类\" class=\"headerlink\" title=\"自定义ClassLoader加载类\"></a>自定义ClassLoader加载类</h2><p>我们可以自己手动将class文件加载到JVM中吗？先写好我们定义的类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.test;\n\npublic class Test &#123;\n    public String text;\n\n    public void test(String str)&#123;\n        System.out.println(text+&quot; &gt; 我是测试方法！&quot;+str);\n    &#125;\n&#125;</code></pre>\n\n<p>通过javac命令，手动编译一个.class文件：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">nagocoler@NagodeMacBook-Pro HelloWorld % javac src&#x2F;main&#x2F;java&#x2F;com&#x2F;test&#x2F;Test.java</code></pre>\n\n<p>编译后，得到一个class文件，我们把它放到根目录下，然后编写一个我们自己的ClassLoader，因为普通的ClassLoader无法加载二进制文件，因此我们编写一个自己的来让它支持：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;定义一个自己的ClassLoader\nstatic class MyClassLoader extends ClassLoader&#123;\n    public Class&lt;?&gt; defineClass(String name, byte[] b)&#123;\n        return defineClass(name, b, 0, b.length);   &#x2F;&#x2F;调用protected方法，支持载入外部class文件\n    &#125;\n&#125;\n\npublic static void main(String[] args) throws IOException &#123;\n    MyClassLoader classLoader &#x3D; new MyClassLoader();\n    FileInputStream stream &#x3D; new FileInputStream(&quot;Test.class&quot;);\n    byte[] bytes &#x3D; new byte[stream.available()];\n    stream.read(bytes);\n    Class&lt;?&gt; clazz &#x3D; classLoader.defineClass(&quot;com.test.Test&quot;, bytes);   &#x2F;&#x2F;类名必须和我们定义的保持一致\n    System.out.println(clazz.getName());   &#x2F;&#x2F;成功加载外部class文件\n&#125;</code></pre>\n\n<p>现在，我们就将此class文件读取并解析为Class了，现在我们就可以对此类进行操作了（注意，我们无法在代码中直接使用此类型，因为它是我们直接加载的），我们来试试看创建一个此类的对象并调用其方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n    Object obj &#x3D; clazz.newInstance();\n    Method method &#x3D; clazz.getMethod(&quot;test&quot;, String.class);   &#x2F;&#x2F;获取我们定义的test(String str)方法\n    method.invoke(obj, &quot;哥们这瓜多少钱一斤？&quot;);\n&#125;catch (Exception e)&#123;\n    e.printStackTrace();\n&#125;</code></pre>\n\n<p>我们来试试看修改成员字段之后，再来调用此方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">try &#123;\n    Object obj &#x3D; clazz.newInstance();\n    Field field &#x3D; clazz.getField(&quot;text&quot;);   &#x2F;&#x2F;获取成员变量 String text;\n    field.set(obj, &quot;华强&quot;);\n    Method method &#x3D; clazz.getMethod(&quot;test&quot;, String.class);   &#x2F;&#x2F;获取我们定义的test(String str)方法\n    method.invoke(obj, &quot;哥们这瓜多少钱一斤？&quot;);\n&#125;catch (Exception e)&#123;\n    e.printStackTrace();\n&#125;</code></pre>\n\n<p>通过这种方式，我们就可以实现外部加载甚至是网络加载一个类，只需要把类文件传递即可，这样就无需再将代码写在本地，而是动态进行传递，不仅可以一定程度上防止源代码被反编译（只是一定程度上，想破解你代码有的是方法），而且在更多情况下，我们还可以对byte[]进行加密，保证在传输过程中的安全性。</p>\n<hr>\n<h2 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h2><p>其实我们在之前就接触到注解了，比如<code>@Override</code>表示重写父类方法（当然不加效果也是一样的，此注解在编译时会被自动丢弃）注解本质上也是一个类，只不过它的用法比较特殊。</p>\n<p>注解可以被标注在任意地方，包括方法上、类名上、参数上、成员属性上、注解定义上等，就像注释一样，它相当于我们对某样东西的一个标记。而与注释不同的是，注解可以通过反射在运行时获取，注解也可以选择是否保留到运行时。</p>\n<h3 id=\"预设注解\"><a href=\"#预设注解\" class=\"headerlink\" title=\"预设注解\"></a>预设注解</h3><p>JDK预设了以下注解，作用于代码：</p>\n<ul>\n<li>@Override - 检查（仅仅是检查，不保留到运行时）该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</li>\n<li>@Deprecated - 标记过时方法。如果使用该方法，会报编译警告。</li>\n<li>@SuppressWarnings - 指示编译器去忽略注解中声明的警告（仅仅编译器阶段，不保留到运行时）</li>\n<li>@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。</li>\n<li>@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>\n</ul>\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><p>元注解是作用于注解上的注解，用于我们编写自定义的注解：</p>\n<ul>\n<li>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</li>\n<li>@Documented - 标记这些注解是否包含在用户文档中。</li>\n<li>@Target - 标记这个注解应该是哪种 Java 成员。</li>\n<li>@Inherited - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</li>\n<li>@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li>\n</ul>\n<p>看了这么多预设的注解，你们肯定眼花缭乱了，那我们来看看<code>@Override</code>是如何定义的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Override &#123;\n&#125;</code></pre>\n\n<p>该注解由<code>@Target</code>限定为只能作用于方法上，ElementType是一个枚举类型，用于表示此枚举的作用域，一个注解可以有很多个作用域。<code>@Retention</code>表示此注解的保留策略，包括三种策略，在上述中有写到，而这里定义为只在代码中。一般情况下，自定义的注解需要定义1个<code>@Retention</code>和1-n个<code>@Target</code>。</p>\n<p>既然了解了元注解的使用和注解的定义方式，我们就来尝试定义一个自己的注解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test &#123;\n&#125;</code></pre>\n\n<p>这里我们定义一个Test注解，并将其保留到运行时，同时此注解可以作用于方法或是类上：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\npublic class Main &#123;\n    @Test\n    public static void main(String[] args) &#123;\n        \n    &#125;\n&#125;</code></pre>\n\n<p>这样，一个最简单的注解就被我们创建了。</p>\n<h3 id=\"注解的使用\"><a href=\"#注解的使用\" class=\"headerlink\" title=\"注解的使用\"></a>注解的使用</h3><p>我们还可以在注解中定义一些属性，注解的属性也叫做成员变量，注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test &#123;\n    String value();\n&#125;</code></pre>\n\n<p>默认只有一个属性时，我们可以将其名字设定为value，否则，我们需要在使用时手动指定注解的属性名称，使用value则无需填入：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test &#123;\n    String test();\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Main &#123;\n    @Test(test &#x3D; &quot;&quot;)\n    public static void main(String[] args) &#123;\n\n    &#125;\n&#125;</code></pre>\n\n<p>我们也可以使用default关键字来为这些属性指定默认值：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test &#123;\n    String value() default &quot;都看到这里了，给个三连吧！&quot;;\n&#125;</code></pre>\n\n<p>当属性存在默认值时，使用注解的时候可以不用传入属性值。当属性为数组时呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Test &#123;\n    String[] value();\n&#125;</code></pre>\n\n<p>当属性为数组，我们在使用注解传参时，如果数组里面只有一个内容，我们可以直接传入一个值，而不是创建一个数组：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test(&quot;关注点了吗&quot;)\npublic static void main(String[] args) &#123;\n\t\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Main &#123;\n    @Test(&#123;&quot;value1&quot;, &quot;value2&quot;&#125;)   &#x2F;&#x2F;多个值时就使用花括号括起来\n    public static void main(String[] args) &#123;\n\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"反射获取注解\"><a href=\"#反射获取注解\" class=\"headerlink\" title=\"反射获取注解\"></a>反射获取注解</h3><p>既然我们的注解可以保留到运行时，那么我们来看看，如何获取我们编写的注解，我们需要用到反射机制：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    for (Annotation annotation : clazz.getAnnotations()) &#123;\n        System.out.println(annotation.annotationType());   &#x2F;&#x2F;获取类型\n        System.out.println(annotation instanceof Test);   &#x2F;&#x2F;直接判断是否为Test\n        Test test &#x3D; (Test) annotation;\n        System.out.println(test.value());   &#x2F;&#x2F;获取我们在注解中写入的内容\n    &#125;\n&#125;</code></pre>\n\n<p>通过反射机制，我们可以快速获取到我们标记的注解，同时还能获取到注解中填入的值，那么我们来看看，方法上的标记是不是也可以通过这种方式获取注解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) throws NoSuchMethodException &#123;\n    Class&lt;Student&gt; clazz &#x3D; Student.class;\n    for (Annotation annotation : clazz.getMethod(&quot;test&quot;).getAnnotations()) &#123;\n        System.out.println(annotation.annotationType());   &#x2F;&#x2F;获取类型\n        System.out.println(annotation instanceof Test);   &#x2F;&#x2F;直接判断是否为Test\n        Test test &#x3D; (Test) annotation;\n        System.out.println(test.value());   &#x2F;&#x2F;获取我们在注解中写入的内容\n    &#125;\n&#125;</code></pre>\n\n<p>无论是方法、类、还是字段，都可以使用<code>getAnnotations()</code>方法（还有几个同名的）来快速获取我们标记的注解。</p>\n<p>所以说呢，这玩意学来有啥用？丝毫get不到这玩意的用处。其实不是，现阶段你们还体会不到注解带来的快乐，在接触到Spring和SpringBoot等大型框架后，就能感受到注解带来的魅力了。</p>\n","text":"Java反射和注解注意：本章节涉及到JVM相关底层原理，难度会有一些大。 反射就是把Java类中的各个成分映射成一个个的Java对象。即在运行状态中，对于任意一个类，都能够知道这个类所有的属性和方法，对于任意一个对象，都能调用它的任意一个方法和属性。这种动态获取信息及动态调用对象...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%8F%8D%E5%B0%84%E5%92%8C%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">Java反射和注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">Java类加载机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Class%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Class对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%8D%E8%B0%88instanceof\"><span class=\"toc-text\">再谈instanceof</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E7%88%B6%E7%B1%BB%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">获取父类信息</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E7%B1%BB%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建类对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">调用类的方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">修改类的属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89ClassLoader%E5%8A%A0%E8%BD%BD%E7%B1%BB\"><span class=\"toc-text\">自定义ClassLoader加载类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E8%AE%BE%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">预设注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%83%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">元注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">注解的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">反射获取注解</span></a></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"JavaSE笔记（六）","date":"2022-03-09T03:42:06.895Z","updated":"2022-02-18T04:06:50.000Z","comments":true,"path":"api/articles/JavaSE笔记（六）.json","keywords":null,"cover":[],"text":"Java多线程注意：本章节会涉及到 操作系统 相关知识。 在了解多线程之前，让我们回顾一下操作系统中提到的进程概念： 进程是程序执行的实体，每一个进程都是一个应用程序（比如我们运行QQ、浏览器、LOL、网易云音乐等软件），都有自己的内存空间，CPU一个核心同时只能处理一件事情，当...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[],"tags":[],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}