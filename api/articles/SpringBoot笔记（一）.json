{"title":"SpringBoot笔记（一）","uid":"0437f348450cd4420692493db6677cff","slug":"SpringBoot笔记（一）","date":"2022-03-05T14:36:00.311Z","updated":"2022-03-05T14:38:01.270Z","comments":true,"path":"api/articles/SpringBoot笔记（一）.json","keywords":null,"cover":[],"content":"<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F174788b2ec1d828d85a0a7ac65bea2cd.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644064714&t=46bead84c9b2fb6e0b65fd4afdaf805e\" alt=\"点击查看源网页\"></p>\n<h1 id=\"SpringBoot一站式开发\"><a href=\"#SpringBoot一站式开发\" class=\"headerlink\" title=\"SpringBoot一站式开发\"></a>SpringBoot一站式开发</h1><p>官网：<a href=\"https://spring.io/projects/spring-boot\">https://spring.io/projects/spring-boot</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring Boot可以轻松创建独立的、基于Spring的生产级应用程序，它可以让你“运行即可”。大多数Spring Boot应用程序只需要少量的Spring配置。</p></blockquote>\n<p>SpringBoot功能：</p>\n<ul>\n<li>创建独立的Spring应用程序</li>\n<li>直接嵌入Tomcat、Jetty或Undertow（无需部署WAR包，打包成Jar本身就是一个可以运行的应用程序）</li>\n<li>提供一站式的“starter”依赖项，以简化Maven配置（需要整合什么框架，直接导对应框架的starter依赖）</li>\n<li>尽可能自动配置Spring和第三方库（除非特殊情况，否则几乎不需要你进行什么配置）</li>\n<li>提供生产就绪功能，如指标、运行状况检查和外部化配置</li>\n<li>没有代码生成，也没有XML配置的要求（XML是什么，好吃吗）</li>\n</ul>\n<p>SpringBoot是现在最主流的开发框架，它提供了一站式的开发体验，大幅度提高了我们的开发效率。</p>\n<h2 id=\"走进SpringBoot\"><a href=\"#走进SpringBoot\" class=\"headerlink\" title=\"走进SpringBoot\"></a>走进SpringBoot</h2><p>在SSM阶段，当我们需要搭建一个基于Spring全家桶的Web应用程序时，我们不得不做大量的依赖导入和框架整合相关的Bean定义，光是整合框架就花费了我们大量的时间，但是实际上我们发现，整合框架其实基本都是一些固定流程，我们每创建一个新的Web应用程序，基本都会使用同样的方式去整合框架，我们完全可以将一些重复的配置作为约定，只要框架遵守这个约定，为我们提供默认的配置就好，这样就不用我们再去配置了，约定优于配置！</p>\n<p>而SpringBoot正是将这些过程大幅度进行了简化，它可以自动进行配置，我们只需要导入对应的启动器（starter）依赖即可。</p>\n<p>完成本阶段的学习，基本能够胜任部分网站系统的后端开发工作，也建议同学们学习完SpringBoot之后寻找合适的队友去参加计算机项目相关的高校竞赛。</p>\n<p>我们可以通过IDEA来演示如何快速创建一个SpringBoot项目，并且无需任何配置，就可以实现Bean注册。</p>\n<h2 id=\"SpringBoot项目文件结构\"><a href=\"#SpringBoot项目文件结构\" class=\"headerlink\" title=\"SpringBoot项目文件结构\"></a>SpringBoot项目文件结构</h2><p>我们在创建SpringBoot项目之后，首先会自动生成一个主类，而主类中的<code>main</code>方法中调用了<code>SpringApplication</code>类的静态方法来启动整个SpringBoot项目，并且我们可以看到主类的上方有一个<code>@SpringBootApplication</code>注解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootApplication\npublic class SpringBootTestApplication &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(SpringBootTestApplication.class, args);\n    &#125;\n\n&#125;</code></pre>\n\n<p>同时还自带了一个测试类，测试类的上方仅添加了一个<code>@SpringBootTest</code>注解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootTest\nclass SpringBootTestApplicationTests &#123;\n\n    @Test\n    void contextLoads() &#123;\n        \n    &#125;\n\n&#125;</code></pre>\n\n<p>我们接着来看Maven中写了哪些内容：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;\n         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n  \t&lt;!--  父工程  --&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.6.2&lt;&#x2F;version&gt;\n        &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;&#x2F;parent&gt;\n    &lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springboot-study&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;0.0.1-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;name&gt;SpringBootTest&lt;&#x2F;name&gt;\n    &lt;description&gt;SpringBootTest&lt;&#x2F;description&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;\n    &lt;&#x2F;properties&gt;\n    &lt;dependencies&gt;\n        &lt;!--  spring-boot-starter SpringBoot核心启动器  --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;!--  spring-boot-starter-test SpringBoot测试模块启动器  --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;\n            &lt;scope&gt;test&lt;&#x2F;scope&gt;\n        &lt;&#x2F;dependency&gt;\n    &lt;&#x2F;dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!--  SpringBoot Maven插件，打包Jar都不用你操心了   --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;\n            &lt;&#x2F;plugin&gt;\n        &lt;&#x2F;plugins&gt;\n    &lt;&#x2F;build&gt;\n\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>除了以上这些文件以外，我们的项目目录下还有：</p>\n<ul>\n<li>.gitignore  -  Git忽略名单，下一章我们会专门讲解Git版本控制。</li>\n<li>application.properties   -    SpringBoot的配置文件，所有依赖的配置都在这里编写，但是一般情况下只需要配置必要项即可。</li>\n</ul>\n<hr>\n<h2 id=\"整合Web相关框架\"><a href=\"#整合Web相关框架\" class=\"headerlink\" title=\"整合Web相关框架\"></a>整合Web相关框架</h2><p>我们来看一下，既然我们前面提到SpringBoot会内嵌一个Tomcat服务器，也就是说我们的Jar打包后，相当于就是一个可以直接运行的应用程序，我们来看一下如何创建一个SpringBootWeb项目。</p>\n<p>这里我们演示使用IDEA来创建一个基于SpringBoot的Web应用程序。</p>\n<h3 id=\"它是真的快\"><a href=\"#它是真的快\" class=\"headerlink\" title=\"它是真的快\"></a>它是真的快</h3><p>创建完成后，直接开启项目，我们就可以直接访问：<a href=\"http://localhost:8080/%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E4%BD%86%E6%98%AF%E7%94%B1%E4%BA%8E%E6%88%91%E4%BB%AC%E6%B2%A1%E6%9C%89%E7%BC%96%E5%86%99%E4%BB%BB%E4%BD%95%E7%9A%84%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%EF%BC%8C%E6%89%80%E4%BB%A5%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE%E3%80%82%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E7%9C%8B%E7%9C%8B%E6%97%A5%E5%BF%97%EF%BC%9A\">http://localhost:8080/，我们可以看到，但是由于我们没有编写任何的请求映射，所以没有数据。我们可以来看看日志：</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">2022-01-06 22:17:46.308  INFO 853 --- [           main] c.example.SpringBootWebTestApplication   : Starting SpringBootWebTestApplication using Java 1.8.0_312 on NagodeMacBook-Pro.local with PID 853 (&#x2F;Users&#x2F;nagocoler&#x2F;Downloads&#x2F;SpringBootWebTest&#x2F;target&#x2F;classes started by nagocoler in &#x2F;Users&#x2F;nagocoler&#x2F;Downloads&#x2F;SpringBootWebTest)\n2022-01-06 22:17:46.309  INFO 853 --- [           main] c.example.SpringBootWebTestApplication   : No active profile set, falling back to default profiles: default\n2022-01-06 22:17:46.629  INFO 853 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n2022-01-06 22:17:46.632  INFO 853 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2022-01-06 22:17:46.632  INFO 853 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat&#x2F;9.0.56]\n2022-01-06 22:17:46.654  INFO 853 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext\n2022-01-06 22:17:46.654  INFO 853 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 325 ms\n2022-01-06 22:17:46.780  INFO 853 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;\n2022-01-06 22:17:46.785  INFO 853 --- [           main] c.example.SpringBootWebTestApplication   : Started SpringBootWebTestApplication in 0.62 seconds (JVM running for 0.999)\n2022-01-06 22:18:02.979  INFO 853 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;\n2022-01-06 22:18:02.979  INFO 853 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;\n2022-01-06 22:18:02.980  INFO 853 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms</code></pre>\n\n<p>我们可以看到，日志中除了最基本的SpringBoot启动日志以外，还新增了内嵌Web服务器（Tomcat）的启动日志，并且显示了当前Web服务器所开放的端口，并且自动帮助我们初始化了DispatcherServlet，但是我们只是创建了项目，导入了web相关的starter依赖，没有进行任何的配置，实际上它使用的是starter提供的默认配置进行初始化的。</p>\n<p>由于SpringBoot是自动扫描的，因此我们直接创建一个Controller即可被加载：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class MainController &#123;\n\n  \t&#x2F;&#x2F;直接访问http:&#x2F;&#x2F;localhost:8080&#x2F;index即可，不用加web应用程序名称了\n    @RequestMapping(&quot;&#x2F;index&quot;)\n    @ResponseBody\n    public String index()&#123;\n        return &quot;你好，欢迎访问主页！&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>我们几乎没有做任何配置，但是可以直接开始配置Controller，SpringBoot创建一个Web项目的速度就是这么快！</p>\n<p>它还可以自动识别类型，如果我们返回的是一个对象类型的数据，那么它会自动转换为JSON数据格式，无需配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class Student &#123;\n    int sid;\n    String name;\n    String sex;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;student&quot;)\n@ResponseBody\npublic Student student()&#123;\n    Student student &#x3D; new Student();\n    student.setName(&quot;小明&quot;);\n    student.setSex(&quot;男&quot;);\n    student.setSid(10);\n    return student;\n&#125;</code></pre>\n\n<p>最后浏览器能够直接得到<code>application/json</code>的响应数据，就是这么方便。</p>\n<h3 id=\"修改Web相关配置\"><a href=\"#修改Web相关配置\" class=\"headerlink\" title=\"修改Web相关配置\"></a>修改Web相关配置</h3><p>如果我们需要修改Web服务器的端口或是一些其他的内容，我们可以直接在<code>application.properties</code>中进行修改，它是整个SpringBoot的配置文件：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\"># 修改端口为80\nserver.port&#x3D;80</code></pre>\n\n<p>我们还可以编写自定义的配置项，并在我们的项目中通过<code>@Value</code>直接注入：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">test.data&#x3D;100</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Controller\npublic class MainController &#123;\n\n    @Value(&quot;$&#123;test.data&#125;&quot;)\n    int data;</code></pre>\n\n<p>通过这种方式，我们就可以更好地将一些需要频繁修改的配置项写在配置文件中，并通过注解方式去获取值。</p>\n<p>配置文件除了使用<code>properties</code>格式以外，还有一种叫做<code>yaml</code>格式，它的语法如下：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">一级目录:\n\t二级目录:\n\t  三级目录1: 值\n\t  三级目录2: 值\n\t  三级目录List: \n\t  - 元素1\n\t  - 元素2\n\t  - 元素3</code></pre>\n\n<p>我们可以看到，每一级目录都是通过缩进（不能使用Tab，只能使用空格）区分，并且键和值之间需要添加冒号+空格来表示。</p>\n<p>SpringBoot也支持这种格式的配置文件，我们可以将<code>application.properties</code>修改为<code>application.yml</code>或是<code>application.yaml</code>来使用YAML语法编写配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 80</code></pre>\n\n<h3 id=\"整合SpringSecurity依赖\"><a href=\"#整合SpringSecurity依赖\" class=\"headerlink\" title=\"整合SpringSecurity依赖\"></a>整合SpringSecurity依赖</h3><p>我们接着来整合一下SpringSecurity依赖，继续感受SpringBoot带来的光速开发体验，只需要导入SpringSecurity的Starter依赖即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>导入依赖后，我们直接启动SpringBoot应用程序，可以发现SpringSecurity已经生效了。</p>\n<p>并且SpringSecurity会自动为我们生成一个默认用户<code>user</code>，它的密码会出现在日志中：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">2022-01-06 23:10:51.329  INFO 2901 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]\n2022-01-06 23:10:51.329  INFO 2901 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat&#x2F;9.0.56]\n2022-01-06 23:10:51.350  INFO 2901 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext\n2022-01-06 23:10:51.351  INFO 2901 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 341 ms\n2022-01-06 23:10:51.469  INFO 2901 --- [           main] .s.s.UserDetailsServiceAutoConfiguration : \n\nUsing generated security password: ff24bee3-e1b7-4309-9609-d32618baf5cb\n</code></pre>\n\n<p>其中<code>ff24bee3-e1b7-4309-9609-d32618baf5cb</code>就是随机生成的一个密码，我们可以使用此用户登录。</p>\n<p>我们也可以在配置文件中直接配置：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  security:\n    user:\n      name: test   # 用户名\n      password: 123456  # 密码\n      roles:   # 角色\n      - user\n      - admin</code></pre>\n\n<p>实际上这样的配置方式就是一个<code>inMemoryAuthentication</code>，只是我们可以直接配置而已。</p>\n<p>当然，页面的控制和数据库验证我们还是需要提供<code>WebSecurityConfigurerAdapter</code>的实现类去完成：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter &#123;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        http\n                .authorizeRequests()\n                .antMatchers(&quot;&#x2F;login&quot;).permitAll()\n                .anyRequest().hasRole(&quot;user&quot;)\n                .and()\n                .formLogin();\n    &#125;\n&#125;</code></pre>\n\n<p>注意这里不需要再添加<code>@EnableWebSecurity</code>了，因为starter依赖已经帮我们添加了。</p>\n<p>使用了SpringBoot之后，我们发现，需要什么功能，只需要导入对应的starter依赖即可，甚至都不需要你去进行额外的配置，你只需要关注依赖本身的必要设置即可，大大提高了我们的开发效率。</p>\n<hr>\n<h2 id=\"整合Mybatis框架\"><a href=\"#整合Mybatis框架\" class=\"headerlink\" title=\"整合Mybatis框架\"></a>整合Mybatis框架</h2><p>我们接着来看如何整合Mybatis框架，同样的，我们只需要导入对应的starter依赖即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>导入依赖后，直接启动会报错，是因为有必要的配置我们没有去编写，我们需要指定数据源的相关信息：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  datasource:\n    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver</code></pre>\n\n<p>再次启动，成功。</p>\n<p>我们发现日志中会出现这样一句话：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">2022-01-07 12:32:09.106  WARN 6917 --- [           main] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in &#39;[com.example]&#39; package. Please check your configuration.</code></pre>\n\n<p>这是Mybatis自动扫描输出的语句，导入依赖后，我们不需要再去设置Mybatis的相关Bean了，也不需要添加任何<code>@MapperSacn</code>注解，因为starter已经帮助我们做了，它会自动扫描项目中添加了<code>@Mapper</code>注解的接口，直接将其注册为Bean，不需要进行任何配置。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface MainMapper &#123;\n    @Select(&quot;select * from users where username &#x3D; #&#123;username&#125;&quot;)\n    UserData findUserByName(String username);\n&#125;</code></pre>\n\n<p>当然，如果你觉得每个接口都去加一个<code>@Mapper</code>比较麻烦的话也可以用回之前的方式，直接<code>@MapperScan</code>使用包扫描。</p>\n<p>添加Mapper之后，使用方法和SSM阶段是一样的，我们可以将其与SpringSecurity结合使用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserAuthService implements UserDetailsService &#123;\n\n    @Resource\n    MainMapper mapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;\n        UserData data &#x3D; mapper.findUserByName(username);\n        if(data &#x3D;&#x3D; null) throw new UsernameNotFoundException(&quot;用户 &quot;+username+&quot; 登录失败，用户名不存在！&quot;);\n        return User\n                .withUsername(data.getUsername())\n                .password(data.getPassword())\n                .roles(data.getRole())\n                .build();\n    &#125;\n&#125;</code></pre>\n\n<p>最后配置一下自定义验证即可，注意这样之前配置文件里面配置的用户就失效了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n    auth\n            .userDetailsService(service)\n            .passwordEncoder(new BCryptPasswordEncoder());\n&#125;</code></pre>\n\n<p>在首次使用时，我们发现日志中输出以以下语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">2022-01-07 12:39:40.559  INFO 6930 --- [nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...\n2022-01-07 12:39:41.033  INFO 6930 --- [nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</code></pre>\n\n<p>实际上，SpringBoot会自动为Mybatis配置数据源，默认使用的就是<code>HikariCP</code>数据源。</p>\n<hr>\n<h2 id=\"整合Thymeleaf框架\"><a href=\"#整合Thymeleaf框架\" class=\"headerlink\" title=\"整合Thymeleaf框架\"></a>整合Thymeleaf框架</h2><p>整合Thymeleaf也只需导入对应的starter即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>接着我们只需要直接使用即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index()&#123;\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>但是注意，这样只能正常解析HTML页面，但是js、css等静态资源我们需要进行路径指定，不然无法访问，我们在配文件中配置一下静态资源的访问前缀：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n\tmvc:\n  \tstatic-path-pattern: &#x2F;static&#x2F;**</code></pre>\n\n<p>接着我们像之前一样，把登陆页面实现一下吧。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;http:&#x2F;&#x2F;www.thymeleaf.org\nxmlns:sec&#x3D;http:&#x2F;&#x2F;www.thymeleaf.org&#x2F;extras&#x2F;spring-security&gt;</code></pre>\n\n<hr>\n<h2 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h2><p>SpringBoot为我们提供了丰富的日志系统，它几乎是开箱即用的。</p>\n<h3 id=\"日志门面和日志实现\"><a href=\"#日志门面和日志实现\" class=\"headerlink\" title=\"日志门面和日志实现\"></a>日志门面和日志实现</h3><p>我们首先要区分一下，什么是日志门面（Facade）什么是日志实现，我们之前学习的JUL实际上就是一种日志实现，我们可以直接使用JUL为我们提供的日志框架来规范化打印日志，而日志门面，如Slf4j，是把不同的日志系统的实现进行了具体的抽象化，只提供了统一的日志使用接口，使用时只需要按照其提供的接口方法进行调用即可，由于它只是一个接口，并不是一个具体的可以直接单独使用的日志框架，所以最终日志的格式、记录级别、输出方式等都要通过接口绑定的具体的日志系统来实现，这些具体的日志系统就有log4j、logback、java.util.logging等，它们才实现了具体的日志系统的功能。</p>\n<p>日志门面和日志实现就像JDBC和数据库驱动一样，一个是画大饼的，一个是真的去做饼的。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2909474-b5127a18b3eda3ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/888\" alt=\"img\"></p>\n<p>但是现在有一个问题就是，不同的框架可能使用了不同的日志框架，如果这个时候出现众多日志框架并存的情况，我们现在希望的是所有的框架一律使用日志门面（Slf4j）进行日志打印，这时该怎么去解决？我们不可能将其他框架依赖的日志框架替换掉，直接更换为Slf4j吧，这样显然不现实。</p>\n<p>这时，可以采取类似于偷梁换柱的做法，只保留不同日志框架的接口和类定义等关键信息，而将实现全部定向为Slf4j调用。相当于有着和原有日志框架一样的外壳，对于其他框架来说依然可以使用对应的类进行操作，而具体如何执行，真正的内心已经是Slf4j的了。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2909474-512f5cca92e05e59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/928\" alt=\"img\"></p>\n<p>所以，SpringBoot为了统一日志框架的使用，做了这些事情：</p>\n<ul>\n<li>直接将其他依赖以前的日志框架剔除</li>\n<li>导入对应日志框架的Slf4j中间包</li>\n<li>导入自己官方指定的日志实现，并作为Slf4j的日志实现层</li>\n</ul>\n<h3 id=\"在SpringBoot中打印日志信息\"><a href=\"#在SpringBoot中打印日志信息\" class=\"headerlink\" title=\"在SpringBoot中打印日志信息\"></a>在SpringBoot中打印日志信息</h3><p>SpringBoot使用的是Slf4j作为日志门面，Logback（<a href=\"http://logback.qos.ch/\">Logback</a> 是log4j 框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J）作为日志实现，对应的依赖为：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>此依赖已经被包含了，所以我们如果需要打印日志，可以像这样：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;login&quot;)\npublic String login()&#123;\n    Logger logger &#x3D; LoggerFactory.getLogger(MainController.class);\n    logger.info(&quot;用户访问了一次登陆界面&quot;);\n    return &quot;login&quot;;\n&#125;</code></pre>\n\n<p>因为我们使用了Lombok，所以直接一个注解也可以搞定哦：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@Controller\npublic class MainController &#123;\n\n    @RequestMapping(&quot;&#x2F;login&quot;)\n    public String login()&#123;\n        log.info(&quot;用户访问了一次登陆界面&quot;);\n        return &quot;login&quot;;\n    &#125;</code></pre>\n\n<p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，SpringBoot默认只会打印INFO以上级别的信息。</p>\n<h3 id=\"配置Logback日志\"><a href=\"#配置Logback日志\" class=\"headerlink\" title=\"配置Logback日志\"></a>配置Logback日志</h3><p>Logback官网：<a href=\"https://logback.qos.ch/\">https://logback.qos.ch</a></p>\n<p>和JUL一样，Logback也能实现定制化，我们可以编写对应的配置文件，SpringBoot推荐将配置文件名称命名为<code>logback-spring.xml</code>表示这是SpringBoot下Logback专用的配置，可以使用SpringBoot 的高级Proﬁle功能，它的内容类似于这样：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;configuration&gt;\n    &lt;!-- 配置 --&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<p>最外层由<code>configuration</code>包裹，一旦编写，那么就会替换默认的配置，所以如果内部什么都不写的话，那么会导致我们的SpringBoot项目没有配置任何日志输出方式，控制台也不会打印日志。</p>\n<p>我们接着来看如何配置一个控制台日志打印，我们可以直接导入并使用SpringBoot为我们预设好的日志格式，在<code>org/springframework/boot/logging/logback/defaults.xml</code>中已经帮我们把日志的输出格式定义好了，我们只需要设置对应的<code>appender</code>即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;included&gt;\n   &lt;conversionRule conversionWord&#x3D;&quot;clr&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ColorConverter&quot; &#x2F;&gt;\n   &lt;conversionRule conversionWord&#x3D;&quot;wex&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; &#x2F;&gt;\n   &lt;conversionRule conversionWord&#x3D;&quot;wEx&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; &#x2F;&gt;\n\n   &lt;property name&#x3D;&quot;CONSOLE_LOG_PATTERN&quot; value&#x3D;&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;&#x2F;&gt;\n   &lt;property name&#x3D;&quot;CONSOLE_LOG_CHARSET&quot; value&#x3D;&quot;$&#123;CONSOLE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;&#x2F;&gt;\n   &lt;property name&#x3D;&quot;FILE_LOG_PATTERN&quot; value&#x3D;&quot;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;&#x2F;&gt;\n   &lt;property name&#x3D;&quot;FILE_LOG_CHARSET&quot; value&#x3D;&quot;$&#123;FILE_LOG_CHARSET:-$&#123;file.encoding:-UTF-8&#125;&#125;&quot;&#x2F;&gt;\n\n   &lt;logger name&#x3D;&quot;org.apache.catalina.startup.DigesterFactory&quot; level&#x3D;&quot;ERROR&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.apache.catalina.util.LifecycleBase&quot; level&#x3D;&quot;ERROR&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.apache.coyote.http11.Http11NioProtocol&quot; level&#x3D;&quot;WARN&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.apache.sshd.common.util.SecurityUtils&quot; level&#x3D;&quot;WARN&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.apache.tomcat.util.net.NioSelectorPool&quot; level&#x3D;&quot;WARN&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.eclipse.jetty.util.component.AbstractLifeCycle&quot; level&#x3D;&quot;ERROR&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.hibernate.validator.internal.util.Version&quot; level&#x3D;&quot;WARN&quot;&#x2F;&gt;\n   &lt;logger name&#x3D;&quot;org.springframework.boot.actuate.endpoint.jmx&quot; level&#x3D;&quot;WARN&quot;&#x2F;&gt;\n&lt;&#x2F;included&gt;</code></pre>\n\n<p>导入后，我们利用预设的日志格式创建一个控制台日志打印：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n&lt;configuration&gt;\n    &lt;!--  导入其他配置文件，作为预设  --&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;defaults.xml&quot; &#x2F;&gt;\n\n    &lt;!--  Appender作为日志打印器配置，这里命名随意  --&gt;\n    &lt;!--  ch.qos.logback.core.ConsoleAppender是专用于控制台的Appender  --&gt;\n    &lt;appender name&#x3D;&quot;CONSOLE&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;encoder&gt;\n            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n            &lt;charset&gt;$&#123;CONSOLE_LOG_CHARSET&#125;&lt;&#x2F;charset&gt;\n        &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n\n    &lt;!--  指定日志输出级别，以及启用的Appender，这里就使用了我们上面的ConsoleAppender  --&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<p>配置完成后，我们发现控制台已经可以正常打印日志信息了。</p>\n<p>接着我们来看看如何开启文件打印，我们只需要配置一个对应的Appender即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--  ch.qos.logback.core.rolling.RollingFileAppender用于文件日志记录，它支持滚动  --&gt;\n&lt;appender name&#x3D;&quot;FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n    &lt;encoder&gt;\n        &lt;pattern&gt;$&#123;FILE_LOG_PATTERN&#125;&lt;&#x2F;pattern&gt;\n        &lt;charset&gt;$&#123;FILE_LOG_CHARSET&#125;&lt;&#x2F;charset&gt;\n    &lt;&#x2F;encoder&gt;\n    &lt;!--  自定义滚动策略，防止日志文件无限变大，也就是日志文件写到什么时候为止，重新创建一个新的日志文件开始写  --&gt;\n    &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;\n        &lt;!--  文件保存位置以及文件命名规则，这里用到了%d&#123;yyyy-MM-dd&#125;表示当前日期，%i表示这一天的第N个日志  --&gt;\n        &lt;FileNamePattern&gt;log&#x2F;%d&#123;yyyy-MM-dd&#125;-spring-%i.log&lt;&#x2F;FileNamePattern&gt;\n        &lt;!--  到期自动清理日志文件  --&gt;\n        &lt;cleanHistoryOnStart&gt;true&lt;&#x2F;cleanHistoryOnStart&gt;\n        &lt;!--  最大日志保留时间  --&gt;\n        &lt;maxHistory&gt;7&lt;&#x2F;maxHistory&gt;\n        &lt;!--  最大单个日志文件大小  --&gt;\n        &lt;maxFileSize&gt;10MB&lt;&#x2F;maxFileSize&gt;\n    &lt;&#x2F;rollingPolicy&gt;\n&lt;&#x2F;appender&gt;\n\n&lt;!--  指定日志输出级别，以及启用的Appender，这里就使用了我们上面的ConsoleAppender  --&gt;\n&lt;root level&#x3D;&quot;INFO&quot;&gt;\n    &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot;&#x2F;&gt;\n    &lt;appender-ref ref&#x3D;&quot;FILE&quot;&#x2F;&gt;\n&lt;&#x2F;root&gt;</code></pre>\n\n<p>配置完成后，我们可以看到日志文件也能自动生成了。</p>\n<p>我们也可以魔改官方提供的日志格式，官方文档：<a href=\"https://logback.qos.ch/manual/layouts.html\">https://logback.qos.ch/manual/layouts.html</a></p>\n<p>这里需要提及的是MDC机制，Logback内置的日志字段还是比较少，如果我们需要打印有关业务的更多的内容，包括自定义的一些数据，需要借助logback MDC机制，MDC为“Mapped Diagnostic Context”（映射诊断上下文），即将一些运行时的上下文数据通过logback打印出来；此时我们需要借助org.sl4j.MDC类。</p>\n<p>比如我们现在需要记录是哪个用户访问我们网站的日志，只要是此用户访问我们网站，都会在日志中携带该用户的ID，我们希望每条日志中都携带这样一段信息文本，而官方提供的字段无法实现此功能，这时就需要使用MDC机制：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Slf4j\n@Controller\npublic class MainController &#123;\n\n    @RequestMapping(&quot;&#x2F;login&quot;)\n    public String login()&#123;\n      \t&#x2F;&#x2F;这里就用Session代替ID吧\n        MDC.put(&quot;reqId&quot;, request.getSession().getId());\n        log.info(&quot;用户访问了一次登陆界面&quot;);\n        return &quot;login&quot;;\n    &#125;</code></pre>\n\n<p>通过这种方式，我们就可以向日志中传入自定义参数了，我们日志中添加这样一个占位符<code>%X&#123;键值&#125;</code>，名字保持一致：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">%clr([%X&#123;reqId&#125;])&#123;faint&#125; </code></pre>\n\n<p>这样当我们向MDC中添加信息后，只要是当前线程（本质是ThreadLocal实现）下输出的日志，都会自动替换占位符。</p>\n<h3 id=\"自定义Banner\"><a href=\"#自定义Banner\" class=\"headerlink\" title=\"自定义Banner\"></a>自定义Banner</h3><p>我们在之前发现，实际上Banner部分和日志部分是独立的，SpringBoot启动后，会先打印Banner部分，那么这个Banner部分是否可以自定义呢？答案是可以的。</p>\n<p>我们可以直接来配置文件所在目录下创建一个名为<code>banner.txt</code>的文本文档，内容随便你：</p>\n<pre class=\"line-numbers language-txt\" data-language=\"txt\"><code class=\"language-txt\">&#x2F;&#x2F;                          _ooOoo_                               &#x2F;&#x2F;\n&#x2F;&#x2F;                         o8888888o                              &#x2F;&#x2F;\n&#x2F;&#x2F;                         88&quot; . &quot;88                              &#x2F;&#x2F;\n&#x2F;&#x2F;                         (| ^_^ |)                              &#x2F;&#x2F;\n&#x2F;&#x2F;                         O\\  &#x3D;  &#x2F;O                              &#x2F;&#x2F;\n&#x2F;&#x2F;                      ____&#x2F;&#96;---&#39;\\____                           &#x2F;&#x2F;\n&#x2F;&#x2F;                    .&#39;  \\\\|     |&#x2F;&#x2F;  &#96;.                         &#x2F;&#x2F;\n&#x2F;&#x2F;                   &#x2F;  \\\\|||  :  |||&#x2F;&#x2F;  \\                        &#x2F;&#x2F;\n&#x2F;&#x2F;                  &#x2F;  _||||| -:- |||||-  \\                       &#x2F;&#x2F;\n&#x2F;&#x2F;                  |   | \\\\\\  -  &#x2F;&#x2F;&#x2F; |   |                       &#x2F;&#x2F;\n&#x2F;&#x2F;                  | \\_|  &#39;&#39;\\---&#x2F;&#39;&#39;  |   |                       &#x2F;&#x2F;\n&#x2F;&#x2F;                  \\  .-\\__  &#96;-&#96;  ___&#x2F;-. &#x2F;                       &#x2F;&#x2F;\n&#x2F;&#x2F;                ___&#96;. .&#39;  &#x2F;--.--\\  &#96;. . ___                     &#x2F;&#x2F;\n&#x2F;&#x2F;              .&quot;&quot; &#39;&lt;  &#96;.___\\_&lt;|&gt;_&#x2F;___.&#39;  &gt;&#39;&quot;&quot;.                  &#x2F;&#x2F;\n&#x2F;&#x2F;            | | :  &#96;- \\&#96;.;&#96;\\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |                 &#x2F;&#x2F;\n&#x2F;&#x2F;            \\  \\ &#96;-.   \\_ __\\ &#x2F;__ _&#x2F;   .-&#96; &#x2F;  &#x2F;                 &#x2F;&#x2F;\n&#x2F;&#x2F;      &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;         &#x2F;&#x2F;\n&#x2F;&#x2F;                           &#96;&#x3D;---&#x3D;&#39;                              &#x2F;&#x2F;\n&#x2F;&#x2F;      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        &#x2F;&#x2F;\n&#x2F;&#x2F;             佛祖保佑          永无BUG         永不修改             &#x2F;&#x2F;</code></pre>\n\n<p>可以使用在线生成网站进行生成自己的个性Banner：<a href=\"https://www.bootschool.net/ascii\">https://www.bootschool.net/ascii</a></p>\n<p>我们甚至还可以使用颜色代码来为文本切换颜色：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$&#123;AnsiColor.BRIGHT_GREEN&#125;  &#x2F;&#x2F;绿色</code></pre>\n\n<p>也可以获取一些常用的变量信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$&#123;AnsiColor.YELLOW&#125; 当前 Spring Boot 版本：$&#123;spring-boot.version&#125;</code></pre>\n\n<p>玩的开心！</p>\n<hr>\n<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>在日常开发中，我们项目会有多个环境。例如开发环境（develop）也就是我们研发过程中疯狂敲代码修BUG阶段，生产环境（production ）项目开发得差不多了，可以放在服务器上跑了。不同的环境下，可能我们的配置文件也存在不同，但是我们不可能切换环境的时候又去重新写一次配置文件，所以我们可以将多个环境的配置文件提前写好，进行自由切换。</p>\n<p>由于SpringBoot只会读取<code>application.properties</code>或是<code>application.yml</code>文件，那么怎么才能实现自由切换呢？SpringBoot给我们提供了一种方式，我们可以通过配置文件指定：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  profiles:\n    active: dev</code></pre>\n\n<p>接着我们分别创建两个环境的配置文件，<code>application-dev.yml</code>和<code>application-prod.yml</code>分别表示开发环境和生产环境的配置文件，比如开发环境我们使用的服务器端口为8080，而生产环境下可能就需要设置为80或是443端口，那么这个时候就需要不同环境下的配置文件进行区分：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8080</code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 80</code></pre>\n\n<p>这样我们就可以灵活切换生产环境和开发环境下的配置文件了。</p>\n<p>SpringBoot自带的Logback日志系统也是支持多环境配置的，比如我们想在开发环境下输出日志到控制台，而生产环境下只需要输出到文件即可，这时就需要进行环境配置：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;springProfile name&#x3D;&quot;dev&quot;&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot;&#x2F;&gt;\n        &lt;appender-ref ref&#x3D;&quot;FILE&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n&lt;&#x2F;springProfile&gt;\n\n&lt;springProfile name&#x3D;&quot;prod&quot;&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;appender-ref ref&#x3D;&quot;FILE&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n&lt;&#x2F;springProfile&gt;</code></pre>\n\n<p>注意<code>springProfile</code>是区分大小写的！</p>\n<p>那如果我们希望生产环境中不要打包开发环境下的配置文件呢，我们目前虽然可以切换开发环境，但是打包的时候依然是所有配置文件全部打包，这样总感觉还欠缺一点完美，因此，打包的问题就只能找Maven解决了，Maven也可以设置多环境：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!--分别设置开发，生产环境--&gt;\n&lt;profiles&gt;\n    &lt;!-- 开发环境 --&gt;\n    &lt;profile&gt;\n        &lt;id&gt;dev&lt;&#x2F;id&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n        &lt;properties&gt;\n            &lt;environment&gt;dev&lt;&#x2F;environment&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n    &lt;!-- 生产环境 --&gt;\n    &lt;profile&gt;\n        &lt;id&gt;prod&lt;&#x2F;id&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;false&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n        &lt;properties&gt;\n            &lt;environment&gt;prod&lt;&#x2F;environment&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n&lt;&#x2F;profiles&gt;</code></pre>\n\n<p>接着，我们需要根据环境的不同，排除其他环境的配置文件：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;resources&gt;\n&lt;!--排除配置文件--&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;!--先排除所有的配置文件--&gt;\n        &lt;excludes&gt;\n            &lt;!--使用通配符，当然可以定义多个exclude标签进行排除--&gt;\n            &lt;exclude&gt;application*.yml&lt;&#x2F;exclude&gt;\n        &lt;&#x2F;excludes&gt;\n    &lt;&#x2F;resource&gt;\n\n    &lt;!--根据激活条件引入打包所需的配置和文件--&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;!--引入所需环境的配置文件--&gt;\n        &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;includes&gt;\n            &lt;include&gt;application.yml&lt;&#x2F;include&gt;\n            &lt;!--根据maven选择环境导入配置文件--&gt;\n            &lt;include&gt;application-$&#123;environment&#125;.yml&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n\n<p>接着，我们可以直接将Maven中的<code>environment</code>属性，传递给SpringBoot的配置文件，在构建时替换为对应的值：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  profiles:\n    active: &#39;@environment@&#39;  #注意YAML配置文件需要加单引号，否则会报错</code></pre>\n\n<p>这样，根据我们Maven环境的切换，SpringBoot的配置文件也会进行对应的切换。</p>\n<p>最后我们打开Maven栏目，就可以自由切换了，直接勾选即可，注意切换环境之后要重新加载一下Maven项目，不然不会生效！</p>\n<hr>\n<h2 id=\"打包运行\"><a href=\"#打包运行\" class=\"headerlink\" title=\"打包运行\"></a>打包运行</h2><p>现在我们的SpringBoot项目编写完成了，那么如何打包运行呢？非常简单，只需要点击Maven生命周期中的<code>package</code>即可，它会自动将其打包为可直接运行的Jar包，第一次打包可能会花费一些时间下载部分依赖的源码一起打包进Jar文件。</p>\n<p>我们发现在打包的过程中还会完整的将项目跑一遍进行测试，如果我们不想测试直接打包，可以手动使用以下命令：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">mvn package  -DskipTests</code></pre>\n\n<p>打包后，我们会直接得到一个名为<code>springboot-study-0.0.1-SNAPSHOT.jar</code>的文件，这时在CMD窗口中输入命令：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">java -jar springboot-study-0.0.1-SNAPSHOT.jar</code></pre>\n\n<p>输入后，可以看到我们的Java项目成功运行起来了，如果手动关闭窗口会导致整个项目终止运行。</p>\n<hr>\n<h2 id=\"再谈Spring框架\"><a href=\"#再谈Spring框架\" class=\"headerlink\" title=\"再谈Spring框架\"></a>再谈Spring框架</h2><p><strong>注意：</strong>开始本部分前，建议先完成SSM阶段的Spring源码讲解部分。</p>\n<p>我们在SpringBoot阶段，需要继续扩充Spring框架的相关知识，来巩固和强化对于Spring框架的认识。</p>\n<h3 id=\"任务调度\"><a href=\"#任务调度\" class=\"headerlink\" title=\"任务调度\"></a>任务调度</h3><p>为了执行某些任务，我们可能需要一些非常规的操作，比如我们希望使用多线程来处理我们的结果或是执行一些定时任务，到达指定时间再去执行。</p>\n<p>这时我们首先想到的就是创建一个新的线程来处理，或是使用TimerTask来完成定时任务，但是我们有了Spring框架之后，就不用这样了，因为Spring框架为我们提供了更加便捷的方式进行任务调度。</p>\n<h4 id=\"异步任务\"><a href=\"#异步任务\" class=\"headerlink\" title=\"异步任务\"></a>异步任务</h4><p>需要使用Spring异步任务支持，我们需要在配置类上添加<code>@EnableAsync</code>或是在SpringBoot的启动类上添加也可以。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableAsync\n@SpringBootApplication\npublic class SpringBootWebTestApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(SpringBootWebTestApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>接着我们只需要在需要异步执行的方法上，添加<code>@Async</code>注解即可将此方法标记为异步，当此方法被调用时，会异步执行，也就是新开一个线程执行，不是在当前线程执行。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class TestService &#123;\n\n    @Async\n    public void test()&#123;\n        try &#123;\n            Thread.sleep(3000);\n            System.out.println(&quot;我是异步任务！&quot;);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;login&quot;)\npublic String login(HttpServletRequest request)&#123;\n    service.test();\n    System.out.println(&quot;我是同步任务！&quot;);\n    return &quot;login&quot;;\n&#125;</code></pre>\n\n<p>实际上这也是得益于AOP机制，通过线程池实现，但是也要注意，正是因为它是AOP机制的产物，所以它只能是在Bean中才会生效！</p>\n<p>使用 @Async 注释的方法可以返回 ‘void’ 或 “Future” 类型，Future是一种用于接收任务执行结果的一种类型，我们会在Java并发编程中进行讲解，这里暂时不做介绍。</p>\n<h4 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h4><p>看完了异步任务，我们接着来看定时任务，定时任务其实就是指定在哪个时候再去执行，在JavaSE阶段我们使用过TimerTask来执行定时任务。</p>\n<p>Spring中的定时任务是全局性质的，当我们的Spring程序启动后，那么定时任务也就跟着启动了，我们可以在配置类上添加<code>@EnableScheduling</code>或是在SpringBoot的启动类上添加也可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableAsync\n@EnableScheduling\n@SpringBootApplication\npublic class SpringBootWebTestApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(SpringBootWebTestApplication.class, args);\n    &#125;\n&#125;</code></pre>\n\n<p>接着我们可以创建一个定时任务配置类，在配置类里面编写定时任务：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class ScheduleConfiguration &#123;\n\n    @Scheduled(fixedRate &#x3D; 2000)\n    public void task()&#123;\n        System.out.println(&quot;我是定时任务！&quot;+new Date());\n    &#125;\n&#125;</code></pre>\n\n<p>我们注意到<code> @Scheduled</code>中有很多参数，我们需要指定’cron’, ‘fixedDelay(String)’, or ‘fixedRate(String)’的其中一个，否则无法创建定时任务，他们的区别如下：</p>\n<ul>\n<li>fixedDelay：在上一次定时任务执行完之后，间隔多久继续执行。</li>\n<li>fixedRate：无论上一次定时任务有没有执行完成，两次任务之间的时间间隔。</li>\n<li>cron：使用cron表达式来指定任务计划。</li>\n</ul>\n<p>这里重点讲解一下cron表达式：<a href=\"https://blog.csdn.net/sunnyzyq/article/details/98597252\">https://blog.csdn.net/sunnyzyq/article/details/98597252</a></p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><p>监听器对我们来说也是一个比较陌生的概念，那么何谓监听呢？</p>\n<p>监听实际上就是等待某个事件的触发，当事件触发时，对应事件的监听器就会被通知。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class TestListener implements ApplicationListener&lt;ContextRefreshedEvent&gt; &#123;\n    @Override\n    public void onApplicationEvent(ContextRefreshedEvent event) &#123;\n        System.out.println(event.getApplicationContext());\n    &#125;\n&#125;</code></pre>\n\n<p>通过监听事件，我们就可以在对应的时机进行一些额外的处理，我们可以通过断点调试来查看一个事件是如何发生，以及如何通知监听器的。</p>\n<p>通过阅读源码，我们得知，一个事件实际上就是通过<code>publishEvent</code>方法来进行发布的，我们也可以自定义我们自己项目中的事件，并注册对应的监听器进行处理。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class TestEvent extends ApplicationEvent &#123;   &#x2F;&#x2F;需要继承ApplicationEvent\n    public TestEvent(Object source) &#123;\n        super(source);\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class TestListener implements ApplicationListener&lt;TestEvent&gt; &#123;\n\n    @Override\n    public void onApplicationEvent(TestEvent event) &#123;\n        System.out.println(&quot;自定义事件发生了：&quot;+event.getSource());\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Resource\nApplicationContext context;\n\n@RequestMapping(&quot;&#x2F;login&quot;)\npublic String login(HttpServletRequest request)&#123;\n    context.publishEvent(new TestEvent(&quot;有人访问了登录界面！&quot;));\n    return &quot;login&quot;;\n&#125;</code></pre>\n\n<p>这样，我们就实现了自定义事件发布和监听。</p>\n<h3 id=\"Aware系列接口\"><a href=\"#Aware系列接口\" class=\"headerlink\" title=\"Aware系列接口\"></a>Aware系列接口</h3><p>我们在之前讲解Spring源码时，经常会发现某些类的定义上，除了我们当时讲解的继承关系以外，还实现了一些接口，他们的名称基本都是<code>xxxxAware</code>，比如我们在讲解SpringSecurity的源码中，AbstractAuthenticationProcessingFilter类就是这样：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public abstract class AbstractAuthenticationProcessingFilter extends GenericFilterBean implements ApplicationEventPublisherAware, MessageSourceAware &#123;\n    protected ApplicationEventPublisher eventPublisher;\n    protected AuthenticationDetailsSource&lt;HttpServletRequest, ?&gt; authenticationDetailsSource &#x3D; new WebAuthenticationDetailsSource();\n    private AuthenticationManager authenticationManager;\n    ...</code></pre>\n\n<p>我们发现它除了继承自GenericFilterBean之外，还实现了ApplicationEventPublisherAware和MessageSourceAware接口，那么这些Aware接口到底是干嘛的呢？</p>\n<p>Aware的中文意思为<strong>感知</strong>。简单来说，他就是一个标识，实现此接口的类会获得某些感知能力，Spring容器会在Bean被加载时，根据类实现的感知接口，会调用类中实现的对应感知方法。</p>\n<p>比如AbstractAuthenticationProcessingFilter就实现了ApplicationEventPublisherAware接口，此接口的感知功能为事件发布器，在Bean加载时，会调用实现类中的<code>setApplicationEventPublisher</code>方法，而AbstractAuthenticationProcessingFilter类则利用此方法，在Bean加载阶段获得了容器的事件发布器，以便之后发布事件使用。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void setApplicationEventPublisher(ApplicationEventPublisher eventPublisher) &#123;\n    this.eventPublisher &#x3D; eventPublisher;   &#x2F;&#x2F;直接存到成员变量\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException &#123;\n    SecurityContext context &#x3D; SecurityContextHolder.createEmptyContext();\n    context.setAuthentication(authResult);\n    SecurityContextHolder.setContext(context);\n    if (this.logger.isDebugEnabled()) &#123;\n        this.logger.debug(LogMessage.format(&quot;Set SecurityContextHolder to %s&quot;, authResult));\n    &#125;\n\n    this.rememberMeServices.loginSuccess(request, response, authResult);\n  \t&#x2F;&#x2F;在这里使用\n    if (this.eventPublisher !&#x3D; null) &#123;\n        this.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n    &#125;\n\n    this.successHandler.onAuthenticationSuccess(request, response, authResult);\n&#125;</code></pre>\n\n<p>同样的，除了ApplicationEventPublisherAware接口外，我们再来演示一个接口，比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class TestService implements BeanNameAware &#123;\n    @Override\n    public void setBeanName(String s) &#123;\n        System.out.println(s);\n    &#125;\n&#125;</code></pre>\n\n<p>BeanNameAware就是感知Bean名称的一个接口，当Bean被加载时，会调用<code>setBeanName</code>方法并将Bean名称作为参数传递。</p>\n<p>有关所有的Aware这里就不一一列举了。</p>\n<hr>\n<h2 id=\"探究SpringBoot实现原理\"><a href=\"#探究SpringBoot实现原理\" class=\"headerlink\" title=\"探究SpringBoot实现原理\"></a>探究SpringBoot实现原理</h2><p><strong>注意：</strong>难度较大，本版块作为选学内容，在开始前，必须完成SSM阶段源码解析部分的学习。</p>\n<p>我们在前面的学习中切实感受到了SpringBoot为我们带来的便捷，那么它为何能够实现如此快捷的开发模式，starter又是一个怎样的存在，它是如何进行自动配置的，我们现在就开始研究。</p>\n<h3 id=\"启动原理\"><a href=\"#启动原理\" class=\"headerlink\" title=\"启动原理\"></a>启动原理</h3><p>首先我们来看看，SpringBoot项目启动之后，做了什么事情，SpringApplication中的静态<code>run</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static ConfigurableApplicationContext run(Class&lt;?&gt; primarySource, String... args) &#123;\n    return run(new Class[]&#123;primarySource&#125;, args);\n&#125;</code></pre>\n\n<p>套娃如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static ConfigurableApplicationContext run(Class&lt;?&gt;[] primarySources, String[] args) &#123;\n    return (new SpringApplication(primarySources)).run(args);\n&#125;</code></pre>\n\n<p>我们发现，这里直接new了一个新的SpringApplication对象，传入我们的主类作为构造方法参数，并调用了非static的<code>run</code>方法，我们先来看看构造方法里面做了什么事情：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public SpringApplication(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources) &#123;\n    ...\n    this.resourceLoader &#x3D; resourceLoader;\n    Assert.notNull(primarySources, &quot;PrimarySources must not be null&quot;);\n    this.primarySources &#x3D; new LinkedHashSet(Arrays.asList(primarySources));\n  \t&#x2F;&#x2F;这里是关键，这里会判断当前SpringBoot应用程序是否为Web项目，并返回当前的项目类型\n  \t&#x2F;&#x2F;deduceFromClasspath是根据类路径下判断是否包含SpringBootWeb依赖，如果不包含就是NONE类型，包含就是SERVLET类型\n    this.webApplicationType &#x3D; WebApplicationType.deduceFromClasspath();\n    this.bootstrapRegistryInitializers &#x3D; new ArrayList(this.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));\n  \t&#x2F;&#x2F;创建所有ApplicationContextInitializer实现类的对象\n    this.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));\n    this.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));\n    this.mainApplicationClass &#x3D; this.deduceMainApplicationClass();\n&#125;</code></pre>\n\n<p>关键就在这里了，它是如何知道哪些类是ApplicationContextInitializer的实现类的呢？</p>\n<p>这里就要提到spring.factories了，它是 Spring 仿造Java SPI实现的一种类加载机制。它在 META-INF&#x2F;spring.factories 文件中配置接口的实现类名称，然后在程序中读取这些配置文件并实例化。这种自定义的SPI机制是 Spring Boot Starter 实现的基础。</p>\n<p>SPI的常见例子：</p>\n<ul>\n<li>数据库驱动加载接口实现类的加载：JDBC加载不同类型数据库的驱动</li>\n<li>日志门面接口实现类加载：SLF4J加载不同提供商的日志实现类</li>\n</ul>\n<p>说白了就是人家定义接口，但是实现可能有很多种，但是核心只提供接口，需要我们按需选择对应的实现，这种方式是高度解耦的。</p>\n<p>我们来看看<code>getSpringFactoriesInstances</code>方法做了什么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private &lt;T&gt; Collection&lt;T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes, Object... args) &#123;\n  \t&#x2F;&#x2F;获取当前的类加载器\n    ClassLoader classLoader &#x3D; this.getClassLoader();\n  \t&#x2F;&#x2F;获取所有依赖中 META-INF&#x2F;spring.factories 中配置的对应接口类的实现类列表\n    Set&lt;String&gt; names &#x3D; new LinkedHashSet(SpringFactoriesLoader.loadFactoryNames(type, classLoader));\n  \t&#x2F;&#x2F;根据上方列表，依次创建实例对象  \n  List&lt;T&gt; instances &#x3D; this.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);\n  \t&#x2F;&#x2F;根据对应类上的Order接口或是注解进行排序\n    AnnotationAwareOrderComparator.sort(instances);\n  \t&#x2F;&#x2F;返回实例\n    return instances;\n&#125;</code></pre>\n\n<p>其中<code>SpringFactoriesLoader.loadFactoryNames</code>正是读取配置的核心部分，我们后面还会遇到。</p>\n<p>接着我们来看run方法里面做了什么事情。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public ConfigurableApplicationContext run(String... args) &#123;\n    long startTime &#x3D; System.nanoTime();\n    DefaultBootstrapContext bootstrapContext &#x3D; this.createBootstrapContext();\n    ConfigurableApplicationContext context &#x3D; null;\n    this.configureHeadlessProperty();\n  \t&#x2F;&#x2F;获取所有的SpringApplicationRunListener，并通知启动事件，默认只有一个实现类EventPublishingRunListener\n  \t&#x2F;&#x2F;EventPublishingRunListener会将初始化各个阶段的事件转发给所有监听器\n    SpringApplicationRunListeners listeners &#x3D; this.getRunListeners(args);\n    listeners.starting(bootstrapContext, this.mainApplicationClass);\n\n    try &#123;\n      \t&#x2F;&#x2F;环境配置\n        ApplicationArguments applicationArguments &#x3D; new DefaultApplicationArguments(args);\n        ConfigurableEnvironment environment &#x3D; this.prepareEnvironment(listeners, bootstrapContext, applicationArguments);\n        this.configureIgnoreBeanInfo(environment);\n      \t&#x2F;&#x2F;打印Banner\n        Banner printedBanner &#x3D; this.printBanner(environment);\n      \t&#x2F;&#x2F;创建ApplicationContext，注意这里会根据是否为Web容器使用不同的ApplicationContext实现类\n        context &#x3D; this.createApplicationContext();\n        context.setApplicationStartup(this.applicationStartup);\n      \t&#x2F;&#x2F;初始化ApplicationContext\n        this.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);\n      \t&#x2F;&#x2F;执行ApplicationContext的refresh方法\n        this.refreshContext(context);\n        this.afterRefresh(context, applicationArguments);\n        Duration timeTakenToStartup &#x3D; Duration.ofNanos(System.nanoTime() - startTime);\n        if (this.logStartupInfo) &#123;\n            (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), timeTakenToStartup);\n        &#125;\n        ....\n&#125;</code></pre>\n\n<p>我们发现，实际上SpringBoot就是Spring的一层壳罢了，离不开最关键的ApplicationContext，也就是说，在启动后会自动配置一个ApplicationContext，只不过是进行了大量的扩展。</p>\n<p>我们来看ApplicationContext是怎么来的，打开<code>createApplicationContext</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected ConfigurableApplicationContext createApplicationContext() &#123;\n    return this.applicationContextFactory.create(this.webApplicationType);\n&#125;</code></pre>\n\n<p>我们发现在构造方法中<code>applicationContextFactory</code>直接使用的是DEFAULT：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">this.applicationContextFactory &#x3D; ApplicationContextFactory.DEFAULT;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">ApplicationContextFactory DEFAULT &#x3D; (webApplicationType) -&gt; &#123;\n    try &#123;\n        switch(webApplicationType) &#123;\n        case SERVLET:\n            return new AnnotationConfigServletWebServerApplicationContext();\n        case REACTIVE:\n            return new AnnotationConfigReactiveWebServerApplicationContext();\n        default:\n            return new AnnotationConfigApplicationContext();\n        &#125;\n    &#125; catch (Exception var2) &#123;\n        throw new IllegalStateException(&quot;Unable create a default ApplicationContext instance, you may need a custom ApplicationContextFactory&quot;, var2);\n    &#125;\n&#125;;\n\nConfigurableApplicationContext create(WebApplicationType webApplicationType);</code></pre>\n\n<p>DEFAULT是直接编写的一个匿名内部类，其实已经很明确了，正是根据<code>webApplicationType</code>类型进行判断，如果是SERVLET，那么久返回专用于Web环境的AnnotationConfigServletWebServerApplicationContext对象（SpringBoot中新增的），否则返回普通的AnnotationConfigApplicationContext对象，也就是到这里为止，Spring的容器就基本已经确定了。</p>\n<p>注意AnnotationConfigApplicationContext是Spring框架提供的类，从这里开始相当于我们在讲Spring的底层源码了，我们继续深入，AnnotationConfigApplicationContext对象在创建过程中会创建<code>AnnotatedBeanDefinitionReader</code>，它是用于通过注解解析Bean定义的工具类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public AnnotationConfigApplicationContext() &#123;\n    StartupStep createAnnotatedBeanDefReader &#x3D; this.getApplicationStartup().start(&quot;spring.context.annotated-bean-reader.create&quot;);\n    this.reader &#x3D; new AnnotatedBeanDefinitionReader(this);\n    createAnnotatedBeanDefReader.end();\n    this.scanner &#x3D; new ClassPathBeanDefinitionScanner(this);\n&#125;</code></pre>\n\n<p>其构造方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) &#123;\n    ...\n    &#x2F;&#x2F;这里会注册很多的后置处理器\n    AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(BeanDefinitionRegistry registry, @Nullable Object source) &#123;\n    DefaultListableBeanFactory beanFactory &#x3D; unwrapDefaultListableBeanFactory(registry);\n    ....\n    Set&lt;BeanDefinitionHolder&gt; beanDefs &#x3D; new LinkedHashSet(8);\n    RootBeanDefinition def;\n    if (!registry.containsBeanDefinition(&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;)) &#123;\n      \t&#x2F;&#x2F;注册了ConfigurationClassPostProcessor用于处理@Configuration、@Import等注解\n      \t&#x2F;&#x2F;注意这里是关键，之后Selector还要讲到它\n      \t&#x2F;&#x2F;它是继承自BeanDefinitionRegistryPostProcessor，所以它的执行时间在Bean定义加载完成后，Bean初始化之前\n        def &#x3D; new RootBeanDefinition(ConfigurationClassPostProcessor.class);\n        def.setSource(source);\n        beanDefs.add(registerPostProcessor(registry, def, &quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;));\n    &#125;\n\n    if (!registry.containsBeanDefinition(&quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;)) &#123;\n      \t&#x2F;&#x2F;AutowiredAnnotationBeanPostProcessor用于处理@Value等注解自动注入\n        def &#x3D; new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);\n        def.setSource(source);\n        beanDefs.add(registerPostProcessor(registry, def, &quot;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&quot;));\n    &#125;\n  \n  \t...</code></pre>\n\n<p>回到SpringBoot，我们最后来看，<code>prepareContext</code>方法中又做了什么事情：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void prepareContext(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner) &#123;\n  \t&#x2F;&#x2F;环境配置\n    context.setEnvironment(environment);\n    this.postProcessApplicationContext(context);\n    this.applyInitializers(context);\n    listeners.contextPrepared(context);\n    bootstrapContext.close(context);\n    if (this.logStartupInfo) &#123;\n        this.logStartupInfo(context.getParent() &#x3D;&#x3D; null);\n        this.logStartupProfileInfo(context);\n    &#125;\n\n  \t&#x2F;&#x2F;将Banner注册为Bean\n    ConfigurableListableBeanFactory beanFactory &#x3D; context.getBeanFactory();\n    beanFactory.registerSingleton(&quot;springApplicationArguments&quot;, applicationArguments);\n    if (printedBanner !&#x3D; null) &#123;\n        beanFactory.registerSingleton(&quot;springBootBanner&quot;, printedBanner);\n    &#125;\n\n    if (beanFactory instanceof AbstractAutowireCapableBeanFactory) &#123;\n        ((AbstractAutowireCapableBeanFactory)beanFactory).setAllowCircularReferences(this.allowCircularReferences);\n        if (beanFactory instanceof DefaultListableBeanFactory) &#123;\n            ((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n        &#125;\n    &#125;\n\n    if (this.lazyInitialization) &#123;\n        context.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());\n    &#125;\n\n  \t&#x2F;&#x2F;这里会获取我们一开始传入的项目主类\n    Set&lt;Object&gt; sources &#x3D; this.getAllSources();\n    Assert.notEmpty(sources, &quot;Sources must not be empty&quot;);\n  \t&#x2F;&#x2F;这里会将我们的主类直接注册为Bean，这样就可以通过注解加载了\n    this.load(context, sources.toArray(new Object[0]));\n    listeners.contextLoaded(context);\n&#125;</code></pre>\n\n<p>因此，在<code>prepareContext</code>执行完成之后，我们的主类成功完成Bean注册，接下来，就该类上注解大显身手了。</p>\n<h3 id=\"自动配置原理\"><a href=\"#自动配置原理\" class=\"headerlink\" title=\"自动配置原理\"></a>自动配置原理</h3><p>既然主类已经在初始阶段注册为Bean，那么在加载时，就会根据注解定义，进行更多的额外操作。所以我们来看看主类上的<code>@SpringBootApplication</code>注解做了什么事情。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\n    excludeFilters &#x3D; &#123;@Filter(\n    type &#x3D; FilterType.CUSTOM,\n    classes &#x3D; &#123;TypeExcludeFilter.class&#125;\n), @Filter(\n    type &#x3D; FilterType.CUSTOM,\n    classes &#x3D; &#123;AutoConfigurationExcludeFilter.class&#125;\n)&#125;\n)\npublic @interface SpringBootApplication &#123;</code></pre>\n\n<p>我们发现，<code>@SpringBootApplication</code>上添加了<code>@ComponentScan</code>注解，此注解我们此前已经认识过了，但是这里并没有配置具体扫描的包，因此它会自动将声明此接口的类所在的包作为basePackage，因此当添加<code>@SpringBootApplication</code>之后也就等于直接开启了自动扫描，但是一定注意不能在主类之外的包进行Bean定义，否则无法扫描到，需要手动配置。</p>\n<p>接着我们来看第二个注解<code>@EnableAutoConfiguration</code>，它就是自动配置的核心了，我们来看看它是如何定义的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Target(&#123;ElementType.TYPE&#125;)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import(&#123;AutoConfigurationImportSelector.class&#125;)\npublic @interface EnableAutoConfiguration &#123;</code></pre>\n\n<p>老套路了，直接一手<code>@Import</code>，通过这种方式来将一些外部的Bean加载到容器中。我们来看看AutoConfigurationImportSelector做了什么事情：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;\n\t\t...\n&#125;</code></pre>\n\n<p>我们看到它实现了很多接口，包括大量的Aware接口，实际上就是为了感知某些必要的对象，并将其存到当前类中。</p>\n<p>其中最核心的是<code>DeferredImportSelector</code>接口，它是<code>ImportSelector</code>的子类，它定义了<code>selectImports</code>方法，用于返回需要加载的类名称，在Spring加载ImportSelector类型的Bean时，会调用此方法来获取更多需要加载的类，并将这些类一并注册为Bean：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface ImportSelector &#123;\n    String[] selectImports(AnnotationMetadata importingClassMetadata);\n\n    @Nullable\n    default Predicate&lt;String&gt; getExclusionFilter() &#123;\n        return null;\n    &#125;\n&#125;</code></pre>\n\n<p>到目前为止，我们了解了两种使用<code>@Import</code>有特殊机制的接口：ImportSelector（这里用到的）和ImportBeanDefinitionRegistrar（之前Mybatis-spring源码有讲）当然还有普通的<code>@Configuration</code>配置类。</p>\n<p>我们可以来阅读一下<code>ConfigurationClassPostProcessor</code>的源码，看看它到底是如何处理<code>@Import</code>的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) &#123;\n    List&lt;BeanDefinitionHolder&gt; configCandidates &#x3D; new ArrayList();\n  \t&#x2F;&#x2F;注意这个阶段仅仅是已经完成扫描了所有的Bean，得到了所有的BeanDefinition，但是还没有进行任何区分\n  \t&#x2F;&#x2F;candidate是候选者的意思，一会会将标记了@Configuration的类作为ConfigurationClass加入到configCandidates中\n    String[] candidateNames &#x3D; registry.getBeanDefinitionNames();\n    String[] var4 &#x3D; candidateNames;\n    int var5 &#x3D; candidateNames.length;\n\n    for(int var6 &#x3D; 0; var6 &lt; var5; ++var6) &#123;\n        String beanName &#x3D; var4[var6];\n        BeanDefinition beanDef &#x3D; registry.getBeanDefinition(beanName);\n        if (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) !&#x3D; null) &#123;\n            if (this.logger.isDebugEnabled()) &#123;\n                this.logger.debug(&quot;Bean definition has already been processed as a configuration class: &quot; + beanDef);\n            &#125;\n        &#125; else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) &#123;   &#x2F;&#x2F;判断是否添加了@Configuration注解\n            configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));\n        &#125;\n    &#125;\n\n    if (!configCandidates.isEmpty()) &#123;\n        &#x2F;&#x2F;...省略\n\n      \t&#x2F;&#x2F;这里创建了一个ConfigurationClassParser用于解析配置类\n        ConfigurationClassParser parser &#x3D; new ConfigurationClassParser(this.metadataReaderFactory, this.problemReporter, this.environment, this.resourceLoader, this.componentScanBeanNameGenerator, registry);\n      \t&#x2F;&#x2F;所有配置类的BeanDefinitionHolder列表\n        Set&lt;BeanDefinitionHolder&gt; candidates &#x3D; new LinkedHashSet(configCandidates);\n      \t&#x2F;&#x2F;已经解析完成的类\n        HashSet alreadyParsed &#x3D; new HashSet(configCandidates.size());\n\n        do &#123;\n            &#x2F;&#x2F;这里省略，直到所有的配置类全部解析完成\n          \t&#x2F;&#x2F;注意在循环过程中可能会由于@Import新增更多的待解析配置类，一律丢进candidates集合中\n        &#125; while(!candidates.isEmpty());\n\n        ...\n\n    &#125;\n&#125;</code></pre>\n\n<p>我们接着来看，<code>ConfigurationClassParser</code>是如何进行解析的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void processConfigurationClass(ConfigurationClass configClass, Predicate&lt;String&gt; filter) throws IOException &#123;\n  \t&#x2F;&#x2F;@Conditional相关注解处理\n  \t&#x2F;&#x2F;后面会讲\n    if (!this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;\n        ...\n        &#125;\n\n        ConfigurationClassParser.SourceClass sourceClass &#x3D; this.asSourceClass(configClass, filter);\n\n        do &#123;\n          \t&#x2F;&#x2F;核心\n            sourceClass &#x3D; this.doProcessConfigurationClass(configClass, sourceClass, filter);\n        &#125; while(sourceClass !&#x3D; null);\n\n        this.configurationClasses.put(configClass, configClass);\n    &#125;\n&#125;</code></pre>\n\n<p>最后我们再来看最核心的<code>doProcessConfigurationClass</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)\n    ...\n\n    processImports(configClass, sourceClass, getImports(sourceClass), true);    &#x2F;&#x2F; 处理Import注解\n\n\t\t...\n\n    return null;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void processImports(ConfigurationClass configClass, ConfigurationClassParser.SourceClass currentSourceClass, Collection&lt;ConfigurationClassParser.SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter, boolean checkForCircularImports) &#123;\n    if (!importCandidates.isEmpty()) &#123;\n        if (checkForCircularImports &amp;&amp; this.isChainedImportOnStack(configClass)) &#123;\n            this.problemReporter.error(new ConfigurationClassParser.CircularImportProblem(configClass, this.importStack));\n        &#125; else &#123;\n            this.importStack.push(configClass);\n\n            try &#123;\n                Iterator var6 &#x3D; importCandidates.iterator();\n\n                while(var6.hasNext()) &#123;\n                    ConfigurationClassParser.SourceClass candidate &#x3D; (ConfigurationClassParser.SourceClass)var6.next();\n                    Class candidateClass;\n                  \t&#x2F;&#x2F;如果是ImportSelector类型，继续进行运行\n                    if (candidate.isAssignable(ImportSelector.class)) &#123;\n                        candidateClass &#x3D; candidate.loadClass();\n                        ImportSelector selector &#x3D; (ImportSelector)ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class, this.environment, this.resourceLoader, this.registry);\n                        Predicate&lt;String&gt; selectorFilter &#x3D; selector.getExclusionFilter();\n                        if (selectorFilter !&#x3D; null) &#123;\n                            exclusionFilter &#x3D; exclusionFilter.or(selectorFilter);\n                        &#125;\n\t\t\t\t\t\t\t\t\t&#x2F;&#x2F;如果是DeferredImportSelector的实现类，那么会走deferredImportSelectorHandler的handle方法\n                        if (selector instanceof DeferredImportSelector) &#123;\n                            this.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector)selector);\n                          &#x2F;&#x2F;否则就按照正常的ImportSelector类型进行加载\n                        &#125; else &#123;\n                          \t&#x2F;&#x2F;调用selectImports方法获取所有需要加载的类\n                            String[] importClassNames &#x3D; selector.selectImports(currentSourceClass.getMetadata());\n                            Collection&lt;ConfigurationClassParser.SourceClass&gt; importSourceClasses &#x3D; this.asSourceClasses(importClassNames, exclusionFilter);\n                          \t&#x2F;&#x2F;递归处理，直到没有\n                            this.processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, false);\n                        &#125;\n                      &#x2F;&#x2F;判断是否为ImportBeanDefinitionRegistrar类型\n                    &#125; else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;\n                        candidateClass &#x3D; candidate.loadClass();\n                        ImportBeanDefinitionRegistrar registrar &#x3D; (ImportBeanDefinitionRegistrar)ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class, this.environment, this.resourceLoader, this.registry);\n                      \t&#x2F;&#x2F;往configClass丢ImportBeanDefinitionRegistrar信息进去，之后再处理\n                        configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());\n                      &#x2F;&#x2F;否则按普通的配置类进行处理\n                    &#125; else &#123;\n                        this.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());\n                        this.processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);\n                    &#125;\n                &#125;\n            &#125; catch (BeanDefinitionStoreException var17) &#123;\n                throw var17;\n            &#125; catch (Throwable var18) &#123;\n                throw new BeanDefinitionStoreException(&quot;Failed to process import candidates for configuration class [&quot; + configClass.getMetadata().getClassName() + &quot;]&quot;, var18);\n            &#125; finally &#123;\n                this.importStack.pop();\n            &#125;\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>不难注意到，虽然这里额外处理了<code>ImportSelector</code>对象，但是还针对<code>ImportSelector</code>的子接口<code>DeferredImportSelector</code>进行了额外处理，Deferred是延迟的意思，它是一个延迟执行的<code>ImportSelector</code>，并不会立即进处理，而是丢进DeferredImportSelectorHandler，并且在<code>parse</code>方法的最后进行处理：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) &#123;\n     ...\n\n    this.deferredImportSelectorHandler.process();\n&#125;</code></pre>\n\n<p>我们接着来看<code>DeferredImportSelector</code>正好就有一个<code>process</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public interface DeferredImportSelector extends ImportSelector &#123;\n    @Nullable\n    default Class&lt;? extends DeferredImportSelector.Group&gt; getImportGroup() &#123;\n        return null;\n    &#125;\n\n    public interface Group &#123;\n        void process(AnnotationMetadata metadata, DeferredImportSelector selector);\n\n        Iterable&lt;DeferredImportSelector.Group.Entry&gt; selectImports();\n\n        public static class Entry &#123;\n          ...</code></pre>\n\n<p>最后经过ConfigurationClassParser处理完成后，通过<code>parser.getConfigurationClasses()</code>就能得到通过配置类导入了哪些额外的配置类。最后将这些配置类全部注册BeanDefinition，然后就可以交给接下来的Bean初始化过程去处理了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">this.reader.loadBeanDefinitions(configClasses);</code></pre>\n\n<p>最后我们再去看<code>loadBeanDefinitions</code>是如何运行的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void loadBeanDefinitions(Set&lt;ConfigurationClass&gt; configurationModel) &#123;\n    ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator trackedConditionEvaluator &#x3D; new ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator();\n    Iterator var3 &#x3D; configurationModel.iterator();\n\n    while(var3.hasNext()) &#123;\n        ConfigurationClass configClass &#x3D; (ConfigurationClass)var3.next();\n        this.loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);\n    &#125;\n\n&#125;\n\nprivate void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator trackedConditionEvaluator) &#123;\n    if (trackedConditionEvaluator.shouldSkip(configClass)) &#123;\n        String beanName &#x3D; configClass.getBeanName();\n        if (StringUtils.hasLength(beanName) &amp;&amp; this.registry.containsBeanDefinition(beanName)) &#123;\n            this.registry.removeBeanDefinition(beanName);\n        &#125;\n\n        this.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());\n    &#125; else &#123;\n        if (configClass.isImported()) &#123;\n            this.registerBeanDefinitionForImportedConfigurationClass(configClass);  &#x2F;&#x2F;注册配置类自己\n        &#125;\n\n        Iterator var3 &#x3D; configClass.getBeanMethods().iterator();\n\n        while(var3.hasNext()) &#123;\n            BeanMethod beanMethod &#x3D; (BeanMethod)var3.next();\n            this.loadBeanDefinitionsForBeanMethod(beanMethod); &#x2F;&#x2F;注册@Bean注解标识的方法\n        &#125;\n\n      \t&#x2F;&#x2F;注册&#96;@ImportResource&#96;引入的XML配置文件中读取的bean定义\n        this.loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());\n     \t &#x2F;&#x2F;注册configClass中经过解析后保存的所有ImportBeanDefinitionRegistrar，注册对应的BeanDefinition\n        this.loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());\n    &#125;\n&#125;</code></pre>\n\n<p>这样，整个<code>@Configuration</code>配置类的底层配置流程我们就大致了解了。接着我们来看AutoConfigurationImportSelector是如何实现自动配置的，可以看到内部类AutoConfigurationGroup的process方法，它是父接口的实现，因为父接口是<code>DeferredImportSelector</code>，那么很容易得知，实际上最后会调用<code>process</code>方法获取所有的自动配置类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void process(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector) &#123;\n    Assert.state(deferredImportSelector instanceof AutoConfigurationImportSelector, () -&gt; &#123;\n        return String.format(&quot;Only %s implementations are supported, got %s&quot;, AutoConfigurationImportSelector.class.getSimpleName(), deferredImportSelector.getClass().getName());\n    &#125;);\n  \t&#x2F;&#x2F;获取所有的Entry，其实就是，读取spring.factories来查看有哪些自动配置类\n    AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry &#x3D; ((AutoConfigurationImportSelector)deferredImportSelector).getAutoConfigurationEntry(annotationMetadata);\n    this.autoConfigurationEntries.add(autoConfigurationEntry);\n    Iterator var4 &#x3D; autoConfigurationEntry.getConfigurations().iterator();\n\n    while(var4.hasNext()) &#123;\n        String importClassName &#x3D; (String)var4.next();\n        this.entries.putIfAbsent(importClassName, annotationMetadata);\n    &#125;\n\n&#125;</code></pre>\n\n<p>我们接着来看<code>getAutoConfigurationEntry</code>方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) &#123;\n  \t&#x2F;&#x2F;判断是否开启了自动配置，是的，自动配置可以关\n    if (!this.isEnabled(annotationMetadata)) &#123;\n        return EMPTY_ENTRY;\n    &#125; else &#123;\n      \t&#x2F;&#x2F;根据注解定义获取一些属性\n        AnnotationAttributes attributes &#x3D; this.getAttributes(annotationMetadata);\n      \t&#x2F;&#x2F;得到spring.factories文件中所有需要自动配置的类\n        List&lt;String&gt; configurations &#x3D; this.getCandidateConfigurations(annotationMetadata, attributes);\n        ... 这里先看前半部分\n    &#125;\n&#125;</code></pre>\n\n<p>注意这里并不是spring.factories文件中所有的自动配置类都会被加载，它会根据@Condition注解的条件进行加载。这样就能实现我们需要什么模块添加对应依赖就可以实现自动配置了。</p>\n<p>所有的源码看不懂，都源自于你的心中没有形成一个完整的闭环！一旦一条线推到头，闭环形成，所有疑惑迎刃而解。</p>\n<h3 id=\"自定义Starter\"><a href=\"#自定义Starter\" class=\"headerlink\" title=\"自定义Starter\"></a>自定义Starter</h3><p>我们仿照Mybatis来编写一个自己的starter，Mybatis的starter包含两个部分：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;\n  &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;\n  &lt;parent&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;2.2.0&lt;&#x2F;version&gt;\n  &lt;&#x2F;parent&gt;\n  &lt;!--  starter本身只做依赖集中管理，不编写任何代码  --&gt;\n  &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;\n  &lt;name&gt;mybatis-spring-boot-starter&lt;&#x2F;name&gt;\n  &lt;properties&gt;\n    &lt;module.name&gt;org.mybatis.spring.boot.starter&lt;&#x2F;module.name&gt;\n  &lt;&#x2F;properties&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;!--  编写的专用配置模块   --&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;mybatis-spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n      &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;\n    &lt;&#x2F;dependency&gt;\n  &lt;&#x2F;dependencies&gt;\n&lt;&#x2F;project&gt;</code></pre>\n\n<p>因此我们也将我们自己的starter这样设计：</p>\n<p>我们设计三个模块：</p>\n<ul>\n<li>spring-boot-hello：基础业务功能模块</li>\n<li>spring-boot-starter-hello：启动器</li>\n<li>spring-boot-autoconifgurer-hello：自动配置依赖</li>\n</ul>\n<p>首先是基础业务功能模块，这里我们随便创建一个类就可以了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class HelloWorldService &#123;\n\t\n&#125;</code></pre>\n\n<p>启动器主要做依赖管理，这里就不写任何代码，只写pom文件：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-autoconfigurer-hello&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>导入autoconfigurer模块作为依赖即可，接着我们去编写autoconfigurer模块，首先导入依赖：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-autoconfigure&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.6.2&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;2.6.2&lt;&#x2F;version&gt;\n        &lt;optional&gt;true&lt;&#x2F;optional&gt;\n    &lt;&#x2F;dependency&gt;\n    \n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-boot-hello&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>接着创建一个HelloWorldAutoConfiguration作为自动配置类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration(proxyBeanMethods &#x3D; false)\n@ConditionalOnWebApplication\n@ConditionalOnClass(HelloWorldService.class)\n@EnableConfigurationProperties(HelloWorldProperties.class)\npublic class HelloWorldAutoConfiguration &#123;\n\n    Logger logger &#x3D; Logger.getLogger(this.getClass().getName());\n\n    @Resource\n    HelloWorldProperties properties;\n\n    @Bean\n    public HelloWorldService helloWorldService()&#123;\n        logger.info(&quot;自定义starter项目已启动！&quot;);\n        logger.info(&quot;读取到自定义配置：&quot;+properties.getValue());\n        return new HelloWorldService();\n    &#125;\n&#125;</code></pre>\n\n<p>对应的配置读取类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ConfigurationProperties(&quot;hello.world&quot;)\npublic class HelloWorldProperties &#123;\n\n    private String value;\n\n    public void setValue(String value) &#123;\n        this.value &#x3D; value;\n    &#125;\n\n    public String getValue() &#123;\n        return value;\n    &#125;\n&#125;</code></pre>\n\n<p>最后再编写<code>spring.factories</code>文件，并将我们的自动配置类添加即可：</p>\n<pre class=\"line-numbers language-properties\" data-language=\"properties\"><code class=\"language-properties\">org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;\\\n  com.hello.autoconfigurer.HelloWorldAutoConfiguration</code></pre>\n\n<p>最后再Maven根项目执行<code>install</code>安装到本地仓库，完成。接着就可以在其他项目中使用我们编写的自定义starter了。</p>\n<h3 id=\"Runner接口\"><a href=\"#Runner接口\" class=\"headerlink\" title=\"Runner接口\"></a>Runner接口</h3><p>在项目中，可能会遇到这样一个问题：我们需要在项目启动完成之后，紧接着执行一段代码。</p>\n<p>我们可以编写自定义的ApplicationRunner来解决，它会在项目启动完成后执行：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Component\npublic class TestRunner implements ApplicationRunner &#123;\n    @Override\n    public void run(ApplicationArguments args) throws Exception &#123;\n        System.out.println(&quot;我是自定义执行！&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>当然也可以使用CommandLineRunner，它也支持使用@Order或是实现Ordered接口来支持优先级执行。</p>\n<p>实际上它就是run方法的最后：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public ConfigurableApplicationContext run(String... args) &#123;\n    ....\n\n        listeners.started(context, timeTakenToStartup);\n  \t\t\t&#x2F;&#x2F;这里已经完成整个SpringBoot项目启动，所以执行所有的Runner\n        this.callRunners(context, applicationArguments);\n    &#125; catch (Throwable var12) &#123;\n        this.handleRunFailure(context, var12, listeners);\n        throw new IllegalStateException(var12);\n    &#125;\n\n    try &#123;\n        Duration timeTakenToReady &#x3D; Duration.ofNanos(System.nanoTime() - startTime);\n        listeners.ready(context, timeTakenToReady);\n        return context;\n    &#125; catch (Throwable var11) &#123;\n        this.handleRunFailure(context, var11, (SpringApplicationRunListeners)null);\n        throw new IllegalStateException(var11);\n    &#125;\n&#125;</code></pre>\n\n<p>下一章，我们将继续讲解几乎程序员必会的Git版本控制。</p>\n","text":" SpringBoot一站式开发官网：https://spring.io/projects/spring-boot Spring Boot可以轻松创建独立的、基于Spring的生产级应用程序，它可以让你“运行即可”。大多数Spring Boot应用程序只需要少量的Spring配置...","link":"","photos":[],"count_time":{"symbolsCount":"63k","symbolsTime":"58 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot%E4%B8%80%E7%AB%99%E5%BC%8F%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">SpringBoot一站式开发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%B0%E8%BF%9BSpringBoot\"><span class=\"toc-text\">走进SpringBoot</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringBoot%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">SpringBoot项目文件结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88Web%E7%9B%B8%E5%85%B3%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">整合Web相关框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%83%E6%98%AF%E7%9C%9F%E7%9A%84%E5%BF%AB\"><span class=\"toc-text\">它是真的快</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9Web%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">修改Web相关配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88SpringSecurity%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">整合SpringSecurity依赖</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88Mybatis%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">整合Mybatis框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%90%88Thymeleaf%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">整合Thymeleaf框架</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">日志系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E5%92%8C%E6%97%A5%E5%BF%97%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">日志门面和日志实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8SpringBoot%E4%B8%AD%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">在SpringBoot中打印日志信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AELogback%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">配置Logback日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Banner\"><span class=\"toc-text\">自定义Banner</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">多环境配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E8%BF%90%E8%A1%8C\"><span class=\"toc-text\">打包运行</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%8D%E8%B0%88Spring%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">再谈Spring框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6\"><span class=\"toc-text\">任务调度</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">异步任务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\"><span class=\"toc-text\">定时任务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E5%99%A8\"><span class=\"toc-text\">监听器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Aware%E7%B3%BB%E5%88%97%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Aware系列接口</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A2%E7%A9%B6SpringBoot%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">探究SpringBoot实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">启动原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">自动配置原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Starter\"><span class=\"toc-text\">自定义Starter</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Runner%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Runner接口</span></a></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBoot笔记（二）","uid":"8a03b6cf044356a33316079da4b482e4","slug":"SpringBoot笔记（二）","date":"2022-03-05T14:38:53.811Z","updated":"2022-03-05T14:39:43.063Z","comments":true,"path":"api/articles/SpringBoot笔记（二）.json","keywords":null,"cover":[],"text":"Git版本控制注意：开始学习之前，确保自己的网络可以畅通的连接Github：https://github.com，这个是一个国外网站，连起来特别卡，至于用什么方式实现流畅访问，懂的都懂。 其实版本控制在我们的生活中无处不在，比如你的期末或是毕业答辩论文，由于你写得不规范或是老师不...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"那些经典话语","uid":"9cce5bf1444b7fcba89f1d78107c0341","slug":"那些经典话语","date":"2022-03-04T13:38:15.000Z","updated":"2022-03-04T15:40:07.499Z","comments":true,"path":"api/articles/那些经典话语.json","keywords":null,"cover":null,"text":" 想看就点开看看吧 英：I’m tired,Tired of bein’ on the road, lonely as a sparrow in the rain，Tired of not ever having me a buddy to be with, or tell me...","link":"","photos":[],"count_time":{"symbolsCount":623,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"那些经典话语","slug":"那些经典话语","count":1,"path":"api/tags/那些经典话语.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}