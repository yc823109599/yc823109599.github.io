{"title":"SpringBoot笔记（二）","uid":"8a03b6cf044356a33316079da4b482e4","slug":"SpringBoot笔记（二）","date":"2022-03-05T14:38:53.811Z","updated":"2022-03-05T14:39:43.063Z","comments":true,"path":"api/articles/SpringBoot笔记（二）.json","keywords":null,"cover":[],"content":"<h1 id=\"Git版本控制\"><a href=\"#Git版本控制\" class=\"headerlink\" title=\"Git版本控制\"></a>Git版本控制</h1><p><strong>注意：</strong>开始学习之前，确保自己的网络可以畅通的连接Github：<a href=\"https://github.com,这个是一个国外网站,连起来特别卡,至于用什么方式实现流畅访问,懂的都懂./\">https://github.com，这个是一个国外网站，连起来特别卡，至于用什么方式实现流畅访问，懂的都懂。</a></p>\n<p>其实版本控制在我们的生活中无处不在，比如你的期末或是毕业答辩论文，由于你写得不规范或是老师不满意，你的老师可能会让你改了又改，于是就会出现下面这种情况：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20200417%2F1e63ac0f4d8442cb8c9ab1cb73f510c4.jpeg&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644370473&t=fa8742db0b4f8db635ec003e37bca76c\" alt=\"点击查看源网页\"></p>\n<p>我们手里的论文可能会经过多次版本迭代，最终我们会选取一个最好的版本作为最终提交的论文。使用版本控制不仅仅是为了去记录版本迭代历史，更是为了能够随时回退到之前的版本，实现时间回溯。同时，可能我们的论文是多个人一同完成，那么多个人如何去实现同步，如何保证每个人提交的更改都能够正常汇总，如何解决冲突，这些问题都需要一个优秀的版本控制系统来解决。</p>\n<h2 id=\"走进Git\"><a href=\"#走进Git\" class=\"headerlink\" title=\"走进Git\"></a>走进Git</h2><p>我们开发的项目，也需要一个合适的版本控制系统来协助我们更好地管理版本迭代，而Git正是因此而诞生的（有关Git的历史，这里就不多做阐述了，感兴趣的小伙伴可以自行了解，是一位顶级大佬在一怒之下只花了2周时间用C语言开发的，之后的章节还会遇到他）</p>\n<p>首先我们来了解一下Git是如何工作的：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F932856%2F202004%2F932856-20200423143251346-796113044.jpg&refer=http%3A%2F%2Fimg2020.cnblogs.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644374894&t=7c2044128f7851ecd92de3c01f0187ca\" alt=\"点击查看源网页\"></p>\n<p>可以看到，它大致分为4个板块：</p>\n<ul>\n<li>工作目录：存放我们正在写的代码（当我们新版本开发完成之后，就可以进行新版本的提交）</li>\n<li>暂存区：暂时保存待提交的内容（新版本提交后会存放到本地仓库）</li>\n<li>本地仓库：位于我们电脑上的一个版本控制仓库（存放的就是当前项目各个版本代码的增删信息）</li>\n<li>远程仓库：位于服务器上的版本控制仓库（服务器上的版本信息可以由本地仓库推送上去，也可以从服务器抓取到本地仓库）</li>\n</ul>\n<p>它是一个分布式的控制系统，因此一般情况下我们每个人的电脑上都有一个本地仓库，由大家共同向远程仓库去推送版本迭代信息。</p>\n<p>通过这一系列操作，我们就可以实现每开发完一个版本或是一个功能，就提交一次新版本，这样，我们就可以很好地控制项目的版本迭代，想回退到之前的版本随时都可以回退，想查看新版本添加或是删除了什么代码，随时都可以查看。</p>\n<h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>首先请前往Git官网去下载最新的安装包：<a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></p>\n<p>这手把手演示一下如何安装Git环境。</p>\n<p>安装完成后，需要设定用户名和邮箱来区分不同的用户：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git config --global user.name &quot;Your Name&quot;\ngit config --global user.email &quot;email@example.com&quot;</code></pre>\n\n<h2 id=\"基本命令介绍\"><a href=\"#基本命令介绍\" class=\"headerlink\" title=\"基本命令介绍\"></a>基本命令介绍</h2><h3 id=\"创建本地仓库\"><a href=\"#创建本地仓库\" class=\"headerlink\" title=\"创建本地仓库\"></a>创建本地仓库</h3><p>我们可以将任意一个文件夹作为一个本地仓库，输入：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git init</code></pre>\n\n<p>输入后，会自动生成一个<code>.git</code>目录，注意这个目录是一个隐藏目录，而当前目录就是我们的工作目录。</p>\n<p>创建成功后，我们可以查看一下当前的一个状态，输入：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git status</code></pre>\n\n<p>如果已经成功配置为Git本地仓库，那么输入后可以看到：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">On branch master\n\nNo commits yet</code></pre>\n\n<p>这表示我们还没有向仓库中提交任何内容，也就是一个空的状态。</p>\n<h3 id=\"添加和提交\"><a href=\"#添加和提交\" class=\"headerlink\" title=\"添加和提交\"></a>添加和提交</h3><p>接着我们来看看，如何使用git来管理我们文档的版本，我们创建一个文本文档，随便写入一点内容，接着输入：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git status</code></pre>\n\n<p>我们会得到如下提示：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">Untracked files:\n  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n\thello.txt\n\nnothing added to commit but untracked files present (use &quot;git add&quot; to track)</code></pre>\n\n<p>其中Untracked files是未追踪文件的意思，也就是说，如果一个文件处于未追踪状态，那么git不会记录它的变化，始终将其当做一个新创建的文件，这里我们将其添加到暂存区，那么它会自动变为被追踪状态：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">git add hello.txt #也可以 add . 一次性添加目录下所有的</code></pre>\n\n<p>再次查看当前状态：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">Changes to be committed:\n  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)\n\tnew file:   hello.txt</code></pre>\n\n<p>现在文件名称的颜色变成了绿色，并且是处于Changes to be committed下面，因此，我们的hello.txt现在已经被添加到暂存区了。</p>\n<p>接着我们来尝试将其提交到Git本地仓库中，注意需要输入提交的描述以便后续查看，比如你这次提交修改了或是新增了哪些内容：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git commit -m &#39;Hello World&#39;</code></pre>\n\n<p>接着我们可以查看我们的提交记录：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git log\ngit log --graph</code></pre>\n\n<p>我们还可以查看最近一次变更的详细内容：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git show [也可以加上commit ID查看指定的提交记录]</code></pre>\n\n<p>再次查看当前状态，已经是清空状态了：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">On branch master\nnothing to commit, working tree clean</code></pre>\n\n<p>接着我们可以尝试修改一下我们的文本文档，由于当前文件已经是被追踪状态，那么git会去跟踪它的变化，如果说文件发生了修改，那么我们再次查看状态会得到下面的结果：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">Changes not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)\n\tmodified:   hello.txt</code></pre>\n\n<p>也就是说现在此文件是处于已修改状态，我们如果修改好了，就可以提交我们的新版本到本地仓库中：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git add .\ngit commit -m &#39;Modify Text&#39;</code></pre>\n\n<p>接着我们来查询一下提交记录，可以看到一共有两次提交记录。</p>\n<p>我们可以创建一个<code>.gitignore</code>文件来确定一个文件忽略列表，如果忽略列表中的文件存在且不是被追踪状态，那么git不会对其进行任何检查：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># 这样就会匹配所有以txt结尾的文件\n*.txt\n# 虽然上面排除了所有txt结尾的文件，但是这个不排除\n!666.txt\n# 也可以直接指定一个文件夹，文件夹下的所有文件将全部忽略\ntest&#x2F;\n# 目录中所有以txt结尾的文件，但不包括子目录\nxxx&#x2F;*.txt\n# 目录中所有以txt结尾的文件，包括子目录\nxxx&#x2F;**&#x2F;*.txt</code></pre>\n\n<p>创建后，我们来看看是否还会检测到我们忽略的文件。</p>\n<h3 id=\"回滚\"><a href=\"#回滚\" class=\"headerlink\" title=\"回滚\"></a>回滚</h3><p>当我们想要回退到过去的版本时，就可以执行回滚操作，执行后，可以将工作空间的内容恢复到指定提交的状态：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git reset --hard commitID</code></pre>\n\n<p>执行后，会直接重置为那个时候的状态。再次查看提交日志，我们发现之后的日志全部消失了。</p>\n<p>那么要是现在我又想回去呢？我们可以通过查看所有分支的所有操作记录：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git reflog</code></pre>\n\n<p>这样就能找到之前的commitID，再次重置即可。</p>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>分支就像我们树上的一个树枝一样，它们可能一开始的时候是同一根树枝，但是长着长着就开始分道扬镳了，这就是分支。我们的代码也是这样，可能一开始写基础功能的时候使用的是单个分支，但是某一天我们希望基于这些基础的功能，把我们的项目做成两个不同方向的项目，比如一个方向做Web网站，另一个方向做游戏服务端。</p>\n<p>因此，我们可以在一个主干上分出N个分支，分别对多个分支的代码进行维护。</p>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p>我们可以通过以下命令来查看当前仓库中存在的分支：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git branch</code></pre>\n\n<p>我们发现，默认情况下是有一个master分支的，并且我们使用的也是master分支，一般情况下master分支都是正式版本的更新，而其他分支一般是开发中才频繁更新的。我们接着来基于当前分支创建一个新的分支：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git branch test\n# 对应的删除分支是\ngit branch -d yyds</code></pre>\n\n<p>现在我们修改一下文件，提交，再查看一下提交日志：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git commit -a -m &#39;branch master commit&#39;</code></pre>\n\n<p>通过添加-a来自动将未放入暂存区的已修改文件放入暂存区并执行提交操作。查看日志，我们发现现在我们的提交只生效于master分支，而新创建的分支并没有发生修改。</p>\n<p>我们将分支切换到另一个分支：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git checkout test</code></pre>\n\n<p>我们会发现，文件变成了此分支创建的时的状态，也就是说，在不同分支下我们的文件内容是相互隔离的。</p>\n<p>我们现在再来提交一次变更，会发现它只生效在yyds分支上。我们可以看看当前的分支状态：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git log --all --graph</code></pre>\n\n<h3 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h3><p>我们也可以将两个分支更新的内容最终合并到同一个分支上，我们先切换回主分支：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git checkout master</code></pre>\n\n<p>接着使用分支合并命令：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git merge test</code></pre>\n\n<p>会得到如下提示：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Auto-merging hello.txt\nCONFLICT (content): Merge conflict in hello.txt\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre>\n\n<p>在合并过程中产生了冲突，因为两个分支都对hello.txt文件进行了修改，那么现在要合并在一起，到底保留谁的hello文件呢？</p>\n<p>我们可以查看一下是哪里发生了冲突：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git diff</code></pre>\n\n<p>因此，现在我们将master分支的版本回退到修改hello.txt之前或是直接修改为最新版本的内容，这样就不会有冲突了，接着再执行一次合并操作，现在两个分支成功合并为同一个分支。</p>\n<h3 id=\"变基分支\"><a href=\"#变基分支\" class=\"headerlink\" title=\"变基分支\"></a>变基分支</h3><p>除了直接合并分支以外，我们还可以进行变基操作，它跟合并不同，合并是分支回到主干的过程，而变基是直接修改分支开始的位置，比如我们希望将yyds变基到master上，那么yyds会将分支起点移动到master最后一次提交位置：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git rebase master</code></pre>\n\n<p>变基后，yyds分支相当于同步了此前master分支的全部提交。</p>\n<h3 id=\"优选\"><a href=\"#优选\" class=\"headerlink\" title=\"优选\"></a>优选</h3><p>我们还可以选择其将他分支上的提交作用于当前分支上，这种操作称为cherrypick：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git cherry-pick &lt;commit id&gt;:单独合并一个提交</code></pre>\n\n<p>这里我们在master分支上创建一个新的文件，提交此次更新，接着通过cherry-pick的方式将此次更新作用于test分支上。</p>\n<hr>\n<h2 id=\"使用IDEA版本控制\"><a href=\"#使用IDEA版本控制\" class=\"headerlink\" title=\"使用IDEA版本控制\"></a>使用IDEA版本控制</h2><p>虽然前面我们基本讲解了git的命令行使用方法，但是没有一个图形化界面，始终会感觉到很抽象，所以这里我们使用IDEA来演示，IDEA内部集成了git模块，它可以让我们的git版本管理图形化显示，当然除了IDEA也有一些独立的软件比如：SourceTree（挺好用）</p>\n<p>打开IDEA后，找到版本控模块，我们直接点击创建本地仓库，它会自动将当前项目的根目录作为我们的本地仓库，而我们编写的所有代码和项目目录下其他的文件都可以进行版本控制。</p>\n<p>我们发现所有项目中正在编写的类文件全部变红了，也就是处于未追踪状态，接着我们进行第一次初始化提交，提交之后我们可以在下方看到所有的本地仓库提交记录。</p>\n<p>接着我们来整合一下Web环境，创建新的类之后，IDEA会提示我们是否将文件添加到Git，也就是是否放入暂存区并开启追踪，我们可以直接对比两次代码的相同和不同之处。</p>\n<p>接着我们来演示一下分支创建和分支管理。</p>\n<hr>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>远程仓库实际上就是位于服务器上的仓库，它能在远端保存我们的版本历史，并且可以实现多人同时合作编写项目，每个人都能够同步他人的版本，能够看到他人的版本提交，相当于将我们的代码放在服务器上进行托管。</p>\n<p>远程仓库有公有和私有的，公有的远程仓库有GitHub、码云、Coding等，他们都是对外开放的，我们注册账号之后就可以使用远程仓库进行版本控制，其中最大的就是GitHub，但是它服务器在国外，我们国内连接可能会有一点卡。私有的一般是GitLab这种自主搭建的远程仓库私服，在公司中比较常用，它只对公司内部开放，不对外开放。</p>\n<p>这里我们以GitHub做讲解，官网：<a href=\"https://github.com,首先完成用户注册./\">https://github.com，首先完成用户注册。</a></p>\n<h3 id=\"远程账户认证和推送\"><a href=\"#远程账户认证和推送\" class=\"headerlink\" title=\"远程账户认证和推送\"></a>远程账户认证和推送</h3><p>接着我们就可以创建一个自定义的远程仓库了。</p>\n<p>创建仓库后，我们可以通过推送来将本地仓库中的内容推送到远程仓库。</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git remote add 名称 远程仓库地址\ngit push 远程仓库名称 本地分支名称[:远端分支名称]</code></pre>\n\n<p>注意<code>push</code>后面两个参数，一个是远端名称，还有一个就是本地分支名称，但是如果本地分支名称和远端分支名称一致，那么不用指定远端分支名称，但是如果我们希望推送的分支在远端没有同名的，那么需要额外指定。推送前需要登陆账户，GitHub现在不允许使用用户名密码验证，只允许使用个人AccessToken来验证身份，所以我们需要先去生成一个Token才可以。</p>\n<p>推送后，我们发现远程仓库中的内容已经与我们本地仓库中的内容保持一致了，注意，远程仓库也可以有很多个分支。</p>\n<p>但是这样比较麻烦，我们每次都需要去输入用户名和密码，有没有一劳永逸的方法呢？当然，我们也可以使用SSH来实现一次性校验，我们可以在本地生成一个rsa公钥：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">ssh-keygen -t rsa\ncat ~&#x2F;.ssh&#x2F;github.pub</code></pre>\n\n<p>接着我们需要在GitHub上上传我们的公钥，当我们再次去访问GitHub时，会自动验证，就无需进行登录了，之后在Linux部分我们会详细讲解SSH的原理。</p>\n<p>接着我们修改一下工作区的内容，提交到本地仓库后，再推送到远程仓库，提交的过程中我们注意观察提交记录：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git commit -a -m &#39;Modify files&#39;\ngit log --all --oneline --graph\ngit push origin master \ngit log --all --oneline --graph</code></pre>\n\n<p>我们可以将远端和本地的分支进行绑定，绑定后就不需要指定分支名称了：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git push --set-upstream origin master:master\ngit push origin</code></pre>\n\n<p>在一个本地仓库对应一个远程仓库的情况下，远程仓库基本上就是纯粹的代码托管了（云盘那种感觉，就纯粹是存你代码的）</p>\n<h3 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h3><p>如果我们已经存在一个远程仓库的情况下，我们需要在远程仓库的代码上继续编写代码，这个时候怎么办呢？</p>\n<p>我们可以使用克隆操作来将远端仓库的内容全部复制到本地：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git clone 远程仓库地址</code></pre>\n\n<p>这样本地就能够直接与远程保持同步。</p>\n<h3 id=\"抓取、拉取和冲突解决\"><a href=\"#抓取、拉取和冲突解决\" class=\"headerlink\" title=\"抓取、拉取和冲突解决\"></a>抓取、拉取和冲突解决</h3><p>我们接着来看，如果这个时候，出现多个本地仓库对应一个远程仓库的情况下，比如一个团队里面，N个人都在使用同一个远程仓库，但是他们各自只负责编写和推送自己业务部分的代码，也就是我们常说的协同工作，那么这个时候，我们就需要协调。</p>\n<p>比如程序员A完成了他的模块，那么他就可以提交代码并推送到远程仓库，这时程序员B也要开始写代码了，由于远程仓库有其他程序员的提交记录，因此程序员B的本地仓库和远程仓库不一致，这时就需要有先进行pull操作，获取远程仓库中最新的提交：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git fetch 远程仓库 #抓取：只获取但不合并远端分支，后面需要我们手动合并才能提交\ngit pull 远程仓库 #拉取：获取+合并</code></pre>\n\n<p>在程序员B拉取了最新的版本后，再编写自己的代码然后提交就可以实现多人合作编写项目了，并且在拉取过程中就能将别人提交的内容同步到本地，开发效率大大提升。</p>\n<p>如果工作中存在不协调的地方，比如现在我们本地有两个仓库，一个仓库去修改hello.txt并直接提交，另一个仓库也修改hello.txt并直接提交，会得到如下错误：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">To https:&#x2F;&#x2F;github.com&#x2F;xx&#x2F;xxx.git\n ! [rejected]        master -&gt; master (fetch first)\nerror: failed to push some refs to &#39;https:&#x2F;&#x2F;github.com&#x2F;xx&#x2F;xxx.git&#39;\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., &#39;git pull ...&#39;) before pushing again.\nhint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre>\n\n<p>一旦一个本地仓库推送了代码，那么另一个本地仓库的推送会被拒绝，原因是当前文件已经被其他的推送给修改了，我们这边相当于是另一个版本，和之前两个分支合并一样，产生了冲突，因此我们只能去解决冲突问题。</p>\n<p>如果远程仓库中的提交和本地仓库中的提交没有去编写同一个文件，那么就可以直接拉取：</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">git pull 远程仓库</code></pre>\n\n<p>拉取后会自动进行合并，合并完成之后我们再提交即可。</p>\n<p>但是如果两次提交都修改了同一个文件，那么就会遇到和多分支合并一样的情况，在合并时会产生冲突，这时就需要我们自己去解决冲突了。</p>\n<p>我们可以在IDEA中演示一下，实际开发场景下可能会遇到的问题。</p>\n<hr>\n<p>至此，Git版本控制就讲解到这里，下一章我们会继续认识一个全新的数据库：Redis。</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-054d8ff6135b3638aca543eff7424f98_1200x500.jpg&refer=http%3A%2F%2Fpic4.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1644402012&t=79c30b8002d088850e33bd90492419b2\" alt=\"点击查看源网页\"></p>\n","text":"Git版本控制注意：开始学习之前，确保自己的网络可以畅通的连接Github：https://github.com，这个是一个国外网站，连起来特别卡，至于用什么方式实现流畅访问，懂的都懂。 其实版本控制在我们的生活中无处不在，比如你的期末或是毕业答辩论文，由于你写得不规范或是老师不...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">Git版本控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%B0%E8%BF%9BGit\"><span class=\"toc-text\">走进Git</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85Git\"><span class=\"toc-text\">安装Git</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">基本命令介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">创建本地仓库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0%E5%92%8C%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">添加和提交</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A\"><span class=\"toc-text\">回滚</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF\"><span class=\"toc-text\">分支</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF\"><span class=\"toc-text\">创建分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF\"><span class=\"toc-text\">合并分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E5%9F%BA%E5%88%86%E6%94%AF\"><span class=\"toc-text\">变基分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%98%E9%80%89\"><span class=\"toc-text\">优选</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8IDEA%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">使用IDEA版本控制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93\"><span class=\"toc-text\">远程仓库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9C%E7%A8%8B%E8%B4%A6%E6%88%B7%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%A8%E9%80%81\"><span class=\"toc-text\">远程账户认证和推送</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%8B%E9%9A%86%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">克隆项目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%93%E5%8F%96%E3%80%81%E6%8B%89%E5%8F%96%E5%92%8C%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">抓取、拉取和冲突解决</span></a></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBoot笔记（三）","uid":"25a60a06ed42cd757ab0410c2846114a","slug":"SpringBoot笔记（三）","date":"2022-03-05T14:38:57.839Z","updated":"2022-03-05T14:39:50.184Z","comments":true,"path":"api/articles/SpringBoot笔记（三）.json","keywords":null,"cover":[],"text":" Redis数据库灵魂拷问：不是学了MySQL吗，存数据也能存了啊，又学一个数据库干嘛？ 在前面我们学习了MySQL数据库，它是一种传统的关系型数据库，我们可以使用MySQL来更好地管理和组织我们的数据，虽然在小型Web应用下，只需要一个MySQL+Mybatis自带的缓存系统就...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"20 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot笔记（一）","uid":"0437f348450cd4420692493db6677cff","slug":"SpringBoot笔记（一）","date":"2022-03-05T14:36:00.311Z","updated":"2022-03-05T14:38:01.270Z","comments":true,"path":"api/articles/SpringBoot笔记（一）.json","keywords":null,"cover":[],"text":" SpringBoot一站式开发官网：https://spring.io/projects/spring-boot Spring Boot可以轻松创建独立的、基于Spring的生产级应用程序，它可以让你“运行即可”。大多数Spring Boot应用程序只需要少量的Spring配置...","link":"","photos":[],"count_time":{"symbolsCount":"63k","symbolsTime":"58 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}