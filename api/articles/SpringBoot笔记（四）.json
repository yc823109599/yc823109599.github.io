{"title":"SpringBoot笔记（四）","uid":"1c189d12d9b261f21a36bc9b6f4c2deb","slug":"SpringBoot笔记（四）","date":"2022-03-05T14:39:01.865Z","updated":"2022-03-05T14:40:01.692Z","comments":true,"path":"api/articles/SpringBoot笔记（四）.json","keywords":null,"cover":[],"content":"<h1 id=\"SpringBoot其他框架\"><a href=\"#SpringBoot其他框架\" class=\"headerlink\" title=\"SpringBoot其他框架\"></a>SpringBoot其他框架</h1><p>通过了解其他的SpringBoot框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能。</p>\n<h2 id=\"邮件发送：Mail\"><a href=\"#邮件发送：Mail\" class=\"headerlink\" title=\"邮件发送：Mail\"></a>邮件发送：Mail</h2><p>我们在注册很多的网站时，都会遇到邮件或是手机号验证，也就是通过你的邮箱或是手机短信去接受网站发给你的注册验证信息，填写验证码之后，就可以完成注册了，同时，网站也会绑定你的手机号或是邮箱。</p>\n<p>那么，像这样的功能，我们如何实现呢？SpringBoot已经给我们提供了封装好的邮件模块使用：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<h3 id=\"邮件发送\"><a href=\"#邮件发送\" class=\"headerlink\" title=\"邮件发送\"></a>邮件发送</h3><p>在学习邮件发送之前，我们需要先了解一下什么是电子邮件。</p>\n<p>电子邮件也是一种通信方式，是互联网应用最广的服务。通过网络的电子邮件系统，用户可以以非常低廉的价格（不管发送到哪里，都只需负担网费，实际上就是把信息发送到对方服务器而已）、非常快速的方式，与世界上任何一个地方的电子邮箱用户联系。</p>\n<p>虽说方便倒是方便，虽然是曾经的霸主，不过现在这个时代，QQ微信横行，手机短信和电子邮箱貌似就只剩收验证码这一个功能了。</p>\n<p>要在Internet上提供电子邮件功能，必须有专门的电子邮件服务器。例如现在Internet很多提供邮件服务的厂商：新浪、搜狐、163、QQ邮箱等，他们都有自己的邮件服务器。这些服务器类似于现实生活中的邮局，它主要负责接收用户投递过来的邮件，并把邮件投递到邮件接收者的电子邮箱中。</p>\n<p>所有的用户都可以在电子邮件服务器上申请一个账号用于邮件发送和接收，那么邮件是以什么样的格式发送的呢？实际上和Http一样，邮件发送也有自己的协议，也就是约定邮件数据长啥样以及如何通信。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/851491/201612/851491-20161202143243756-1715308358.png\" alt=\"img\"></p>\n<p>比较常用的协议有两种：</p>\n<ol>\n<li>SMTP协议（主要用于发送邮件 Simple Mail Transfer Protocol）</li>\n<li>POP3协议（主要用于接收邮件 Post Office Protocol 3）</li>\n</ol>\n<p>整个发送&#x2F;接收流程大致如下：</p>\n<p><img src=\"https://img2.baidu.com/it/u=3675146129,445744702&fm=253&fmt=auto&app=138&f=JPG?w=812&h=309\" alt=\"img\"></p>\n<p>实际上每个邮箱服务器都有一个smtp发送服务器和pop3接收服务器，比如要从QQ邮箱发送邮件到163邮箱，那么我们只需要通过QQ邮箱客户端告知QQ邮箱的smtp服务器我们需要发送邮件，以及邮件的相关信息，然后QQ邮箱的smtp服务器就会帮助我们发送到163邮箱的pop3服务器上，163邮箱会通过163邮箱客户端告知对应用户收到一封新邮件。</p>\n<p>而我们如果想要实现给别人发送邮件，那么就需要连接到对应电子邮箱的smtp服务器上，并告知其我们要发送邮件。而SpringBoot已经帮助我们将最基本的底层通信全部实现了，我们只需要关心smtp服务器的地址以及我们要发送的邮件长啥样即可。</p>\n<p>这里以163邮箱 <a href=\"https://mail.163.com/\">https://mail.163.com</a> 为例，我们需要在配置文件中告诉SpringBootMail我们的smtp服务器的地址以及你的邮箱账号和密码，首先我们要去设置中开启smtp&#x2F;pop3服务才可以，开启后会得到一个随机生成的密钥，这个就是我们的密码。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  mail:\n  \t# 163邮箱的地址为smtp.163.com，直接填写即可\n    host: smtp.163.com\n    # 你申请的163邮箱\n    username: javastudy111@163.com\n    # 注意密码是在开启smtp&#x2F;pop3时自动生成的，记得保存一下，不然就找不到了\n    password: AZJTOAWZESLMHTNI</code></pre>\n\n<p>配置完成后，接着我们来进行一下测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootTest\nclass SpringBootTestApplicationTests &#123;\n\n  \t&#x2F;&#x2F;JavaMailSender是专门用于发送邮件的对象，自动配置类已经提供了Bean\n    @Autowired\n    JavaMailSender sender;\n\n    @Test\n    void contextLoads() &#123;\n      \t&#x2F;&#x2F;SimpleMailMessage是一个比较简易的邮件封装，支持设置一些比较简单内容\n        SimpleMailMessage message &#x3D; new SimpleMailMessage();\n      \t&#x2F;&#x2F;设置邮件标题\n        message.setSubject(&quot;【电子科技大学教务处】关于近期学校对您的处分决定&quot;);\n      \t&#x2F;&#x2F;设置邮件内容\n        message.setText(&quot;XXX同学您好，经监控和教务巡查发现，您近期存在旷课、迟到、早退、上课刷抖音行为，&quot; +\n                &quot;现已通知相关辅导员，请手写5000字书面检讨，并在2022年4月1日17点前交到辅导员办公室。&quot;);\n      \t&#x2F;&#x2F;设置邮件发送给谁，可以多个，这里就发给你的QQ邮箱\n        message.setTo(&quot;你的QQ号@qq.com&quot;);\n      \t&#x2F;&#x2F;邮件发送者，这里要与配置文件中的保持一致\n        message.setFrom(&quot;javastudy111@163.com&quot;);\n      \t&#x2F;&#x2F;OK，万事俱备只欠发送\n        sender.send(message);\n    &#125;\n\n&#125;</code></pre>\n\n<p>如果需要添加附件等更多功能，可以使用MimeMessageHelper来帮助我们完成：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid contextLoads() throws MessagingException &#123;\n  \t&#x2F;&#x2F;创建一个MimeMessage\n    MimeMessage message &#x3D; sender.createMimeMessage();\n  \t&#x2F;&#x2F;使用MimeMessageHelper来帮我们修改MimeMessage中的信息\n    MimeMessageHelper helper &#x3D; new MimeMessageHelper(message, true);\n    helper.setSubject(&quot;Test&quot;);\n    helper.setText(&quot;lbwnb&quot;);\n    helper.setTo(&quot;你的QQ号@qq.com&quot;);\n    helper.setFrom(&quot;javastudy111@163.com&quot;);\n  \t&#x2F;&#x2F;发送修改好的MimeMessage\n    sender.send(message);\n&#125;</code></pre>\n\n<h3 id=\"邮件注册\"><a href=\"#邮件注册\" class=\"headerlink\" title=\"邮件注册\"></a>邮件注册</h3><p>既然我们已经了解了邮件发送，那么我们接着来看如何在我们的项目中实现邮件验证。</p>\n<p>首先明确验证流程：请求验证码 -&gt; 生成验证码（临时有效，注意设定过期时间） -&gt; 用户输入验证码并填写注册信息 -&gt; 验证通过注册成功！</p>\n<hr>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-6f0b9bb234b2534ec295ff195bad183a_1440w.jpg%3Fsource%3D172ae18b&refer=http%3A%2F%2Fpic1.zhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1645108924&t=d40aa5dc6be398725b4ff21ef5895454\" alt=\"点击查看图片来源\"></p>\n<h2 id=\"持久层框架：JPA\"><a href=\"#持久层框架：JPA\" class=\"headerlink\" title=\"持久层框架：JPA\"></a>持久层框架：JPA</h2><ul>\n<li>用了Mybatis之后，你看那个JDBC，真是太逊了。</li>\n<li>这么说，你的项目很勇哦？</li>\n<li>开玩笑，我的写代码超勇的好不好。</li>\n<li>阿伟，你可曾幻想过有一天你的项目里不再有SQL语句？</li>\n<li>不再有SQL语句？那我怎么和数据库交互啊？</li>\n<li>我看你是完全不懂哦</li>\n<li>懂，懂什么啊？</li>\n<li>你想懂？来，到我项目里来，我给你看点好康的。</li>\n<li>好康？是什么新框架哦？</li>\n<li>什么新框架，比新框架还刺激，还可以让你的项目登duang郎哦。</li>\n<li>哇，杰哥，你项目里面都没SQL语句诶，这是用的什么框架啊？</li>\n</ul>\n<p>在我们之前编写的项目中，我们不难发现，实际上大部分的数据库交互操作，到最后都只会做一个事情，那就是把数据库中的数据映射为Java中的对象。比如我们要通过用户名去查找对应的用户，或是通过ID查找对应的学生信息，在使用Mybatis时，我们只需要编写正确的SQL语句就可以直接将获取的数据映射为对应的Java对象，通过调用Mapper中的方法就能直接获得实体类，这样就方便我们在Java中数据库表中的相关信息了。</p>\n<p>但是以上这些操作都有一个共性，那就是它们都是通过某种条件去进行查询，而最后的查询结果，都是一个实体类，所以你会发现你写的很多SQL语句都是一个套路<code>select * from xxx where xxx=xxx</code>，那么能否有一种框架，帮我们把这些相同的套路给封装起来，直接把这类相似的SQL语句给屏蔽掉，不再由我们编写，而是让框架自己去组合拼接。</p>\n<h3 id=\"认识SpringDataJPA\"><a href=\"#认识SpringDataJPA\" class=\"headerlink\" title=\"认识SpringDataJPA\"></a>认识SpringDataJPA</h3><p>首先我们来看一个国外的统计：</p>\n<p>![image-20220119140326867](&#x2F;Users&#x2F;nagocoler&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220119140326867.png)</p>\n<p>不对吧，为什么Mybatis这么好用，这么强大，却只有10%的人喜欢呢？然而事实就是，在国外JPA几乎占据了主导地位，而Mybatis并不像国内那样受待见，所以你会发现，JPA都有SpringBoot的官方直接提供的starter，而Mybatis没有。</p>\n<p>至于为啥SSM阶段不讲这个，而是放到现在来讲也是因为，在微服务场景下它的优势才能更多的发挥出来。</p>\n<p>那么，什么是JPA？</p>\n<p>JPA（Java Persistence API）和JDBC类似，也是官方定义的一组接口，但是它相比传统的JDBC，它是为了实现ORM而生的，即Object-Relationl Mapping，它的作用是在关系型数据库和对象之间形成一个映射，这样，我们在具体的操作数据库的时候，就不需要再去和复杂的SQL语句打交道，只要像平时操作对象一样操作它就可以了。</p>\n<p>在之前，我们使用JDBC或是Mybatis来操作数据，通过直接编写对应的SQL语句来实现数据访问，但是我们发现实际上我们在Java中大部分操作数据库的情况都是读取数据并封装为一个实体类，因此，为什么不直接将实体类直接对应到一个数据库表呢？也就是说，一张表里面有什么属性，那么我们的对象就有什么属性，所有属性跟数据库里面的字段一一对应，而读取数据时，只需要读取一行的数据并封装为我们定义好的实体类既可以，而具体的SQL语句执行，完全可以交给框架根据我们定义的映射关系去生成，不再由我们去编写，因为这些SQL实际上都是千篇一律的。</p>\n<p>而实现JPA规范的框架一般最常用的就是<code>Hibernate</code>，它是一个重量级框架，学习难度相比Mybatis也更高一些，而SpringDataJPA也是采用Hibernate框架作为底层实现，并对其加以封装。</p>\n<p>官网：<a href=\"https://spring.io/projects/spring-data-jpa\">https://spring.io/projects/spring-data-jpa</a></p>\n<h3 id=\"使用JPA\"><a href=\"#使用JPA\" class=\"headerlink\" title=\"使用JPA\"></a>使用JPA</h3><p>同样的，我们只需要导入stater依赖即可：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>接着我们可以直接创建一个类，比如账户类，我们只需要把一个账号对应的属性全部定义好即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class Account &#123;\n    int id;\n    String username;\n    String password;\n&#125;</code></pre>\n\n<p>接着，我们可以通过注解形式，在属性上添加数据库映射关系，这样就能够让JPA知道我们的实体类对应的数据库表长啥样。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity   &#x2F;&#x2F;表示这个类是一个实体类\n@Table(name &#x3D; &quot;users&quot;)    &#x2F;&#x2F;对应的数据库中表名称\npublic class Account &#123;\n\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)   &#x2F;&#x2F;生成策略，这里配置为自增\n    @Column(name &#x3D; &quot;id&quot;)    &#x2F;&#x2F;对应表中id这一列\n    @Id     &#x2F;&#x2F;此属性为主键\n    int id;\n\n    @Column(name &#x3D; &quot;username&quot;)   &#x2F;&#x2F;对应表中username这一列\n    String username;\n\n    @Column(name &#x3D; &quot;password&quot;)   &#x2F;&#x2F;对应表中password这一列\n    String password;\n&#125;</code></pre>\n\n<p>接着我们来修改一下配置文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  jpa:\n\t\t#开启SQL语句执行日志信息\n    show-sql: true\n    hibernate:\n    \t#配置为自动创建\n      ddl-auto: create</code></pre>\n\n<p><code>ddl-auto</code>属性用于设置自动表定义，可以实现自动在数据库中为我们创建一个表，表的结构会根据我们定义的实体类决定，它有4种</p>\n<ul>\n<li>create 启动时删数据库中的表，然后创建，退出时不删除数据表 </li>\n<li>create-drop 启动时删数据库中的表，然后创建，退出时删除数据表 如果表不存在报错 </li>\n<li>update 如果启动时表格式不一致则更新表，原有数据保留 </li>\n<li>validate 项目启动表结构进行校验 如果不一致则报错</li>\n</ul>\n<p>我们可以在日志中发现，在启动时执行了如下SQL语句：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hibernate: create table users (id integer not null auto_increment, password varchar(255), username varchar(255), primary key (id)) engine&#x3D;InnoDB</code></pre>\n\n<p>而我们的数据库中对应的表已经创建好了。</p>\n<p>我们接着来看如何访问我们的表，我们需要创建一个Repository实现类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic interface AccountRepository extends JpaRepository&lt;Account, Integer&gt; &#123;\n    \n&#125;</code></pre>\n\n<p>注意JpaRepository有两个泛型，前者是具体操作的对象实体，也就是对应的表，后者是ID的类型，接口中已经定义了比较常用的数据库操作。编写接口继承即可，我们可以直接注入此接口获得实现类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@SpringBootTest\nclass JpaTestApplicationTests &#123;\n\n    @Resource\n    AccountRepository repository;\n\n    @Test\n    void contextLoads() &#123;\n      \t&#x2F;&#x2F;直接根据ID查找\n        repository.findById(1).ifPresent(System.out::println);\n    &#125;\n\n&#125;</code></pre>\n\n<p>运行后，成功得到查询结果。我们接着来测试增删操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid addAccount()&#123;\n    Account account &#x3D; new Account();\n    account.setUsername(&quot;Admin&quot;);\n    account.setPassword(&quot;123456&quot;);\n    account &#x3D; repository.save(account);  &#x2F;&#x2F;返回的结果会包含自动生成的主键值\n    System.out.println(&quot;插入时，自动生成的主键ID为：&quot;+account.getId());\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid deleteAccount()&#123;\n    repository.deleteById(2);   &#x2F;&#x2F;根据ID删除对应记录\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid pageAccount() &#123;\n    repository.findAll(PageRequest.of(0, 1)).forEach(System.out::println);  &#x2F;&#x2F;直接分页\n&#125;</code></pre>\n\n<p>我们发现，使用了JPA之后，整个项目的代码中没有出现任何的SQL语句，可以说是非常方便了，JPA依靠我们提供的注解信息自动完成了所有信息的映射和关联。</p>\n<p>相比Mybatis，JPA几乎就是一个全自动的ORM框架，而Mybatis则顶多算是半自动ORM框架。</p>\n<h3 id=\"方法名称拼接自定义SQL\"><a href=\"#方法名称拼接自定义SQL\" class=\"headerlink\" title=\"方法名称拼接自定义SQL\"></a>方法名称拼接自定义SQL</h3><p>虽然接口预置的方法使用起来非常方便，但是如果我们需要进行条件查询等操作或是一些判断，就需要自定义一些方法来实现，同样的，我们不需要编写SQL语句，而是通过方法名称的拼接来实现条件判断，这里列出了所有支持的条件判断名称：</p>\n<table>\n<thead>\n<tr>\n<th><code>Distinct</code></th>\n<th><code>findDistinctByLastnameAndFirstname</code></th>\n<th><code>select distinct … where x.lastname = ?1 and x.firstname = ?2</code></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>And</code></td>\n<td><code>findByLastnameAndFirstname</code></td>\n<td><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td><code>Or</code></td>\n<td><code>findByLastnameOrFirstname</code></td>\n<td><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>\n</tr>\n<tr>\n<td><code>Is</code>，<code>Equals</code></td>\n<td><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td>\n<td><code>… where x.firstname = ?1</code></td>\n</tr>\n<tr>\n<td><code>Between</code></td>\n<td><code>findByStartDateBetween</code></td>\n<td><code>… where x.startDate between ?1 and ?2</code></td>\n</tr>\n<tr>\n<td><code>LessThan</code></td>\n<td><code>findByAgeLessThan</code></td>\n<td><code>… where x.age &lt; ?1</code></td>\n</tr>\n<tr>\n<td><code>LessThanEqual</code></td>\n<td><code>findByAgeLessThanEqual</code></td>\n<td><code>… where x.age &lt;= ?1</code></td>\n</tr>\n<tr>\n<td><code>GreaterThan</code></td>\n<td><code>findByAgeGreaterThan</code></td>\n<td><code>… where x.age &gt; ?1</code></td>\n</tr>\n<tr>\n<td><code>GreaterThanEqual</code></td>\n<td><code>findByAgeGreaterThanEqual</code></td>\n<td><code>… where x.age &gt;= ?1</code></td>\n</tr>\n<tr>\n<td><code>After</code></td>\n<td><code>findByStartDateAfter</code></td>\n<td><code>… where x.startDate &gt; ?1</code></td>\n</tr>\n<tr>\n<td><code>Before</code></td>\n<td><code>findByStartDateBefore</code></td>\n<td><code>… where x.startDate &lt; ?1</code></td>\n</tr>\n<tr>\n<td><code>IsNull</code>，<code>Null</code></td>\n<td><code>findByAge(Is)Null</code></td>\n<td><code>… where x.age is null</code></td>\n</tr>\n<tr>\n<td><code>IsNotNull</code>，<code>NotNull</code></td>\n<td><code>findByAge(Is)NotNull</code></td>\n<td><code>… where x.age not null</code></td>\n</tr>\n<tr>\n<td><code>Like</code></td>\n<td><code>findByFirstnameLike</code></td>\n<td><code>… where x.firstname like ?1</code></td>\n</tr>\n<tr>\n<td><code>NotLike</code></td>\n<td><code>findByFirstnameNotLike</code></td>\n<td><code>… where x.firstname not like ?1</code></td>\n</tr>\n<tr>\n<td><code>StartingWith</code></td>\n<td><code>findByFirstnameStartingWith</code></td>\n<td><code>… where x.firstname like ?1</code>（参数与附加<code>%</code>绑定）</td>\n</tr>\n<tr>\n<td><code>EndingWith</code></td>\n<td><code>findByFirstnameEndingWith</code></td>\n<td><code>… where x.firstname like ?1</code>（参数与前缀<code>%</code>绑定）</td>\n</tr>\n<tr>\n<td><code>Containing</code></td>\n<td><code>findByFirstnameContaining</code></td>\n<td><code>… where x.firstname like ?1</code>（参数绑定以<code>%</code>包装）</td>\n</tr>\n<tr>\n<td><code>OrderBy</code></td>\n<td><code>findByAgeOrderByLastnameDesc</code></td>\n<td><code>… where x.age = ?1 order by x.lastname desc</code></td>\n</tr>\n<tr>\n<td><code>Not</code></td>\n<td><code>findByLastnameNot</code></td>\n<td><code>… where x.lastname &lt;&gt; ?1</code></td>\n</tr>\n<tr>\n<td><code>In</code></td>\n<td><code>findByAgeIn(Collection&lt;Age&gt; ages)</code></td>\n<td><code>… where x.age in ?1</code></td>\n</tr>\n<tr>\n<td><code>NotIn</code></td>\n<td><code>findByAgeNotIn(Collection&lt;Age&gt; ages)</code></td>\n<td><code>… where x.age not in ?1</code></td>\n</tr>\n<tr>\n<td><code>True</code></td>\n<td><code>findByActiveTrue()</code></td>\n<td><code>… where x.active = true</code></td>\n</tr>\n<tr>\n<td><code>False</code></td>\n<td><code>findByActiveFalse()</code></td>\n<td><code>… where x.active = false</code></td>\n</tr>\n<tr>\n<td><code>IgnoreCase</code></td>\n<td><code>findByFirstnameIgnoreCase</code></td>\n<td><code>… where UPPER(x.firstname) = UPPER(?1)</code></td>\n</tr>\n</tbody></table>\n<p>比如我们想要实现根据用户名模糊匹配查找用户：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic interface AccountRepository extends JpaRepository&lt;Account, Integer&gt; &#123;\n\t\t&#x2F;&#x2F;按照表中的规则进行名称拼接，不用刻意去记，IDEA会有提示\n    List&lt;Account&gt; findAllByUsernameLike(String str);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid test() &#123;\n    repository.findAllByUsernameLike(&quot;%T%&quot;).forEach(System.out::println);\n&#125;</code></pre>\n\n<p>又比如我们想同时根据用户名和ID一起查询：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic interface AccountRepository extends JpaRepository&lt;Account, Integer&gt; &#123;\n\n    Account findByIdAndUsername(int id, String username);\n  &#x2F;&#x2F;可以使用Optional类进行包装，Optional&lt;Account&gt; findByIdAndUsername(int id, String username);\n    \n    List&lt;Account&gt; findAllByUsernameLike(String str);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid test() &#123;\n    System.out.println(repository.findByIdAndUsername(1, &quot;Test&quot;));\n&#125;</code></pre>\n\n<p>比如我们想判断数据库中是否存在某个ID的用户：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic interface AccountRepository extends JpaRepository&lt;Account, Integer&gt; &#123;\n\n    Account findByIdAndUsername(int id, String username);\n\n    List&lt;Account&gt; findAllByUsernameLike(String str);\n\n    boolean existsAccountById(int id);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid test() &#123;\n    System.out.println(repository.existsAccountByUsername(&quot;Test&quot;));\n&#125;</code></pre>\n\n<p>注意自定义条件操作的方法名称一定要遵循规则，不然会出现异常：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract  ...</code></pre>\n\n<h3 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h3><p>在实际开发中，比较常见的场景还有关联查询，也就是我们会在表中添加一个外键字段，而此外键字段又指向了另一个表中的数据，当我们查询数据时，可能会需要将关联数据也一并获取，比如我们想要查询某个用户的详细信息，一般用户简略信息会单独存放一个表，而用户详细信息会单独存放在另一个表中。当然，除了用户详细信息之外，可能在某些电商平台还会有用户的购买记录、用户的购物车，交流社区中的用户帖子、用户评论等，这些都是需要根据用户信息进行关联查询的内容。</p>\n<p><img src=\"https://img1.baidu.com/it/u=292198351,4011695440&fm=253&fmt=auto&app=138&f=JPEG?w=404&h=436\" alt=\"img\"></p>\n<p>我们知道，在JPA中，每张表实际上就是一个实体类的映射，而表之间的关联关系，也可以看作对象之间的依赖关系，比如用户表中包含了用户详细信息的ID字段作为外键，那么实际上就是用户表实体中包括了用户详细信息实体对象：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity\n@Table(name &#x3D; &quot;users_detail&quot;)\npublic class AccountDetail &#123;\n\n    @Column(name &#x3D; &quot;id&quot;)\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)\n    @Id\n    int id;\n\n    @Column(name &#x3D; &quot;address&quot;)\n    String address;\n\n    @Column(name &#x3D; &quot;email&quot;)\n    String email;\n\n    @Column(name &#x3D; &quot;phone&quot;)\n    String phone;\n\n    @Column(name &#x3D; &quot;real_name&quot;)\n    String realName;\n&#125;</code></pre>\n\n<p>而用户信息和用户详细信息之间形成了一对一的关系，那么这时我们就可以直接在类中指定这种关系：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity\n@Table(name &#x3D; &quot;users&quot;)\npublic class Account &#123;\n\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)\n    @Column(name &#x3D; &quot;id&quot;)\n    @Id\n    int id;\n\n    @Column(name &#x3D; &quot;username&quot;)\n    String username;\n\n    @Column(name &#x3D; &quot;password&quot;)\n    String password;\n\n    @JoinColumn(name &#x3D; &quot;detail_id&quot;)   &#x2F;&#x2F;指定存储外键的字段名称\n    @OneToOne    &#x2F;&#x2F;声明为一对一关系\n    AccountDetail detail;\n&#125;</code></pre>\n\n<p>在修改实体类信息后，我们发现在启动时也进行了更新，日志如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hibernate: alter table users add column detail_id integer\nHibernate: create table users_detail (id integer not null auto_increment, address varchar(255), email varchar(255), phone varchar(255), real_name varchar(255), primary key (id)) engine&#x3D;InnoDB\nHibernate: alter table users add constraint FK7gb021edkxf3mdv5bs75ni6jd foreign key (detail_id) references users_detail (id)</code></pre>\n\n<p>是不是感觉非常方便！都懒得去手动改表结构了。</p>\n<p>接着我们往用户详细信息中添加一些数据，一会我们可以直接进行查询：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid pageAccount() &#123;\n    repository.findById(1).ifPresent(System.out::println);\n&#125;</code></pre>\n\n<p>查询后，可以发现，得到如下结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hibernate: select account0_.id as id1_0_0_, account0_.detail_id as detail_i4_0_0_, account0_.password as password2_0_0_, account0_.username as username3_0_0_, accountdet1_.id as id1_1_1_, accountdet1_.address as address2_1_1_, accountdet1_.email as email3_1_1_, accountdet1_.phone as phone4_1_1_, accountdet1_.real_name as real_nam5_1_1_ from users account0_ left outer join users_detail accountdet1_ on account0_.detail_id&#x3D;accountdet1_.id where account0_.id&#x3D;?\nAccount(id&#x3D;1, username&#x3D;Test, password&#x3D;123456, detail&#x3D;AccountDetail(id&#x3D;1, address&#x3D;四川省成都市青羊区, email&#x3D;8371289@qq.com, phone&#x3D;1234567890, realName&#x3D;本伟))</code></pre>\n\n<p>也就是，在建立关系之后，我们查询Account对象时，会自动将关联数据的结果也一并进行查询。</p>\n<p>那要是我们只想要Account的数据，不想要用户详细信息数据怎么办呢？我希望在我要用的时候再获取详细信息，这样可以节省一些网络开销，我们可以设置懒加载，这样只有在需要时才会向数据库获取：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@JoinColumn(name &#x3D; &quot;detail_id&quot;)\n@OneToOne(fetch &#x3D; FetchType.LAZY)    &#x2F;&#x2F;将获取类型改为LAZY\nAccountDetail detail;</code></pre>\n\n<p>接着我们测试一下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Transactional   &#x2F;&#x2F;懒加载属性需要在事务环境下获取，因为repository方法调用完后Session会立即关闭\n@Test\nvoid pageAccount() &#123;\n    repository.findById(1).ifPresent(account -&gt; &#123;\n        System.out.println(account.getUsername());   &#x2F;&#x2F;获取用户名\n        System.out.println(account.getDetail());  &#x2F;&#x2F;获取详细信息（懒加载）\n    &#125;);\n&#125;</code></pre>\n\n<p>接着我们来看看控制台输出了什么：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hibernate: select account0_.id as id1_0_0_, account0_.detail_id as detail_i4_0_0_, account0_.password as password2_0_0_, account0_.username as username3_0_0_ from users account0_ where account0_.id&#x3D;?\nTest\nHibernate: select accountdet0_.id as id1_1_0_, accountdet0_.address as address2_1_0_, accountdet0_.email as email3_1_0_, accountdet0_.phone as phone4_1_0_, accountdet0_.real_name as real_nam5_1_0_ from users_detail accountdet0_ where accountdet0_.id&#x3D;?\nAccountDetail(id&#x3D;1, address&#x3D;四川省成都市青羊区, email&#x3D;8371289@qq.com, phone&#x3D;1234567890, realName&#x3D;卢本)</code></pre>\n\n<p>可以看到，获取用户名之前，并没有去查询用户的详细信息，而是当我们获取详细信息时才进行查询并返回AccountDetail对象。</p>\n<p>那么我们是否也可以在添加数据时，利用实体类之间的关联信息，一次性添加两张表的数据呢？可以，但是我们需要稍微修改一下级联关联操作设定：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@JoinColumn(name &#x3D; &quot;detail_id&quot;)\n@OneToOne(fetch &#x3D; FetchType.LAZY, cascade &#x3D; CascadeType.ALL) &#x2F;&#x2F;设置关联操作为ALL\nAccountDetail detail;</code></pre>\n\n<ul>\n<li>ALL：所有操作都进行关联操作</li>\n<li>PERSIST：插入操作时才进行关联操作</li>\n<li>REMOVE：删除操作时才进行关联操作</li>\n<li>MERGE：修改操作时才进行关联操作</li>\n</ul>\n<p>可以多个并存，接着我们来进行一下测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid addAccount()&#123;\n    Account account &#x3D; new Account();\n    account.setUsername(&quot;Nike&quot;);\n    account.setPassword(&quot;123456&quot;);\n    AccountDetail detail &#x3D; new AccountDetail();\n    detail.setAddress(&quot;重庆市渝中区解放碑&quot;);\n    detail.setPhone(&quot;1234567890&quot;);\n    detail.setEmail(&quot;73281937@qq.com&quot;);\n    detail.setRealName(&quot;张三&quot;);\n  \taccount.setDetail(detail);\n    account &#x3D; repository.save(account);\n    System.out.println(&quot;插入时，自动生成的主键ID为：&quot;+account.getId()+&quot;，外键ID为：&quot;+account.getDetail().getId());\n&#125;</code></pre>\n\n<p>可以看到日志结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hibernate: insert into users_detail (address, email, phone, real_name) values (?, ?, ?, ?)\nHibernate: insert into users (detail_id, password, username) values (?, ?, ?)\n插入时，自动生成的主键ID为：6，外键ID为：3</code></pre>\n\n<p>结束后会发现数据库中两张表都同时存在数据。</p>\n<p>接着我们来看一对多关联，比如每个用户的成绩信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@JoinColumn(name &#x3D; &quot;uid&quot;)  &#x2F;&#x2F;注意这里的name指的是Score表中的uid字段对应的就是当前的主键，会将uid外键设置为当前的主键\n@OneToMany(fetch &#x3D; FetchType.LAZY, cascade &#x3D; CascadeType.REMOVE)   &#x2F;&#x2F;在移除Account时，一并移除所有的成绩信息，依然使用懒加载\nList&lt;Score&gt; scoreList;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity\n@Table(name &#x3D; &quot;users_score&quot;)   &#x2F;&#x2F;成绩表，注意只存成绩，不存学科信息，学科信息id做外键\npublic class Score &#123;\n\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)\n    @Column(name &#x3D; &quot;id&quot;)\n    @Id\n    int id;\n\n    @OneToOne   &#x2F;&#x2F;一对一对应到学科上\n    @JoinColumn(name &#x3D; &quot;cid&quot;)\n    Subject subject;\n\n    @Column(name &#x3D; &quot;socre&quot;)\n    double score;\n\n    @Column(name &#x3D; &quot;uid&quot;)\n    int uid;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity\n@Table(name &#x3D; &quot;subjects&quot;)   &#x2F;&#x2F;学科信息表\npublic class Subject &#123;\n\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)\n    @Column(name &#x3D; &quot;cid&quot;)\n    @Id\n    int cid;\n\n    @Column(name &#x3D; &quot;name&quot;)\n    String name;\n\n    @Column(name &#x3D; &quot;teacher&quot;)\n    String teacher;\n\n    @Column(name &#x3D; &quot;time&quot;)\n    int time;\n&#125;</code></pre>\n\n<p>在数据库中填写相应数据，接着我们就可以查询用户的成绩信息了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Transactional\n@Test\nvoid test() &#123;\n    repository.findById(1).ifPresent(account -&gt; &#123;\n        account.getScoreList().forEach(System.out::println);\n    &#125;);\n&#125;</code></pre>\n\n<p>成功得到用户所有的成绩信息，包括得分和学科信息。</p>\n<p>同样的，我们还可以将对应成绩中的教师信息单独分出一张表存储，并建立多对一的关系，因为多门课程可能由同一个老师教授（千万别搞晕了，一定要理清楚关联关系，同时也是考验你的基础扎不扎实）：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ManyToOne(fetch &#x3D; FetchType.LAZY)\n@JoinColumn(name &#x3D; &quot;tid&quot;)   &#x2F;&#x2F;存储教师ID的字段，和一对一是一样的，也会当前表中创个外键\nTeacher teacher;</code></pre>\n\n<p>接着就是教师实体类了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@Entity\n@Table(name &#x3D; &quot;teachers&quot;)\npublic class Teacher &#123;\n\n    @Column(name &#x3D; &quot;id&quot;)\n    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)\n    @Id\n    int id;\n\n    @Column(name &#x3D; &quot;name&quot;)\n    String name;\n\n    @Column(name &#x3D; &quot;sex&quot;)\n    String sex;\n&#125;</code></pre>\n\n<p>最后我们再进行一下测试：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Transactional\n@Test\nvoid test() &#123;\n    repository.findById(3).ifPresent(account -&gt; &#123;\n        account.getScoreList().forEach(score -&gt; &#123;\n            System.out.println(&quot;课程名称：&quot;+score.getSubject().getName());\n            System.out.println(&quot;得分：&quot;+score.getScore());\n            System.out.println(&quot;任课教师：&quot;+score.getSubject().getTeacher().getName());\n        &#125;);\n    &#125;);\n&#125;</code></pre>\n\n<p>成功得到多对一的教师信息。</p>\n<p>最后我们再来看最复杂的情况，现在我们一门课程可以由多个老师教授，而一个老师也可以教授多个课程，那么这种情况就是很明显的多对多场景，现在又该如何定义呢？我们可以像之前一样，插入一张中间表表示教授关系，这个表中专门存储哪个老师教哪个科目：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ManyToMany(fetch &#x3D; FetchType.LAZY)   &#x2F;&#x2F;多对多场景\n@JoinTable(name &#x3D; &quot;teach_relation&quot;,     &#x2F;&#x2F;多对多中间关联表\n        joinColumns &#x3D; @JoinColumn(name &#x3D; &quot;cid&quot;),    &#x2F;&#x2F;当前实体主键在关联表中的字段名称\n        inverseJoinColumns &#x3D; @JoinColumn(name &#x3D; &quot;tid&quot;)   &#x2F;&#x2F;教师实体主键在关联表中的字段名称\n)\nList&lt;Teacher&gt; teacher;</code></pre>\n\n<p>接着，JPA会自动创建一张中间表，并自动设置外键，我们就可以将多对多关联信息编写在其中了。</p>\n<h3 id=\"JPQL自定义SQL语句\"><a href=\"#JPQL自定义SQL语句\" class=\"headerlink\" title=\"JPQL自定义SQL语句\"></a>JPQL自定义SQL语句</h3><p>虽然SpringDataJPA能够简化大部分数据获取场景，但是难免会有一些特殊的场景，需要使用复杂查询才能够去完成，这时你又会发现，如果要实现，只能用回Mybatis了，因为我们需要自己手动编写SQL语句，过度依赖SpringDataJPA会使得SQL语句不可控。</p>\n<p>使用JPA，我们也可以像Mybatis那样，直接编写SQL语句，不过它是JPQL语言，与原生SQL语句很类似，但是它是面向对象的，当然我们也可以编写原生SQL语句。</p>\n<p>比如我们要更新用户表中指定ID用户的密码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Repository\npublic interface AccountRepository extends JpaRepository&lt;Account, Integer&gt; &#123;\n\n    @Transactional    &#x2F;&#x2F;DML操作需要事务环境，可以不在这里声明，但是调用时一定要处于事务环境下\n    @Modifying     &#x2F;&#x2F;表示这是一个DML操作\n    @Query(&quot;update Account set password &#x3D; ?2 where id &#x3D; ?1&quot;) &#x2F;&#x2F;这里操作的是一个实体类对应的表，参数使用?代表，后面接第n个参数\n    int updatePasswordById(int id, String newPassword);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid updateAccount()&#123;\n    repository.updatePasswordById(1, &quot;654321&quot;);\n&#125;</code></pre>\n\n<p>现在我想使用原生SQL来实现根据用户名称修改密码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Transactional\n@Modifying\n@Query(value &#x3D; &quot;update users set password &#x3D; :pwd where username &#x3D; :name&quot;, nativeQuery &#x3D; true) &#x2F;&#x2F;使用原生SQL，和Mybatis一样，这里使用 :名称 表示参数，当然也可以继续用上面那种方式。\nint updatePasswordByUsername(@Param(&quot;name&quot;) String username,   &#x2F;&#x2F;我们可以使用@Param指定名称\n                             @Param(&quot;pwd&quot;) String newPassword);</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Test\nvoid updateAccount()&#123;\n    repository.updatePasswordByUsername(&quot;Admin&quot;, &quot;654321&quot;);\n&#125;</code></pre>\n\n<p>通过编写原生SQL，在一定程度上弥补了SQL不可控的问题。</p>\n<p>虽然JPA能够为我们带来非常便捷的开发体验，但是正式因为太便捷了，保姆级的体验有时也会适得其反，可能项目开发到后期特别庞大时，就只能从底层SQL语句开始进行优化，而由于JPA尽可能地在屏蔽我们对SQL语句的编写，所以后期优化是个大问题，并且Hibernate相对于Mybatis来说，更加重量级。不过，在微服务的时代，单体项目一般不会太大，而JPA的劣势并没有太明显地体现出来。</p>\n<p>有关Mybatis和JPA的对比，可以参考：<a href=\"https://blog.csdn.net/u010253246/article/details/105731204\">https://blog.csdn.net/u010253246/article/details/105731204</a></p>\n<hr>\n<h2 id=\"Extra-前后端分离跨域处理\"><a href=\"#Extra-前后端分离跨域处理\" class=\"headerlink\" title=\"Extra. 前后端分离跨域处理\"></a>Extra. 前后端分离跨域处理</h2><p>我们的项目已经处于前后端分离状态了，那么前后端分离状态和我们之前的状态有什么区别的呢？</p>\n<ul>\n<li><strong>不分离：</strong>前端页面看到的都是由后端控制，由后端渲染页面或重定向，后端需要控制前端的展示，前端与后端的耦合度很高。比如我们之前都是使用后端来执行重定向操作或是使用Thymeleaf来填充数据，而最终返回的是整个渲染好的页。</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1394466/201809/1394466-20180916231510365-285933655.png\" alt=\"img\"></p>\n<ul>\n<li><strong>分离：</strong>后端仅返回前端所需的数据，不再渲染HTML页面，不再控制前端的效果。至于前端用户看到什么效果，从后端请求的数据如何加载到前端中，都由前端通过JS等进行动态数据填充和渲染。这样后端只返回JSON数据，前端处理JSON数据并展示，这样前后端的职责就非常明确了。</li>\n</ul>\n<p><img src=\"https://img2018.cnblogs.com/blog/1394466/201809/1394466-20180916231716242-1862208927.png\" alt=\"img\"></p>\n<p>实现前后端分离有两种方案，一种是直接放入SpringBoot的资源文件夹下，但是这样实际上还是在依靠SpringBoot内嵌的Tomcat服务器进行页面和静态资源的发送，我们现在就是这种方案。</p>\n<p>另一种方案就是直接将所有的页面和静态资源单独放到代理服务器上（如Nginx），这样我们后端服务器就不必再处理静态资源和页面了，专心返回数据即可，而前端页面就需要访问另一个服务器来获取，虽然逻辑和明确，但是这样会出现跨域问题，实际上就是我们之前所说的跨站请求伪造，为了防止这种不安全的行为发生，所以对异步请求会进行一定的限制。</p>\n<p>这里，我们将前端页面和后端页面直接分离进行测试，在登陆时得到如下错误：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access to XMLHttpRequest at &#39;http:&#x2F;&#x2F;localhost:8080&#x2F;api&#x2F;auth&#x2F;login&#39; from origin &#39;http:&#x2F;&#x2F;localhost:63342&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></pre>\n\n<p>可以很清楚地看到，在Ajax发送异步请求时，我们的请求被阻止，原因是在响应头中没有包含<code>Access-Control-Allow-Origin</code>，也就表示，如果服务端允许跨域请求，那么会在响应头中添加一个<code>Access-Control-Allow-Origin</code>字段，如果不允许跨域，就像现在这样。那么，什么才算是跨域呢：</p>\n<ol>\n<li>请求协议<code>如http、https</code>不同</li>\n<li>请求的地址&#x2F;域名不同</li>\n<li>端口不同</li>\n</ol>\n<p>因为我们现在相当于前端页面访问的是静态资源服务器，而后端数据是由我们的SpringBoot项目提供，它们是两个不同的服务器，所以在垮服务器请求资源时，会被判断为存在安全风险。</p>\n<p>但是现在，由于我们前后端是分离状态，我们希望的是能够实现跨域请求，这时我们就需要添加一个过滤器来处理跨域问题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic CorsFilter corsFilter() &#123;\n    &#x2F;&#x2F;创建CorsConfiguration对象后添加配置\n    CorsConfiguration config &#x3D; new CorsConfiguration();\n    &#x2F;&#x2F;设置放行哪些原始域，这里直接设置为所有\n    config.addAllowedOriginPattern(&quot;*&quot;);\n  \t&#x2F;&#x2F;你可以单独设置放行哪些原始域 config.addAllowedOrigin(&quot;http:&#x2F;&#x2F;localhost:2222&quot;);\n    &#x2F;&#x2F;放行哪些原始请求头部信息\n    config.addAllowedHeader(&quot;*&quot;);\n    &#x2F;&#x2F;放行哪些请求方式，*代表所有\n    config.addAllowedMethod(&quot;*&quot;);\n    &#x2F;&#x2F;是否允许发送Cookie，必须要开启，因为我们的JSESSIONID需要在Cookie中携带\n    config.setAllowCredentials(true);\n    &#x2F;&#x2F;映射路径\n    UrlBasedCorsConfigurationSource corsConfigurationSource &#x3D; new UrlBasedCorsConfigurationSource();\n    corsConfigurationSource.registerCorsConfiguration(&quot;&#x2F;**&quot;, config);\n    &#x2F;&#x2F;返回CorsFilter\n    return new CorsFilter(corsConfigurationSource);\n&#125;</code></pre>\n\n<p>这样，我们的SpringBoot项目就支持跨域访问了，接着我们再来尝试进行登陆，可以发现已经能够正常访问了，并且响应头中包含了以下信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Vary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nAccess-Control-Allow-Origin: http:&#x2F;&#x2F;localhost:63342\nAccess-Control-Expose-Headers: *\nAccess-Control-Allow-Credentials: true</code></pre>\n\n<p>可以看到我们当前访问的原始域已经被放行了。</p>\n<p>但是还有一个问题，我们的Ajax请求中没有携带Cookie信息（这个按理说属于前端知识了）这里我们稍微改一下，不然我们的请求无法确认身份：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">function get(url, success)&#123;\n    $.ajax(&#123;\n        type: &quot;get&quot;,\n        url: url,\n        async: true,\n        dataType: &#39;json&#39;,\n        xhrFields: &#123;\n            withCredentials: true\n        &#125;,\n        success: success\n    &#125;);\n&#125;\n\nfunction post(url, data, success)&#123;\n    $.ajax(&#123;\n        type: &quot;post&quot;,\n        url: url,\n        async: true,\n        data: data,\n        dataType: &#39;json&#39;,\n        xhrFields: &#123;\n            withCredentials: true\n        &#125;,\n        success: success\n    &#125;);\n&#125;</code></pre>\n\n<p>添加两个封装好的方法，并且将<code>withCredentials</code>开启，这样在发送异步请求时，就会携带Cookie信息了。</p>\n<p> 在学习完成Linux之后，我们会讲解如何在Linux服务器上部署Nginx反向代理服务器。</p>\n<hr>\n<h2 id=\"接口管理：Swagger\"><a href=\"#接口管理：Swagger\" class=\"headerlink\" title=\"接口管理：Swagger\"></a>接口管理：Swagger</h2><p>在前后端分离项目中，前端人员需要知道我们后端会提供什么数据，根据后端提供的数据来进行前端页面渲染（在之前我们也演示过）这个时候，我们就需要编写一个API文档，以便前端人员随时查阅。</p>\n<p>但是这样的一个文档，我们也不可能单独写一个项目去进行维护，并且随着我们的后端项目不断更新，文档也需要跟随更新，这显然是很麻烦的一件事情，那么有没有一种比较好的解决方案呢？</p>\n<p>当然有，那就是丝袜哥：Swagger</p>\n<h3 id=\"走进Swagger\"><a href=\"#走进Swagger\" class=\"headerlink\" title=\"走进Swagger\"></a>走进Swagger</h3><p>Swagger的主要功能如下：</p>\n<ul>\n<li>支持 API 自动生成同步的在线文档：使用 Swagger 后可以直接通过代码生成文档，不再需要自己手动编写接口文档了，对程序员来说非常方便，可以节约写文档的时间去学习新技术。</li>\n<li>提供 Web 页面在线测试 API：光有文档还不够，Swagger 生成的文档还支持在线测试。参数和格式都定好了，直接在界面上输入参数对应的值即可在线测试接口。</li>\n</ul>\n<p>结合Spring框架（Spring-fox），Swagger可以很轻松地利用注解以及扫描机制，来快速生成在线文档，以实现当我们项目启动之后，前端开发人员就可以打开Swagger提供的前端页面，查看和测试接口。依赖如下：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;springfox-boot-starter&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.0.0&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<p>SpringBoot 2.6以上版本修改了路径匹配规则，但是Swagger3还不支持，这里换回之前的，不然启动直接报错：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n\tmvc:\n\t\tpathmatch:\n      matching-strategy: ant_path_matcher</code></pre>\n\n<p>项目启动后，我们可以直接打开：<a href=\"http://localhost:8080/swagger-ui/index.html%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%A1%B5%E9%9D%A2%EF%BC%88%E8%A6%81%E6%98%AF%E8%A7%89%E5%BE%97%E4%B8%91%EF%BC%8CUI%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%8D%A2%E7%9A%84%EF%BC%8C%E6%94%AF%E6%8C%81%E7%AC%AC%E4%B8%89%E6%96%B9%EF%BC%89%E4%BC%9A%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%9A%84API%E6%96%87%E6%A1%A3%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%B7%AF%E5%BE%84%E3%80%81%E6%94%AF%E6%8C%81%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AD%89%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%AF%B9API%E6%8E%A5%E5%8F%A3%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C%E9%9D%9E%E5%B8%B8%E6%96%B9%E4%BE%BF%E3%80%82\">http://localhost:8080/swagger-ui/index.html，这个页面（要是觉得丑，UI是可以换的，支持第三方）会显示所有的API文档，包括接口的路径、支持的方法、接口的描述等，并且我们可以直接对API接口进行测试，非常方便。</a></p>\n<p>我们可以创建一个配置类去配置页面的相关信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class SwaggerConfiguration &#123;\n\n    @Bean\n    public Docket docket() &#123;\n        return new Docket(DocumentationType.OAS_30).apiInfo(\n                new ApiInfoBuilder()\n                        .contact(new Contact(&quot;你的名字&quot;, &quot;https:&#x2F;&#x2F;www.bilibili.com&quot;, &quot;javastudy111*@163.com&quot;))\n                        .title(&quot;图书管理系统 - 在线API接口文档&quot;)\n                        .build()\n        );\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"接口信息配置\"><a href=\"#接口信息配置\" class=\"headerlink\" title=\"接口信息配置\"></a>接口信息配置</h3><p>虽然Swagger的UI界面已经可以很好地展示后端提供的接口信息了，但是非常的混乱，我们来看看如何配置接口的一些描述信息。</p>\n<p>首先我们的页面中完全不需要显示ErrorController相关的API，所以我们配置一下选择哪些Controller才会生成API信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Bean\npublic Docket docket() &#123;\n    ApiInfo info &#x3D; new ApiInfoBuilder()\n            .contact(new Contact(&quot;你的名字&quot;, &quot;https:&#x2F;&#x2F;www.bilibili.com&quot;, &quot;javastudy111@163.com&quot;))\n            .title(&quot;图书管理系统 - 在线API接口文档&quot;)\n            .description(&quot;这是一个图书管理系统的后端API文档，欢迎前端人员查阅！&quot;)\n            .build();\n    return new Docket(DocumentationType.OAS_30)\n            .apiInfo(info)\n            .select()       &#x2F;&#x2F;对项目中的所有API接口进行选择\n            .apis(RequestHandlerSelectors.basePackage(&quot;com.example.controller&quot;))\n            .build();\n&#125;</code></pre>\n\n<p>接着我们来看看如何为一个Controller编写API描述信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Api(tags &#x3D; &quot;账户验证接口&quot;, description &#x3D; &quot;包括用户登录、注册、验证码请求等操作。&quot;)\n@RestController\n@RequestMapping(&quot;&#x2F;api&#x2F;auth&quot;)\npublic class AuthApiController &#123;</code></pre>\n\n<p>我们可以直接在类名称上面添加<code>@Api</code>注解，并填写相关信息，来为当前的Controller设置描述信息。</p>\n<p>接着我们可以为所有的请求映射配置描述信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ApiResponses(&#123;\n        @ApiResponse(code &#x3D; 200, message &#x3D; &quot;邮件发送成功&quot;),  \n        @ApiResponse(code &#x3D; 500, message &#x3D; &quot;邮件发送失败&quot;)   &#x2F;&#x2F;不同返回状态码描述\n&#125;)\n@ApiOperation(&quot;请求邮件验证码&quot;)   &#x2F;&#x2F;接口描述\n@GetMapping(&quot;&#x2F;verify-code&quot;)\npublic RestBean&lt;Void&gt; verifyCode(@ApiParam(&quot;邮箱地址&quot;)   &#x2F;&#x2F;请求参数的描述\n                                 @RequestParam(&quot;email&quot;) String email)&#123;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ApiIgnore     &#x2F;&#x2F;忽略此请求映射\n@PostMapping(&quot;&#x2F;login-success&quot;)\npublic RestBean&lt;Void&gt; loginSuccess()&#123;\n    return new RestBean&lt;&gt;(200, &quot;登陆成功&quot;);\n&#125;</code></pre>\n\n<p>我们也可以为实体类配置相关的描述信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ApiModel(description &#x3D; &quot;响应实体封装类&quot;)\n@AllArgsConstructor\npublic class RestBean&lt;T&gt; &#123;\n\n    @ApiModelProperty(&quot;状态码&quot;)\n    int code;\n    @ApiModelProperty(&quot;状态码描述&quot;)\n    String reason;\n    @ApiModelProperty(&quot;数据实体&quot;)\n    T data;\n\n    public RestBean(int code, String reason) &#123;\n        this.code &#x3D; code;\n        this.reason &#x3D; reason;\n    &#125;\n&#125;</code></pre>\n\n<p>这样，我们就可以在文档中查看实体类简介以及各个属性的介绍了。</p>\n<p>最后我们再配置一下多环境：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;profiles&gt;\n    &lt;profile&gt;\n        &lt;id&gt;dev&lt;&#x2F;id&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n        &lt;properties&gt;\n            &lt;environment&gt;dev&lt;&#x2F;environment&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n    &lt;profile&gt;\n        &lt;id&gt;prod&lt;&#x2F;id&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;false&lt;&#x2F;activeByDefault&gt;\n        &lt;&#x2F;activation&gt;\n        &lt;properties&gt;\n            &lt;environment&gt;prod&lt;&#x2F;environment&gt;\n        &lt;&#x2F;properties&gt;\n    &lt;&#x2F;profile&gt;\n&lt;&#x2F;profiles&gt;</code></pre>\n\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;resources&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;excludes&gt;\n            &lt;exclude&gt;application*.yaml&lt;&#x2F;exclude&gt;\n        &lt;&#x2F;excludes&gt;\n    &lt;&#x2F;resource&gt;\n    &lt;resource&gt;\n        &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;\n        &lt;filtering&gt;true&lt;&#x2F;filtering&gt;\n        &lt;includes&gt;\n            &lt;include&gt;application.yaml&lt;&#x2F;include&gt;\n            &lt;include&gt;application-$&#123;environment&#125;.yaml&lt;&#x2F;include&gt;\n        &lt;&#x2F;includes&gt;\n    &lt;&#x2F;resource&gt;\n&lt;&#x2F;resources&gt;</code></pre>\n\n<p>首先在Maven中添加两个环境，接着我们配置一下不同环境的配置文件：</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">  jpa:\n    show-sql: false\n    hibernate:\n      ddl-auto: update\nspringfox:\n  documentation:\n    enabled: false</code></pre>\n\n<p>在生产环境下，我们选择不开启Swagger文档以及JPA的数据库操作日志，这样我们就可以根据情况选择两套环境了。</p>\n","text":"SpringBoot其他框架通过了解其他的SpringBoot框架，我们就可以在我们自己的Web服务器上实现更多更高级的功能。 邮件发送：Mail我们在注册很多的网站时，都会遇到邮件或是手机号验证，也就是通过你的邮箱或是手机短信去接受网站发给你的注册验证信息，填写验证码之后，就可...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringBoot%E5%85%B6%E4%BB%96%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">SpringBoot其他框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%EF%BC%9AMail\"><span class=\"toc-text\">邮件发送：Mail</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81\"><span class=\"toc-text\">邮件发送</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%82%AE%E4%BB%B6%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">邮件注册</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6%EF%BC%9AJPA\"><span class=\"toc-text\">持久层框架：JPA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%86SpringDataJPA\"><span class=\"toc-text\">认识SpringDataJPA</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8JPA\"><span class=\"toc-text\">使用JPA</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E5%90%8D%E7%A7%B0%E6%8B%BC%E6%8E%A5%E8%87%AA%E5%AE%9A%E4%B9%89SQL\"><span class=\"toc-text\">方法名称拼接自定义SQL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">关联查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#JPQL%E8%87%AA%E5%AE%9A%E4%B9%89SQL%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">JPQL自定义SQL语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Extra-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Extra. 前后端分离跨域处理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%EF%BC%9ASwagger\"><span class=\"toc-text\">接口管理：Swagger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%B0%E8%BF%9BSwagger\"><span class=\"toc-text\">走进Swagger</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">接口信息配置</span></a></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBoot笔记（五）","uid":"7e4642983a7bb3ca2238a4f0bb6ed9d8","slug":"SpringBoot笔记（五）","date":"2022-03-05T14:39:15.395Z","updated":"2022-03-05T14:40:10.422Z","comments":true,"path":"api/articles/SpringBoot笔记（五）.json","keywords":null,"cover":[],"text":" Linux操作系统与项目部署注意：本版块会涉及到操作系统相关知识。 现在，几乎所有智能设备都有一个自己的操作系统，比如我们的家用个人电脑，基本都是预装Windows操作系统，我们的手机也有Android和iOS操作系统，还有程序员比较青睐的MacBook，预装MacOS操作系统...","link":"","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"SpringBoot笔记（三）","uid":"25a60a06ed42cd757ab0410c2846114a","slug":"SpringBoot笔记（三）","date":"2022-03-05T14:38:57.839Z","updated":"2022-03-05T14:39:50.184Z","comments":true,"path":"api/articles/SpringBoot笔记（三）.json","keywords":null,"cover":[],"text":" Redis数据库灵魂拷问：不是学了MySQL吗，存数据也能存了啊，又学一个数据库干嘛？ 在前面我们学习了MySQL数据库，它是一种传统的关系型数据库，我们可以使用MySQL来更好地管理和组织我们的数据，虽然在小型Web应用下，只需要一个MySQL+Mybatis自带的缓存系统就...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"20 mins."},"categories":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/categories/SpringBoot笔记.json"}],"tags":[{"name":"SpringBoot笔记","slug":"SpringBoot笔记","count":5,"path":"api/tags/SpringBoot笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}