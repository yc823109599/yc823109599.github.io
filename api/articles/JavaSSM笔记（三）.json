{"title":"JavaSSM笔记（三）","uid":"7706992de04d833db29722d37e1933b8","slug":"JavaSSM笔记（三）","date":"2022-03-05T16:22:50.343Z","updated":"2022-03-05T16:24:05.940Z","comments":true,"path":"api/articles/JavaSSM笔记（三）.json","keywords":null,"cover":[],"content":"<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp3.ssl.qhimg.com%2Ft0166542ac0759ab525.png&refer=http%3A%2F%2Fp3.ssl.qhimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1642428815&t=f486dc0d3f2581c0afaf0cce7eaa0d57\" alt=\"img\"></p>\n<h1 id=\"SpringSecurity\"><a href=\"#SpringSecurity\" class=\"headerlink\" title=\"SpringSecurity\"></a>SpringSecurity</h1><p>本章我们会一边讲解SpringSecurity框架，一边从头开始编写图书管理系统。</p>\n<p>  SpringSecurity是一个基于Spring开发的非常强大的权限验证框架，其核心功能包括：</p>\n<ul>\n<li>认证 （用户登录）</li>\n<li>授权 （此用户能够做哪些事情）</li>\n<li>攻击防护 （防止伪造身份攻击）</li>\n</ul>\n<p>我们为什么需要使用更加专业的全新验证框架，还要从CSRF说起。</p>\n<h2 id=\"CSRF跨站请求伪造攻击\"><a href=\"#CSRF跨站请求伪造攻击\" class=\"headerlink\" title=\"CSRF跨站请求伪造攻击\"></a>CSRF跨站请求伪造攻击</h2><p>我们时常会在QQ上收到别人发送的钓鱼网站链接，只要你在上面登陆了你的QQ账号，那么不出意外，你的号已经在别人手中了。实际上这一类网站都属于恶意网站，专门用于盗取他人信息，执行非法操作，甚至获取他人账户中的财产，非法转账等。而这里，我们需要了解一种比较容易发生的恶意操作，从不法分子的角度去了解整个流程。</p>\n<p>我们在JavaWeb阶段已经了解了Session和Cookie的机制，在一开始的时候，服务端会给浏览器一个名为JSESSION的Cookie信息作为会话的唯一凭据，只要用户携带此Cookie访问我们的网站，那么我们就可以认定此会话属于哪个浏览器。因此，只要此会话的用户执行了登录操作，那么就可以随意访问个人信息等内容。</p>\n<p>比如现在，我们的服务器新增了一个转账的接口，用户登录之后，只需要使用POST请求携带需要转账的金额和转账人访问此接口就可以进行转账操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index(HttpSession session)&#123;\n    session.setAttribute(&quot;login&quot;, true);   &#x2F;&#x2F;这里就正常访问一下index表示登陆\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(value &#x3D; &quot;&#x2F;pay&quot;, method &#x3D; RequestMethod.POST, produces &#x3D; &quot;text&#x2F;html;charset&#x3D;utf-8&quot;) &#x2F;&#x2F;这里要设置一下produces不然会乱码\n@ResponseBody\npublic String pay(String account,\n                  int amount,\n                  @SessionAttribute(&quot;login&quot;) Boolean isLogin)&#123;\n    if (isLogin) return &quot;成功转账 ￥&quot;+amount+&quot; 给：&quot;+account;\n    else return &quot;转账失败，您没有登陆！&quot;;\n&#125;</code></pre>\n\n<p>那么，大家有没有想过这样一个问题，我们为了搜索学习资料时可能一不小心访问了一个恶意网站，而此网站携带了这样一段内容：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;\n    &lt;title&gt;我是(恶)学(意)习网站&lt;&#x2F;title&gt;\n&lt;&#x2F;head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;div&gt;对不起，您还没有充值本站的学习会员，请先充值后再观看学习视频&lt;&#x2F;div&gt;\n        &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;mvc&#x2F;pay&quot; method&#x3D;&quot;post&quot;&gt;\n            &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;account&quot; value&#x3D;&quot;hacker&quot; hidden&gt;\n            &lt;input type&#x3D;&quot;number&quot; name&#x3D;&quot;amount&quot; value&#x3D;&quot;666666&quot; hidden&gt;\n            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;点我充值会员，观看完整视频&quot;&gt;\n        &lt;&#x2F;form&gt;\n    &lt;&#x2F;div&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>注意这个页面并不是我们官方提供的页面，而是不法分子搭建的恶意网站。我们发现此页面中有一个表单，但是表单中的两个输入框被隐藏了，而我们看到的只有一个按钮，我们不知道这是一个表单，也不知道表单会提交给那个地址，这时整个页面就非常有迷惑性了。如果我们点击此按钮，那么整个表单的数据会以POST的形式发送给我们的服务端（会携带之前登陆我们网站的Cookie信息），但是这里很明显是另一个网站跳转，通过这样的方式，恶意网站就成功地在我们毫不知情的情况下引导我们执行了转账操作，当你发现上当受骗时，钱已经被转走了。</p>\n<p>而这种构建恶意页面，引导用户访问对应网站执行操作的方式称为：<strong>跨站请求伪造</strong>（CSRF，Cross Site Request Forgery）</p>\n<p>显然，我们之前编写的图书管理系统就存在这样的安全漏洞，而SpringSecurity就很好地解决了这样的问题。</p>\n<hr>\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><p>我们依然使用之前的模板来搭建图书管理系统项目。</p>\n<p>导入以下依赖：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;!-- 建议为各个依赖进行分类，到后期我们的项目可能会导入很多依赖，添加注释会大幅度提高阅读效率 --&gt;\n&lt;dependencies&gt;\n    &lt;!--  Spring框架依赖  --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-security-web&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.5.3&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n  \t&lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-security-config&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.5.3&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;5.3.14&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n\n    &lt;!--  持久层框架依赖  --&gt;\n\t\t&lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;8.0.27&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;2.0.6&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;3.5.7&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;5.3.14&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.zaxxer&lt;&#x2F;groupId&gt;\n            &lt;artifactId&gt;HikariCP&lt;&#x2F;artifactId&gt;\n            &lt;version&gt;3.4.5&lt;&#x2F;version&gt;\n        &lt;&#x2F;dependency&gt;\n\n    &lt;!--  其他工具框架依赖：Lombok、Slf4j  --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.18.22&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;slf4j-jdk14&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;1.7.32&lt;&#x2F;version&gt;\n    &lt;&#x2F;dependency&gt;\n\n    &lt;!--  ServletAPI  --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;4.0.1&lt;&#x2F;version&gt;\n        &lt;scope&gt;provided&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;\n\n    &lt;!--  JUnit依赖  --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;junit-jupiter-api&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;\n        &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.junit.jupiter&lt;&#x2F;groupId&gt;\n        &lt;artifactId&gt;junit-jupiter-engine&lt;&#x2F;artifactId&gt;\n        &lt;version&gt;$&#123;junit.version&#125;&lt;&#x2F;version&gt;\n        &lt;scope&gt;test&lt;&#x2F;scope&gt;\n    &lt;&#x2F;dependency&gt;\n&lt;&#x2F;dependencies&gt;</code></pre>\n\n<p>接着创建Initializer来配置Web应用程序：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MvcInitializer extends AbstractAnnotationConfigDispatcherServletInitializer &#123;\n\n    @Override\n    protected Class&lt;?&gt;[] getRootConfigClasses() &#123;\n        return new Class[]&#123;RootConfiguration.class&#125;;\n    &#125;\n\n    @Override\n    protected Class&lt;?&gt;[] getServletConfigClasses() &#123;\n        return new Class[]&#123;MvcConfiguration.class&#125;;\n    &#125;\n\n    @Override\n    protected String[] getServletMappings() &#123;\n        return new String[]&#123;&quot;&#x2F;&quot;&#125;;\n    &#125;\n&#125;</code></pre>\n\n<p>创建Mvc配置类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ComponentScan(&quot;book.manager.controller&quot;)\n@Configuration\n@EnableWebMvc\npublic class MvcConfiguration implements WebMvcConfigurer &#123;\n\n    &#x2F;&#x2F;我们需要使用ThymeleafViewResolver作为视图解析器，并解析我们的HTML页面\n    @Bean\n    public ThymeleafViewResolver thymeleafViewResolver(@Autowired SpringTemplateEngine springTemplateEngine)&#123;\n        ThymeleafViewResolver resolver &#x3D; new ThymeleafViewResolver();\n        resolver.setOrder(1);\n        resolver.setCharacterEncoding(&quot;UTF-8&quot;);\n        resolver.setTemplateEngine(springTemplateEngine);\n        return resolver;\n    &#125;\n\n    &#x2F;&#x2F;配置模板解析器\n    @Bean\n    public SpringResourceTemplateResolver templateResolver()&#123;\n        SpringResourceTemplateResolver resolver &#x3D; new SpringResourceTemplateResolver();\n        resolver.setSuffix(&quot;.html&quot;);\n        resolver.setPrefix(&quot;&#x2F;WEB-INF&#x2F;template&#x2F;&quot;);\n        return resolver;\n    &#125;\n\n    &#x2F;&#x2F;配置模板引擎Bean\n    @Bean\n    public SpringTemplateEngine springTemplateEngine(@Autowired ITemplateResolver resolver)&#123;\n        SpringTemplateEngine engine &#x3D; new SpringTemplateEngine();\n        engine.setTemplateResolver(resolver);\n        return engine;\n    &#125;\n\n    &#x2F;&#x2F;开启静态资源处理\n    @Override\n    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) &#123;\n        configurer.enable();\n    &#125;\n\n    &#x2F;&#x2F;静态资源路径配置\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;\n        registry.addResourceHandler(&quot;&#x2F;static&#x2F;**&quot;).addResourceLocations(&quot;&#x2F;WEB-INF&#x2F;static&#x2F;&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>创建Root配置类：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\npublic class RootConfiguration &#123;\n\n&#125;</code></pre>\n\n<p>最后创建一个专用于响应页面的Controller即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 专用于处理页面响应的控制器\n *&#x2F;\n@Controller\npublic class PageController &#123;\n\n    @RequestMapping(&quot;&#x2F;index&quot;)\n    public String login()&#123;\n        return &quot;index&quot;;\n    &#125;\n&#125;</code></pre>\n\n<p>接着我们需要将前端页面放到对应的文件夹中，然后开启服务器并通过浏览器，成功访问。</p>\n<p>接着我们需要配置SpringSecurity，与Mvc一样，需要一个初始化器：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class SecurityInitializer extends AbstractSecurityWebApplicationInitializer &#123;\n    &#x2F;&#x2F;不用重写任何内容\n  \t&#x2F;&#x2F;这里实际上会自动注册一个Filter，SpringSecurity底层就是依靠N个过滤器实现的，我们之后再探讨\n&#125;</code></pre>\n\n<p>接着我们需要再创建一个配置类用于配置SpringSecurity：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter &#123;\n\t\t&#x2F;&#x2F;继承WebSecurityConfigurerAdapter，之后会进行配置\n&#125;</code></pre>\n\n<p>接着在根容器中添加此配置文件即可：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected Class&lt;?&gt;[] getRootConfigClasses() &#123;\n    return new Class[]&#123;RootConfiguration.class, SecurityConfiguration.class&#125;;\n&#125;</code></pre>\n\n<p>这样，SpringSecurity的配置就完成了，我们再次运行项目，会发现无法进入的我们的页面中，无论我们访问哪个页面，都会进入到SpringSecurity为我们提供的一个默认登录页面，之后我们会讲解如何进行配置。</p>\n<p>至此，项目环境搭建完成。</p>\n<hr>\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><h3 id=\"直接认证\"><a href=\"#直接认证\" class=\"headerlink\" title=\"直接认证\"></a>直接认证</h3><p>既然我们的图书管理系统要求用户登录之后才能使用，所以我们首先要做的就是实现用户验证，要实现用户验证，我们需要进行一些配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n    BCryptPasswordEncoder encoder &#x3D; new BCryptPasswordEncoder();  &#x2F;&#x2F;这里使用SpringSecurity提供的BCryptPasswordEncoder\n    auth\n            .inMemoryAuthentication() &#x2F;&#x2F;直接验证方式，之后会讲解使用数据库验证\n            .passwordEncoder(encoder) &#x2F;&#x2F;密码加密器\n            .withUser(&quot;test&quot;)   &#x2F;&#x2F;用户名\n            .password(encoder.encode(&quot;123456&quot;))   &#x2F;&#x2F;这里需要填写加密后的密码\n            .roles(&quot;user&quot;);   &#x2F;&#x2F;用户的角色（之后讲解）\n&#125;</code></pre>\n\n<p>SpringSecurity的密码校验并不是直接使用原文进行比较，而是使用加密算法将密码进行加密（更准确地说应该进行Hash处理，此过程是不可逆的，无法解密），最后将用户提供的密码以同样的方式加密后与密文进行比较。对于我们来说，用户提供的密码属于隐私信息，直接明文存储并不好，而且如果数据库内容被窃取，那么所有用户的密码将全部泄露，这是我们不希望看到的结果，我们需要一种既能隐藏用户密码也能完成认证的机制，而Hash处理就是一种很好的解决方案，通过将用户的密码进行Hash值计算，计算出来的结果无法还原为原文，如果需要验证是否与此密码一致，那么需要以同样的方式加密再比较两个Hash值是否一致，这样就很好的保证了用户密码的安全性。</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimages.10qianwan.com%2F10qianwan%2F20180223%2Fb_1_201802231459287319.jpg&refer=http%3A%2F%2Fimages.10qianwan.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643122575&t=da2d04d86d4869d3054fb9a861ad1824\" alt=\"点击查看源网页\"></p>\n<p>我们这里使用的是SpringSecurity提供的BCryptPasswordEncoder，至于加密过程，这里不做深入讲解。</p>\n<p>现在，我们可以尝试使用此账号登录，在登录后，就可以随意访问我们的网站内容了。</p>\n<h3 id=\"使用数据库认证\"><a href=\"#使用数据库认证\" class=\"headerlink\" title=\"使用数据库认证\"></a>使用数据库认证</h3><p>前面我们已经实现了直接认证的方式，那么如何将其连接到数据库，通过查询数据库中的内容来进行用户登录呢？</p>\n<p>首先我们需要将加密后的密码添加到数据库中作为用户密码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MainTest &#123;\n\n    @Test\n    public void test()&#123;\n        BCryptPasswordEncoder encoder &#x3D; new BCryptPasswordEncoder();\n        System.out.println(encoder.encode(&quot;123456&quot;));\n    &#125;\n&#125;</code></pre>\n\n<p>这里编写一个测试来完成。</p>\n<p>然后我们需要创建一个Service实现，实现的是UserDetailsService，它支持我们自己返回一个UserDetails对象，我们只需直接返回一个包含数据库中的用户名、密码等信息的UserDetails即可，SpringSecurity会自动进行比对。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserAuthService implements UserDetailsService &#123;\n\n    @Resource\n    UserMapper mapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException &#123;\n        String password &#x3D; mapper.getPasswordByUsername(s);  &#x2F;&#x2F;从数据库根据用户名获取密码\n        if(password &#x3D;&#x3D; null)\n            throw new UsernameNotFoundException(&quot;登录失败，用户名或密码错误！&quot;);\n        return User   &#x2F;&#x2F;这里需要返回UserDetails，SpringSecurity会根据给定的信息进行比对\n                .withUsername(s)\n                .password(password)   &#x2F;&#x2F;直接从数据库取的密码\n                .roles(&quot;user&quot;)   &#x2F;&#x2F;用户角色\n                .build();\n    &#125;\n&#125;</code></pre>\n\n<p>别忘了在配置类中进行扫描，将其注册为Bean，接着我们需要编写一个Mapper用于和数据库交互：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface UserMapper &#123;\n\n    @Select(&quot;select password from users where username &#x3D; #&#123;username&#125;&quot;)\n    String getPasswordByUsername(String username);\n&#125;</code></pre>\n\n<p>和之前一样，配置一下Mybatis和数据源：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@ComponentScans(&#123;\n        @ComponentScan(&quot;book.manager.service&quot;)\n&#125;)\n@MapperScan(&quot;book.manager.mapper&quot;)\n@Configuration\npublic class RootConfiguration &#123;\n    @Bean\n    public DataSource dataSource()&#123;\n        HikariDataSource dataSource &#x3D; new HikariDataSource();\n        dataSource.setJdbcUrl(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;study&quot;);\n        dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n        dataSource.setUsername(&quot;root&quot;);\n        dataSource.setPassword(&quot;123456&quot;);\n        return dataSource;\n    &#125;\n\n    @Bean\n    public SqlSessionFactoryBean sqlSessionFactoryBean(@Autowired DataSource dataSource)&#123;\n        SqlSessionFactoryBean bean &#x3D; new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        return bean;\n    &#125;\n&#125;</code></pre>\n\n<p>最后再修改一下Security配置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;\n    auth\n      .userDetailsService(service)   &#x2F;&#x2F;使用自定义的Service实现类进行验证\n      .passwordEncoder(new BCryptPasswordEncoder());   &#x2F;&#x2F;依然使用BCryptPasswordEncoder\n&#125;</code></pre>\n\n<p>这样，登陆就会从数据库中进行查询。</p>\n<h3 id=\"自定义登录界面\"><a href=\"#自定义登录界面\" class=\"headerlink\" title=\"自定义登录界面\"></a>自定义登录界面</h3><p>前面我们已经了解了如何实现数据库权限验证，那么现在我们接着来看看，如何将登陆页面修改为我们自定义的样式。</p>\n<p>首先我们要了解一下SpringSecurity是如何进行登陆验证的，我们可以观察一下默认的登陆界面中，表单内有哪些内容：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;div class&#x3D;&quot;container&quot;&gt;\n      &lt;form class&#x3D;&quot;form-signin&quot; method&#x3D;&quot;post&quot; action&#x3D;&quot;&#x2F;book_manager&#x2F;login&quot;&gt;\n        &lt;h2 class&#x3D;&quot;form-signin-heading&quot;&gt;Please sign in&lt;&#x2F;h2&gt;\n        &lt;p&gt;\n          &lt;label for&#x3D;&quot;username&quot; class&#x3D;&quot;sr-only&quot;&gt;Username&lt;&#x2F;label&gt;\n          &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; name&#x3D;&quot;username&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Username&quot; required&#x3D;&quot;&quot; autofocus&#x3D;&quot;&quot;&gt;\n        &lt;&#x2F;p&gt;\n        &lt;p&gt;\n          &lt;label for&#x3D;&quot;password&quot; class&#x3D;&quot;sr-only&quot;&gt;Password&lt;&#x2F;label&gt;\n          &lt;input type&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;Password&quot; required&#x3D;&quot;&quot;&gt;\n        &lt;&#x2F;p&gt;\n&lt;input name&#x3D;&quot;_csrf&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;83421936-b84b-44e3-be47-58bb2c14571a&quot;&gt;\n        &lt;button class&#x3D;&quot;btn btn-lg btn-primary btn-block&quot; type&#x3D;&quot;submit&quot;&gt;Sign in&lt;&#x2F;button&gt;\n      &lt;&#x2F;form&gt;\n&lt;&#x2F;div&gt;</code></pre>\n\n<p>我们发现，首先有一个用户名的输入框和一个密码的输入框，我们需要在其中填写用户名和密码，但是我们发现，除了这两个输入框以外，还有一个input标签，它是隐藏的，并且它存储了一串类似于Hash值的东西，名称为”_csrf”，其实看名字就知道，这玩意八成都是为了防止CSRF攻击而存在的。</p>\n<p>从Spring Security 4.0开始，默认情况下会启用CSRF保护，以防止CSRF攻击应用程序，Spring Security CSRF会针对PATCH，POST，PUT和DELETE方法的请求（不仅仅只是登陆请求，这里指的是任何请求路径）进行防护，而这里的登陆表单正好是一个POST类型的请求。在默认配置下，无论是否登陆，页面中只要发起了PATCH，POST，PUT和DELETE请求一定会被拒绝，并返回<strong>403</strong>错误<strong>（注意，这里是个究极大坑）</strong>，需要在请求的时候加入csrfToken才行，也就是”83421936-b84b-44e3-be47-58bb2c14571a”，正是csrfToken，如果提交的是表单类型的数据，那么表单中必须包含此Token字符串，键名称为”_csrf”；如果是JSON数据格式发送的，那么就需要在请求头中包含此Token字符串。</p>\n<p>综上所述，我们最后提交的登陆表单，除了必须的用户名和密码，还包含了一个csrfToken字符串用于验证，防止攻击。</p>\n<p>因此，我们在编写自己的登陆页面时，需要添加这样一个输入框：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;input type&#x3D;&quot;text&quot; th:name&#x3D;&quot;$&#123;_csrf.getParameterName()&#125;&quot; th:value&#x3D;&quot;$&#123;_csrf.token&#125;&quot; hidden&gt;</code></pre>\n\n<p>隐藏即可，但是必须要有，而Token的键名称和Token字符串可以通过Thymeleaf从Model中获取，SpringSecurity会自动将Token信息添加到Model中。</p>\n<p>接着我们就可以将我们自己的页面替换掉默认的页面了，我们需要重写另一个方法来实现：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\nprotected void configure(HttpSecurity http) throws Exception &#123;\n    http\n            .authorizeRequests()   &#x2F;&#x2F;首先需要配置哪些请求会被拦截，哪些请求必须具有什么角色才能访问\n            .antMatchers(&quot;&#x2F;static&#x2F;**&quot;).permitAll()    &#x2F;&#x2F;静态资源，使用permitAll来运行任何人访问（注意一定要放在前面）\n            .antMatchers(&quot;&#x2F;**&quot;).hasRole(&quot;user&quot;)     &#x2F;&#x2F;所有请求必须登陆并且是user角色才可以访问（不包含上面的静态资源）\n&#125;</code></pre>\n\n<p>首先我们需要配置拦截规则，也就是当用户未登录时，哪些路径可以访问，哪些路径不可以访问，如果不可以访问，那么会被自动重定向到登陆页面。</p>\n<p>接着我们需要配置表单登陆和登录页面：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.formLogin()       &#x2F;&#x2F;配置Form表单登陆\n.loginPage(&quot;&#x2F;login&quot;)       &#x2F;&#x2F;登陆页面地址（GET）\n.loginProcessingUrl(&quot;&#x2F;doLogin&quot;)    &#x2F;&#x2F;form表单提交地址（POST）\n.defaultSuccessUrl(&quot;&#x2F;index&quot;)    &#x2F;&#x2F;登陆成功后跳转的页面，也可以通过Handler实现高度自定义\n.permitAll()    &#x2F;&#x2F;登陆页面也需要允许所有人访问</code></pre>\n\n<p>需要配置登陆页面的地址和登陆请求发送的地址，这里登陆页面填写为<code>/login</code>，登陆请求地址为<code>/doLogin</code>，登陆页面需要我们自己去编写Controller来实现，登陆请求提交处理由SpringSecurity提供，只需要写路径就可以了。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;login&quot;)\npublic String login()&#123;\n    return &quot;login&quot;;\n&#125;</code></pre>\n\n<p>配置好后，我们还需要配置一下退出登陆操作：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.and()\n.logout()\n.logoutUrl(&quot;&#x2F;logout&quot;)    &#x2F;&#x2F;退出登陆的请求地址\n.logoutSuccessUrl(&quot;&#x2F;login&quot;);    &#x2F;&#x2F;退出后重定向的地址</code></pre>\n\n<p>注意这里的退出登陆请求也必须是POST请求方式（因为开启了CSFR防护，需要添加Token），否则无法访问，这里主页面就这样写：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;body&gt;\n    &lt;form action&#x3D;&quot;logout&quot; method&#x3D;&quot;post&quot;&gt;\n        &lt;input type&#x3D;&quot;text&quot; th:name&#x3D;&quot;$&#123;_csrf.getParameterName()&#125;&quot; th:value&#x3D;&quot;$&#123;_csrf.token&#125;&quot; hidden&gt;\n        &lt;button&gt;退出登陆&lt;&#x2F;button&gt;\n    &lt;&#x2F;form&gt;\n&lt;&#x2F;body&gt;\n&lt;&#x2F;html&gt;</code></pre>\n\n<p>登陆成功后，点击退出登陆按钮，就可以成功退出并回到登陆界面了。</p>\n<p>由于我们在学习的过程中暂时用不到CSFR防护，因此可以将其关闭，这样直接使用get请求也可以退出登陆，并且登陆请求中无需再携带Token了，推荐关闭，因为不关闭后面可能会因为没考虑CSRF防护而遇到一连串的问题：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.and()\n.csrf().disable();</code></pre>\n\n<p>这样就可以直接关闭此功能了，但是注意，这样将会导致您的Web网站存在安全漏洞。（这里为了之后省事，就关闭保护了，但是一定要记得在不关闭的情况下需要携带Token访问）</p>\n<hr>\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h2><p>用户登录后，可能会根据用户当前是身份进行角色划分，比如我们最常用的QQ，一个QQ群里面，有群主、管理员和普通群成员三种角色，其中群主具有最高权限，群主可以管理整个群的任何板块，并且具有解散和升级群的资格，而管理员只有群主的一部分权限，只能用于日常管理，普通群成员则只能进行最基本的聊天操作。</p>\n<p>对于我们来说，用户的一个操作实际上就是在访问我们提供的<code>接口</code>(编写的对应访问路径的Servlet），比如登陆，就需要调用<code>/login</code>接口，退出登陆就要调用&#x2F;<code>logout</code>接口，而我们之前的图书管理系统中，新增图书、删除图书，所有的操作都有着对应的Servlet来进行处理。因此，从我们开发者的角度来说，决定用户能否使用某个功能，只需要决定用户是否能够访问对应的Servlet即可。</p>\n<p>我们可以大致像下面这样进行划分：</p>\n<ul>\n<li>群主：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code>、<code>/delete</code>、<code>/upgrade</code></li>\n<li>管理员：<code>/login</code>、<code>/logout</code>、<code>/chat</code>、<code>/edit</code></li>\n<li>普通群成员：<code>/login</code>、<code>/logout</code>、<code>/chat</code></li>\n</ul>\n<p>也就是说，我们需要做的就是指定哪些请求可以由哪些用户发起。</p>\n<p>SpringSecurity为我们提供了两种授权方式：</p>\n<ul>\n<li>基于权限的授权：只要拥有某权限的用户，就可以访问某个路径</li>\n<li>基于角色的授权：根据用户属于哪个角色来决定是否可以访问某个路径</li>\n</ul>\n<p>两者只是概念上的不同，实际上使用起来效果差不多。这里我们就先演示以角色方式来进行授权。</p>\n<h3 id=\"基于角色的授权\"><a href=\"#基于角色的授权\" class=\"headerlink\" title=\"基于角色的授权\"></a>基于角色的授权</h3><p>现在我们希望创建两个角色，普通用户和管理员，普通用户只能访问index页面，而管理员可以访问任何页面。</p>\n<p>首先我们需要对数据库中的角色表进行一些修改，添加一个用户角色字段，并创建一个新的用户，Test用户的角色为user，而Admin用户的角色为admin。</p>\n<p>接着我们需要配置SpringSecurity，决定哪些角色可以访问哪些页面：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">http\n        .authorizeRequests()\n        .antMatchers(&quot;&#x2F;static&#x2F;**&quot;).permitAll()\n  \t\t\t.antMatchers(&quot;&#x2F;index&quot;).hasAnyRole(&quot;user&quot;, &quot;admin&quot;)   &#x2F;&#x2F;index页面可以由user或admin访问\n        .anyRequest().hasRole(&quot;admin&quot;)   &#x2F;&#x2F;除了上面以外的所有内容，只能是admin访问</code></pre>\n\n<p>接着我们需要稍微修改一下验证逻辑，首先创建一个实体类用于表示数据库中的用户名、密码和角色：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\npublic class AuthUser &#123;\n    String username;\n    String password;\n    String role;\n&#125;</code></pre>\n\n<p>接着修改一下Mapper：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Mapper\npublic interface UserMapper &#123;\n\n    @Select(&quot;select * from users where username &#x3D; #&#123;username&#125;&quot;)\n    AuthUser getPasswordByUsername(String username);\n&#125;</code></pre>\n\n<p>最后再修改一下Service：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic UserDetails loadUserByUsername(String s) throws UsernameNotFoundException &#123;\n    AuthUser user &#x3D; mapper.getPasswordByUsername(s);\n    if(user &#x3D;&#x3D; null)\n        throw new UsernameNotFoundException(&quot;登录失败，用户名或密码错误！&quot;);\n    return User\n            .withUsername(user.getUsername())\n            .password(user.getPassword())\n            .roles(user.getRole())\n            .build();\n&#125;</code></pre>\n\n<p>现在我们可以尝试登陆，接着访问一下<code>/index</code>和<code>/admin</code>两个页面。</p>\n<h3 id=\"基于权限的授权\"><a href=\"#基于权限的授权\" class=\"headerlink\" title=\"基于权限的授权\"></a>基于权限的授权</h3><p>基于权限的授权与角色类似，需要以<code>hasAnyAuthority</code>或<code>hasAuthority</code>进行判断：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.anyRequest().hasAnyAuthority(&quot;page:index&quot;)</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Override\npublic UserDetails loadUserByUsername(String s) throws UsernameNotFoundException &#123;\n    AuthUser user &#x3D; mapper.getPasswordByUsername(s);\n    if(user &#x3D;&#x3D; null)\n        throw new UsernameNotFoundException(&quot;登录失败，用户名或密码错误！&quot;);\n    return User\n            .withUsername(user.getUsername())\n            .password(user.getPassword())\n            .authorities(&quot;page:index&quot;)\n            .build();\n&#125;</code></pre>\n\n<h3 id=\"使用注解判断权限\"><a href=\"#使用注解判断权限\" class=\"headerlink\" title=\"使用注解判断权限\"></a>使用注解判断权限</h3><p>除了直接配置以外，我们还可以以注解形式直接配置，首先需要在配置类（注意这里是在Mvc的配置类上添加，因为这里只针对Controller进行过滤，所有的Controller是由Mvc配置类进行注册的，如果需要为Service或其他Bean也启用权限判断，则需要在Security的配置类上添加）上开启：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true)\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter &#123;</code></pre>\n\n<p>接着我们可以直接在需要添加权限验证的请求映射上添加注解：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PreAuthorize(&quot;hasRole(&#39;user&#39;)&quot;)   &#x2F;&#x2F;判断是否为user角色，只有此角色才可以访问\n@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index()&#123;\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>通过添加<code>@PreAuthorize</code>注解，在执行之前判断判断权限，如果没有对应的权限或是对应的角色，将无法访问页面。</p>\n<p>这里其实是使用了SpEL表达式，相当于可以执行一些逻辑再得到结果，而不是直接传值，官方文档地址：<a href=\"https://docs.spring.io/spring-framework/docs/5.2.13.RELEASE/spring-framework-reference/core.html#expressions%EF%BC%8C%E5%86%85%E5%AE%B9%E6%AF%94%E8%BE%83%E5%A4%9A%EF%BC%8C%E4%B8%8D%E6%98%AF%E9%87%8D%E7%82%B9%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B0%B1%E4%B8%8D%E5%86%8D%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E4%BA%86%E3%80%82\">https://docs.spring.io/spring-framework/docs/5.2.13.RELEASE/spring-framework-reference/core.html#expressions，内容比较多，不是重点，这里就不再详细介绍了。</a></p>\n<p>同样的还有<code>@PostAuthorize</code>注解，但是它是在方法执行之后再进行拦截：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PostAuthorize(&quot;hasRole(&#39;user&#39;)&quot;)\n@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index()&#123;\n    System.out.println(&quot;执行了&quot;);\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>除了Controller以外，只要是由Spring管理的Bean都可以使用注解形式来控制权限，只要不具备访问权限，那么就无法执行方法并且会返回403页面。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Service\npublic class UserService &#123;\n\n    @PreAuthorize(&quot;hasAnyRole(&#39;user&#39;)&quot;)\n    public void test()&#123;\n        System.out.println(&quot;成功执行&quot;);\n    &#125;\n&#125;</code></pre>\n\n<p>注意Service是由根容器进行注册，需要在Security配置类上添加<code>@EnableGlobalMethodSecurity</code>注解才可以生效。与具有相同功能的还有<code>@Secure</code>但是它不支持SpEL表达式的权限表示形式，并且需要添加”ROLE_”前缀，这里就不做演示了。</p>\n<p>我们还可以使用<code>@PreFilter</code>和<code>@PostFilter</code>对集合类型的参数或返回值进行过滤。</p>\n<p>比如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PreFilter(&quot;filterObject.equals(&#39;lbwnb&#39;)&quot;)   &#x2F;&#x2F;filterObject代表集合中每个元素，只要满足条件的元素才会留下\npublic void test(List&lt;String&gt; list)&#123;\n    System.out.println(&quot;成功执行&quot;+list);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index()&#123;\n    List&lt;String&gt; list &#x3D; new LinkedList&lt;&gt;();\n    list.add(&quot;lbwnb&quot;);\n    list.add(&quot;yyds&quot;);\n    service.test(list);\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>与<code>@PreFilter</code>类似的<code>@PostFilter</code>这里就不做演示了，它用于处理返回值，使用方法是一样的。</p>\n<p>当有多个集合时，需要使用<code>filterTarget</code>进行指定：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PreFilter(value &#x3D; &quot;filterObject.equals(&#39;lbwnb&#39;)&quot;, filterTarget &#x3D; &quot;list2&quot;)\npublic void test(List&lt;String&gt; list, List&lt;String&gt; list2)&#123;\n    System.out.println(&quot;成功执行&quot;+list);\n&#125;</code></pre>\n\n<hr>\n<h2 id=\"记住我\"><a href=\"#记住我\" class=\"headerlink\" title=\"记住我\"></a>记住我</h2><p>我们的网站还有一个重要的功能，就是记住我，也就是说我们可以在登陆之后的一段时间内，无需再次输入账号和密码进行登陆，相当于服务端已经记住当前用户，再次访问时就可以免登陆进入，这是一个非常常用的功能。</p>\n<p>我们之前在JavaWeb阶段，使用本地Cookie存储的方式实现了记住我功能，但是这种方式并不安全，同时在代码编写上也比较麻烦，那么能否有一种更加高效的记住我功能实现呢？</p>\n<p>SpringSecurity为我们提供了一种优秀的实现，它为每个已经登陆的浏览器分配一个携带Token的Cookie，并且此Cookie默认会被保留14天，只要我们不清理浏览器的Cookie，那么下次携带此Cookie访问服务器将无需登陆，直接继续使用之前登陆的身份，这样显然比我们之前的写法更加简便。并且我们需要进行简单配置，即可开启记住我功能：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.and()\n.rememberMe()   &#x2F;&#x2F;开启记住我功能\n.rememberMeParameter(&quot;remember&quot;)  &#x2F;&#x2F;登陆请求表单中需要携带的参数，如果携带，那么本次登陆会被记住\n.tokenRepository(new InMemoryTokenRepositoryImpl())  &#x2F;&#x2F;这里使用的是直接在内存中保存的TokenRepository实现\n  &#x2F;&#x2F;TokenRepository有很多种实现，InMemoryTokenRepositoryImpl直接基于Map实现的，缺点就是占内存、服务器重启后记住我功能将失效\n  &#x2F;&#x2F;后面我们还会讲解如何使用数据库来持久化保存Token信息</code></pre>\n\n<p>接着我们需要在前端修改一下记住我勾选框的名称，将名称修改与上面一致，如果上面没有配置名称，那么默认使用”remember-me”作为名称：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember&quot; class&#x3D;&quot;ad-checkbox&quot;&gt;</code></pre>\n\n<p>现在我们启动服务器，在登陆时勾选记住我勾选框，观察Cookie的变化。</p>\n<p>虽然现在已经可以实现记住我功能了，但是还有一定的缺陷，如果服务器重新启动（因为Token信息全部存在HashMap中，也就是存在内存中），那么所有记录的Token信息将全部丢失，这时即使浏览器携带了之前的Token也无法恢复之前登陆的身份。</p>\n<p>我们可以将Token信息记录全部存放到数据库中（学习了Redis之后还可以放到Redis服务器中）利用数据库的持久化存储机制，即使服务器重新启动，所有的Token信息也不会丢失，配置数据库存储也很简单：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Resource\nPersistentTokenRepository repository;\n\n@Bean\npublic PersistentTokenRepository jdbcRepository(@Autowired DataSource dataSource)&#123;\n    JdbcTokenRepositoryImpl repository &#x3D; new JdbcTokenRepositoryImpl();  &#x2F;&#x2F;使用基于JDBC的实现\n    repository.setDataSource(dataSource);   &#x2F;&#x2F;配置数据源\n  \trepository.setCreateTableOnStartup(true);   &#x2F;&#x2F;启动时自动创建用于存储Token的表（建议第一次启动之后删除该行）\n    return repository;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">.and()\n.rememberMe()\n.rememberMeParameter(&quot;remember&quot;)\n.tokenRepository(repository)\n.tokenValiditySeconds(60 * 60 * 24 * 7)  &#x2F;&#x2F;Token的有效时间（秒）默认为14天</code></pre>\n\n<p>稍后服务器启动我们可以观察一下数据库，如果出现名为<code>persistent_logins</code>的表，那么证明配置没有问题。</p>\n<p>当我们登陆并勾选了记住我之后，那么数据库中会新增一条Token记录。</p>\n<hr>\n<h2 id=\"SecurityContext\"><a href=\"#SecurityContext\" class=\"headerlink\" title=\"SecurityContext\"></a>SecurityContext</h2><p>用户登录之后，怎么获取当前已经登录用户的信息呢？通过使用SecurityContextHolder就可以很方便地得到SecurityContext对象了，我们可以直接使用SecurityContext对象来获取当前的认证信息：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\n    public String index()&#123;\n        SecurityContext context &#x3D; SecurityContextHolder.getContext();\n        Authentication authentication &#x3D; context.getAuthentication();\n        User user &#x3D; (User) authentication.getPrincipal();\n        System.out.println(user.getUsername());\n        System.out.println(user.getAuthorities());\n        return &quot;index&quot;;\n    &#125;</code></pre>\n\n<p>通过SecurityContext我们就可以快速获取当前用户的名称和授权信息等。</p>\n<p>除了这种方式以外，我们还可以直接从Session中获取：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index(@SessionAttribute(&quot;SPRING_SECURITY_CONTEXT&quot;) SecurityContext context)&#123;\n    Authentication authentication &#x3D; context.getAuthentication();\n    User user &#x3D; (User) authentication.getPrincipal();\n    System.out.println(user.getUsername());\n    System.out.println(user.getAuthorities());\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>注意SecurityContextHolder是有一定的存储策略的，SecurityContextHolder中的SecurityContext对象会在一开始请求到来时被设定，至于存储方式其实是由存储策略决定的，如果我们这样编写，那么在默认情况下是无法获取到认证信息的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;index&quot;)\npublic String index()&#123;\n    new Thread(() -&gt; &#123;   &#x2F;&#x2F;创建一个子线程去获取\n        SecurityContext context &#x3D; SecurityContextHolder.getContext();\n        Authentication authentication &#x3D; context.getAuthentication();\n        User user &#x3D; (User) authentication.getPrincipal();   &#x2F;&#x2F;NPE\n        System.out.println(user.getUsername());\n        System.out.println(user.getAuthorities()); \n    &#125;);\n    return &quot;index&quot;;\n&#125;</code></pre>\n\n<p>这是因为SecurityContextHolder的存储策略默认是<code>MODE_THREADLOCAL</code>，它是基于ThreadLocal实现的，<code>getContext()</code>方法本质上调用的是对应的存储策略实现的方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static SecurityContext getContext() &#123;\n    return strategy.getContext();\n&#125;</code></pre>\n\n<p>SecurityContextHolderStrategy有三个实现类：</p>\n<ul>\n<li>GlobalSecurityContextHolderStrategy：全局模式，不常用</li>\n<li>ThreadLocalSecurityContextHolderStrategy：基于ThreadLocal实现，线程内可见</li>\n<li>InheritableThreadLocalSecurityContextHolderStrategy：基于InheritableThreadLocal实现，线程和子线程可见</li>\n</ul>\n<p>因此，如果上述情况需要在子线程中获取，那么需要修改SecurityContextHolder的存储策略，在初始化的时候设置：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@PostConstruct\npublic void init()&#123;\n    SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n&#125;</code></pre>\n\n<p>这样在子线程中也可以获取认证信息了。</p>\n<p>因为用户的验证信息是基于SecurityContext进行判断的，我们可以直接修改SecurityContext的内容，来手动为用户进行登陆：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@RequestMapping(&quot;&#x2F;auth&quot;)\n@ResponseBody\npublic String auth()&#123;\n    SecurityContext context &#x3D; SecurityContextHolder.getContext();  &#x2F;&#x2F;获取SecurityContext对象（当前会话肯定是没有登陆的）\n    UsernamePasswordAuthenticationToken token &#x3D; new UsernamePasswordAuthenticationToken(&quot;Test&quot;, null,\n            AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;ROLE_user&quot;));  &#x2F;&#x2F;手动创建一个UsernamePasswordAuthenticationToken对象，也就是用户的认证信息，角色需要添加ROLE_前缀，权限直接写\n    context.setAuthentication(token);  &#x2F;&#x2F;手动为SecurityContext设定认证信息\n    return &quot;Login success！&quot;;\n&#125;</code></pre>\n\n<p>在未登陆的情况下，访问此地址将直接进行手动登陆，再次访问<code>/index</code>页面，可以直接访问，说明手动设置认证信息成功。</p>\n<p><strong>疑惑：</strong>SecurityContext这玩意不是默认线程独占吗，那每次请求都是一个新的线程，按理说上一次的SecurityContext对象应该没了才对啊，为什么再次请求依然能够继续使用上一次SecurityContext中的认证信息呢？</p>\n<p>SecurityContext的生命周期：请求到来时从Session中取出，放入SecurityContextHolder中，请求结束时从SecurityContextHolder取出，并放到Session中，实际上就是依靠Session来存储的，一旦会话过期验证信息也跟着消失。</p>\n<hr>\n<h2 id=\"SpringSecurity原理\"><a href=\"#SpringSecurity原理\" class=\"headerlink\" title=\"SpringSecurity原理\"></a>SpringSecurity原理</h2><p><strong>注意：</strong>本小节内容作为选学内容，但是难度比前两章的源码部分简单得多。</p>\n<p>最后我们再来聊一下SpringSecurity的实现原理，它本质上是依靠N个Filter实现的，也就是一个完整的过滤链（注意这里是过滤器，不是拦截器）</p>\n<p>我们就从<code>AbstractSecurityWebApplicationInitializer</code>开始下手，我们来看看它配置了什么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;此方法会在启动时被调用\npublic final void onStartup(ServletContext servletContext) &#123;\n    this.beforeSpringSecurityFilterChain(servletContext);\n    if (this.configurationClasses !&#x3D; null) &#123;\n        AnnotationConfigWebApplicationContext rootAppContext &#x3D; new AnnotationConfigWebApplicationContext();\n        rootAppContext.register(this.configurationClasses);\n        servletContext.addListener(new ContextLoaderListener(rootAppContext));\n    &#125;\n\n    if (this.enableHttpSessionEventPublisher()) &#123;\n        servletContext.addListener(&quot;org.springframework.security.web.session.HttpSessionEventPublisher&quot;);\n    &#125;\n\n    servletContext.setSessionTrackingModes(this.getSessionTrackingModes());\n  \t&#x2F;&#x2F;重点在这里，这里插入了关键的FilterChain\n    this.insertSpringSecurityFilterChain(servletContext);\n    this.afterSpringSecurityFilterChain(servletContext);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void insertSpringSecurityFilterChain(ServletContext servletContext) &#123;\n    String filterName &#x3D; &quot;springSecurityFilterChain&quot;;\n  \t&#x2F;&#x2F;创建了一个DelegatingFilterProxy对象，它本质上也是一个Filter\n    DelegatingFilterProxy springSecurityFilterChain &#x3D; new DelegatingFilterProxy(filterName);\n    String contextAttribute &#x3D; this.getWebApplicationContextAttribute();\n    if (contextAttribute !&#x3D; null) &#123;\n        springSecurityFilterChain.setContextAttribute(contextAttribute);\n    &#125;\n\t\t&#x2F;&#x2F;通过ServletContext注册DelegatingFilterProxy这个Filter\n    this.registerFilter(servletContext, true, filterName, springSecurityFilterChain);\n&#125;</code></pre>\n\n<p>我们接着来看看，<code>DelegatingFilterProxy</code>在做什么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;这个是初始化方法，它由GenericFilterBean（父类）定义，在afterPropertiesSet方法中被调用\nprotected void initFilterBean() throws ServletException &#123;\n    synchronized(this.delegateMonitor) &#123;\n        if (this.delegate &#x3D;&#x3D; null) &#123;\n            if (this.targetBeanName &#x3D;&#x3D; null) &#123;\n                this.targetBeanName &#x3D; this.getFilterName();\n            &#125;\n\n            WebApplicationContext wac &#x3D; this.findWebApplicationContext();\n            if (wac !&#x3D; null) &#123;\n              \t&#x2F;&#x2F;耐心点，套娃很正常\n                this.delegate &#x3D; this.initDelegate(wac);\n            &#125;\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected Filter initDelegate(WebApplicationContext wac) throws ServletException &#123;\n    String targetBeanName &#x3D; this.getTargetBeanName();\n    Assert.state(targetBeanName !&#x3D; null, &quot;No target bean name set&quot;);\n  \t&#x2F;&#x2F;这里通过WebApplicationContext获取了一个Bean\n    Filter delegate &#x3D; (Filter)wac.getBean(targetBeanName, Filter.class);\n    if (this.isTargetFilterLifecycle()) &#123;\n        delegate.init(this.getFilterConfig());\n    &#125;\n\n  \t&#x2F;&#x2F;返回Filter\n    return delegate;\n&#125;</code></pre>\n\n<p>这里我们需要添加一个断点来查看到底获取到了什么Bean。</p>\n<p>通过断点调试，我们发现这里放回的对象是一个FilterChainProxy类型的，并且调用了它的初始化方法，但是FilterChainProxy类中并没有重写<code>init</code>方法或是<code>initFilterBean</code>方法。</p>\n<p>我们倒回去看，当Filter返回之后，<code>DelegatingFilterProxy</code>的一个成员变量<code>delegate</code>被赋值为得到的Filter，也就是FilterChainProxy对象，接着我们来看看，<code>DelegatingFilterProxy</code>是如何执行doFilter方法的。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;\n    Filter delegateToUse &#x3D; this.delegate;\n    if (delegateToUse &#x3D;&#x3D; null) &#123;\n        &#x2F;&#x2F;非正常情况，这里省略...\n    &#125;\n\t\t&#x2F;&#x2F;这里才是真正的调用，别忘了delegateToUse就是初始化的FilterChainProxy对象\n    this.invokeDelegate(delegateToUse, request, response, filterChain);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void invokeDelegate(Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;\n  &#x2F;&#x2F;最后实际上调用的是FilterChainProxy的doFilter方法\n    delegate.doFilter(request, response, filterChain);\n&#125;</code></pre>\n\n<p>所以我们接着来看，<code>FilterChainProxy</code>的doFilter方法又在干什么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n    boolean clearContext &#x3D; request.getAttribute(FILTER_APPLIED) &#x3D;&#x3D; null;\n    if (!clearContext) &#123;\n      \t&#x2F;&#x2F;真正的过滤在这里执行\n        this.doFilterInternal(request, response, chain);\n    &#125; else &#123;\n        &#x2F;&#x2F;...\n    &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n    FirewalledRequest firewallRequest &#x3D; this.firewall.getFirewalledRequest((HttpServletRequest)request);\n    HttpServletResponse firewallResponse &#x3D; this.firewall.getFirewalledResponse((HttpServletResponse)response);\n  \t&#x2F;&#x2F;这里获取了一个Filter列表，实际上SpringSecurity就是由N个过滤器实现的，这里获取的都是SpringSecurity提供的过滤器\n  \t&#x2F;&#x2F;但是请注意，经过我们之前的分析，实际上真正注册的Filter只有DelegatingFilterProxy\n  \t&#x2F;&#x2F;而这里的Filter列表中的所有Filter并没有被注册，而是在这里进行内部调用\n    List&lt;Filter&gt; filters &#x3D; this.getFilters((HttpServletRequest)firewallRequest);\n  \t&#x2F;&#x2F;只要Filter列表不是空，就依次执行内置的Filter\n    if (filters !&#x3D; null &amp;&amp; filters.size() !&#x3D; 0) &#123;\n        if (logger.isDebugEnabled()) &#123;\n            logger.debug(LogMessage.of(() -&gt; &#123;\n                return &quot;Securing &quot; + requestLine(firewallRequest);\n            &#125;));\n        &#125;\n\t\t\t\t&#x2F;&#x2F;这里创建一个虚拟的过滤链，过滤流程是由SpringSecurity自己实现的\n        FilterChainProxy.VirtualFilterChain virtualFilterChain &#x3D; new FilterChainProxy.VirtualFilterChain(firewallRequest, chain, filters);\n      \t&#x2F;&#x2F;调用虚拟过滤链的doFilter\n        virtualFilterChain.doFilter(firewallRequest, firewallResponse);\n    &#125; else &#123;\n        if (logger.isTraceEnabled()) &#123;\n            logger.trace(LogMessage.of(() -&gt; &#123;\n                return &quot;No security for &quot; + requestLine(firewallRequest);\n            &#125;));\n        &#125;\n\n        firewallRequest.reset();\n        chain.doFilter(firewallRequest, firewallResponse);\n    &#125;\n&#125;</code></pre>\n\n<p>我们来看一下虚拟过滤链的doFilter是怎么处理的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;看似没有任何循环，实际上就是一个循环，是一个递归调用\npublic void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException &#123;\n  \t&#x2F;&#x2F;判断是否已经通过全部的内置过滤器，定位是否等于当前大小\n    if (this.currentPosition &#x3D;&#x3D; this.size) &#123;\n        if (FilterChainProxy.logger.isDebugEnabled()) &#123;\n            FilterChainProxy.logger.debug(LogMessage.of(() -&gt; &#123;\n                return &quot;Secured &quot; + FilterChainProxy.requestLine(this.firewalledRequest);\n            &#125;));\n        &#125;\n\n        this.firewalledRequest.reset();\n      \t&#x2F;&#x2F;所有的内置过滤器已经完成，按照正常流程走DelegatingFilterProxy的下一个Filter\n      \t&#x2F;&#x2F;也就是说这里之后就与DelegatingFilterProxy没有任何关系了，该走其他过滤器就走其他地方配置的过滤器，SpringSecurity的过滤操作已经结束\n        this.originalChain.doFilter(request, response);\n    &#125; else &#123;\n      \t&#x2F;&#x2F;定位自增\n        ++this.currentPosition;\n      \t&#x2F;&#x2F;获取当前定位的Filter\n        Filter nextFilter &#x3D; (Filter)this.additionalFilters.get(this.currentPosition - 1);\n        if (FilterChainProxy.logger.isTraceEnabled()) &#123;\n            FilterChainProxy.logger.trace(LogMessage.format(&quot;Invoking %s (%d&#x2F;%d)&quot;, nextFilter.getClass().getSimpleName(), this.currentPosition, this.size));\n        &#125;\n\t\t\t\t&#x2F;&#x2F;执行内部过滤器的doFilter方法，传入当前对象本身作为Filter，执行如果成功，那么一定会再次调用当前对象的doFilter方法\n      \t&#x2F;&#x2F;可能最不理解的就是这里，执行的难道不是内部其他Filter的doFilter方法吗，怎么会让当前对象的doFilter方法递归调用呢？\n      \t&#x2F;&#x2F;没关系，了解了其中一个内部过滤器就明白了\n        nextFilter.doFilter(request, response, this);\n    &#125;\n&#125;</code></pre>\n\n<p>因此，我们差不多已经了解了整个SpringSecurity的实现机制了，那么我们来看几个内部的过滤器分别在做什么。</p>\n<p>比如用于处理登陆的过滤器<code>UsernamePasswordAuthenticationFilter</code>，它继承自<code>AbstractAuthenticationProcessingFilter</code>，我们来看看它是怎么进行过滤的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n    this.doFilter((HttpServletRequest)request, (HttpServletResponse)response, chain);\n&#125;\n\nprivate void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123;\n  \t&#x2F;&#x2F;如果不是登陆请求，那么根本不会理这个请求\n    if (!this.requiresAuthentication(request, response)) &#123;\n      \t&#x2F;&#x2F;直接调用传入的FilterChain的doFilter方法\n      \t&#x2F;&#x2F;而这里传入的正好是VirtualFilterChain对象\n      \t&#x2F;&#x2F;这下知道为什么上面说是递归了吧\n        chain.doFilter(request, response);\n    &#125; else &#123;\n      \t&#x2F;&#x2F;如果是登陆请求，那么会执行登陆请求的相关逻辑，注意执行过程中出现任何问题都会抛出异常\n      \t&#x2F;&#x2F;比如用户名和密码错误，我们之前也已经测试过了，会得到一个BadCredentialsException\n        try &#123;\n          \t&#x2F;&#x2F;进行认证\n            Authentication authenticationResult &#x3D; this.attemptAuthentication(request, response);\n            if (authenticationResult &#x3D;&#x3D; null) &#123;\n                return;\n            &#125;\n\n            this.sessionStrategy.onAuthentication(authenticationResult, request, response);\n            if (this.continueChainBeforeSuccessfulAuthentication) &#123;\n                chain.doFilter(request, response);\n            &#125;\n\n          \t&#x2F;&#x2F;如果一路绿灯，没有报错，那么验证成功，执行successfulAuthentication\n            this.successfulAuthentication(request, response, chain, authenticationResult);\n        &#125; catch (InternalAuthenticationServiceException var5) &#123;\n            this.logger.error(&quot;An internal error occurred while trying to authenticate the user.&quot;, var5);\n          \t&#x2F;&#x2F;验证失败，会执行unsuccessfulAuthentication\n            this.unsuccessfulAuthentication(request, response, var5);\n        &#125; catch (AuthenticationException var6) &#123;\n            this.unsuccessfulAuthentication(request, response, var6);\n        &#125;\n\n    &#125;\n&#125;</code></pre>\n\n<p>那么我们来看看successfulAuthentication和unsuccessfulAuthentication分别做了什么：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException &#123;\n  \t&#x2F;&#x2F;向SecurityContextHolder添加认证信息，我们可以通过SecurityContextHolder对象获取当前登陆的用户\n    SecurityContextHolder.getContext().setAuthentication(authResult);\n    if (this.logger.isDebugEnabled()) &#123;\n        this.logger.debug(LogMessage.format(&quot;Set SecurityContextHolder to %s&quot;, authResult));\n    &#125;\n\n  \t&#x2F;&#x2F;记住我实现\n    this.rememberMeServices.loginSuccess(request, response, authResult);\n    if (this.eventPublisher !&#x3D; null) &#123;\n        this.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n    &#125;\n\t\t\n  \t&#x2F;&#x2F;调用默认的或是我们自己定义的AuthenticationSuccessHandler的onAuthenticationSuccess方法\n  \t&#x2F;&#x2F;这个根据我们配置文件决定\n  \t&#x2F;&#x2F;到这里其实页面就已经直接跳转了\n    this.successHandler.onAuthenticationSuccess(request, response, authResult);\n&#125;\n\nprotected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException &#123;\n  \t&#x2F;&#x2F;登陆失败会直接清理掉SecurityContextHolder中的认证信息\n    SecurityContextHolder.clearContext();\n    this.logger.trace(&quot;Failed to process authentication request&quot;, failed);\n    this.logger.trace(&quot;Cleared SecurityContextHolder&quot;);\n    this.logger.trace(&quot;Handling authentication failure&quot;);\n  \t&#x2F;&#x2F;登陆失败的记住我处理\n    this.rememberMeServices.loginFail(request, response);\n  \t&#x2F;&#x2F;同上，调用默认或是我们自己定义的AuthenticationFailureHandler\n    this.failureHandler.onAuthenticationFailure(request, response, failed);\n&#125;</code></pre>\n\n<p>了解了整个用户验证实现流程，其实其它的过滤器是如何实现的也就很容易联想到了，SpringSecurity的过滤器从某种意义上来说，更像是一个处理业务的Servlet，它做的事情不像是拦截，更像是完成自己对应的职责，只不过是使用了过滤器机制进行实现罢了。</p>\n<p>SecurityContextPersistenceFilter也是内置的Filter，可以尝试阅读一下其源码，了解整个SecurityContextHolder的运作原理，这里先说一下大致流程，各位可以依照整个流程按照源码进行推导：</p>\n<p>当过滤器链执行到SecurityContextPersistenceFilter时，它会从HttpSession中把SecurityContext对象取出来（是存在Session中的，跟随会话的消失而消失），然后放入SecurityContextHolder对象中。请求结束后，再把SecurityContext存入HttpSession中，并清除SecurityContextHolder内的SecurityContext对象。</p>\n<hr>\n<h2 id=\"完善功能\"><a href=\"#完善功能\" class=\"headerlink\" title=\"完善功能\"></a>完善功能</h2><p>在了解了SpringSecurity的大部分功能后，我们就来将整个网站的内容进行完善，登陆目前已经实现了，我们还需要实现以下功能：</p>\n<ul>\n<li>注册功能（仅针对于学生）</li>\n<li>角色分为同学和管理员<ul>\n<li>管理员负责上架、删除、更新书籍，查看所有同学的借阅列表</li>\n<li>同学可以借阅和归还书籍，以及查看自己的借阅列表</li>\n</ul>\n</li>\n</ul>\n<p>开始之前我们需要先配置一下Thymeleaf的SpringSecurity扩展，它针对SpringSecurity提供了更多额外的解析：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.thymeleaf.extras&lt;&#x2F;groupId&gt;\n    &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;&#x2F;artifactId&gt;\n    &lt;version&gt;3.0.4.RELEASE&lt;&#x2F;version&gt;\n&lt;&#x2F;dependency&gt;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;配置模板引擎Bean\n@Bean\npublic SpringTemplateEngine springTemplateEngine(@Autowired ITemplateResolver resolver)&#123;\n    SpringTemplateEngine engine &#x3D; new SpringTemplateEngine();\n    engine.setTemplateResolver(resolver);\n    engine.addDialect(new SpringSecurityDialect());   &#x2F;&#x2F;添加针对于SpringSecurity的方言\n    return engine;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;\n      xmlns:sec&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&#x2F;extras&#x2F;spring-security&quot;&gt;</code></pre>\n\n<p>下一章就是最后一章了，我们会深入讲解MySQL的高级部分，包括函数、存储过程、锁机制、索引以及存储引擎。</p>\n","text":" SpringSecurity本章我们会一边讲解SpringSecurity框架，一边从头开始编写图书管理系统。 SpringSecurity是一个基于Spring开发的非常强大的权限验证框架，其核心功能包括： 认证 （用户登录） 授权 （此用户能够做哪些事情） 攻击防护 （防止...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"37 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#SpringSecurity\"><span class=\"toc-text\">SpringSecurity</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">CSRF跨站请求伪造攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">开发环境搭建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">认证</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">直接认证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%A4%E8%AF%81\"><span class=\"toc-text\">使用数据库认证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E7%95%8C%E9%9D%A2\"><span class=\"toc-text\">自定义登录界面</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">授权</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">基于角色的授权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E6%9D%83%E9%99%90%E7%9A%84%E6%8E%88%E6%9D%83\"><span class=\"toc-text\">基于权限的授权</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%88%A4%E6%96%AD%E6%9D%83%E9%99%90\"><span class=\"toc-text\">使用注解判断权限</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E4%BD%8F%E6%88%91\"><span class=\"toc-text\">记住我</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SecurityContext\"><span class=\"toc-text\">SecurityContext</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringSecurity%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">SpringSecurity原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E5%96%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">完善功能</span></a></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaSSM笔记（四）","uid":"98f040fb8fb5c5ced4fb87fa4094e887","slug":"JavaSSM笔记（四）","date":"2022-03-05T16:22:54.848Z","updated":"2022-03-05T16:24:16.223Z","comments":true,"path":"api/articles/JavaSSM笔记（四）.json","keywords":null,"cover":[],"text":"MySQL高级在JavaWeb阶段，我们初步认识了MySQL数据库，包括一些基本操作，比如创建数据库、表、触发器，以及最基本的增删改查、事务等操作。而在此阶段，我们将继续深入学习MySQL，了解它的更多高级玩法，也相当于进行复习。 函数其实函数我们在之前已经接触到一部分了，在Ja...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaSSM笔记（二）","uid":"cb5396739d768c57aa162224d7506a32","slug":"JavaSSM笔记（二）","date":"2022-03-05T16:22:45.742Z","updated":"2022-03-05T16:23:57.708Z","comments":true,"path":"api/articles/JavaSSM笔记（二）.json","keywords":null,"cover":[],"text":" SpringMVC在前面学习完Spring框架技术之后，差不多会出现两批人：一批是听得云里雾里，依然不明白这个东西是干嘛的；还有一批就是差不多理解了核心思想，但是不知道这些东西该如何去发挥它的作用。在SpringMVC阶段，你就能逐渐够体会到Spring框架为我们带来的便捷之处...","link":"","photos":[],"count_time":{"symbolsCount":"46k","symbolsTime":"42 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}