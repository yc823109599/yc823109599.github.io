{"title":"JavaSSM笔记（四）","uid":"98f040fb8fb5c5ced4fb87fa4094e887","slug":"JavaSSM笔记（四）","date":"2022-03-05T16:22:54.848Z","updated":"2022-03-05T16:24:16.223Z","comments":true,"path":"api/articles/JavaSSM笔记（四）.json","keywords":null,"cover":[],"content":"<h1 id=\"MySQL高级\"><a href=\"#MySQL高级\" class=\"headerlink\" title=\"MySQL高级\"></a>MySQL高级</h1><p>在JavaWeb阶段，我们初步认识了MySQL数据库，包括一些基本操作，比如创建数据库、表、触发器，以及最基本的增删改查、事务等操作。而在此阶段，我们将继续深入学习MySQL，了解它的更多高级玩法，也相当于进行复习。</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>其实函数我们在之前已经接触到一部分了，在JavaWeb阶段，我们了解了聚集函数，聚集函数一般用作统计，包括：</p>\n<ul>\n<li>count([distinct]*)    统计所有的行数（distinct表示去重再统计，下同）</li>\n<li>count([distinct]列名)    统计某列的值总和</li>\n<li>sum([distinct]列名)    求一列的和（注意必须是数字类型的）</li>\n<li>avg([distinct]列名)    求一列的平均值（注意必须是数字类型）</li>\n<li>max([distinct]列名)    求一列的最大值</li>\n<li>min([distinct]列名)    求一列的最小值</li>\n</ul>\n<p>比如我们需要计算某个表一共有多少行：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT COUNT(*) FROM student</code></pre>\n\n<p>通过使用COUNT聚集函数，就可以快速统计并得到结果，比如我们想计算某一列上所有数字的和：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT SUM(sid) FROM student</code></pre>\n\n<p>通过SUM聚集函数，就可以快速计算每一列的和，实际上这些函数都是由系统提供的函数，我们可以直接使用。</p>\n<p>本版块我们会详细介绍各类系统函数以及如何编写自定义函数。</p>\n<h3 id=\"系统函数\"><a href=\"#系统函数\" class=\"headerlink\" title=\"系统函数\"></a>系统函数</h3><p>系统为我们提供的函数也是非常实用的，我们将会分为几个类型进行讲解。</p>\n<h4 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h4><p>处理字符串是一个比较重要的内容，我们可以使用字符串函数来帮助我们快速处理字符串，其中常用比如用于字符串分割的函数有：</p>\n<ul>\n<li>substring(字符串, 起始位置, 结束位置)     同Java中String类的substring一致，但是注意下标是从1开始，下同</li>\n<li>left(字符串, 长度)     从最左边向右截取字符串</li>\n<li>right(字符串, 长度)     从最右边向左截取字符串</li>\n</ul>\n<p>比如我们只想获取所有学生姓名的第二个字，那么可以像这样写：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT SUBSTRING(name, 2, 2) FROM student</code></pre>\n\n<p>比如我们想获取所有学生姓名的第一个字，可以像这样写：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT LEFT(name, 1) FROM student</code></pre>\n\n<p>我们还可以利用字符串函数来快速将所有的字母转换为大写字母或是快速转换为小写字母：</p>\n<ul>\n<li>upper(字符串)     字符串中的所有字母转换为大写字母</li>\n<li>lower(字符串)     字符串中的所有字母转换为小写字母</li>\n</ul>\n<p>比如我们希望将一个字符串所有字符专为大写：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT UPPER(&#39;abcdefg&#39;)</code></pre>\n\n<p>我们也可以像Java中那样直接对字符串中的内容进行替换：</p>\n<ul>\n<li>replace(字符串, 原文, 替换文)      同Java中String的replace效果</li>\n</ul>\n<p>比如现在我们希望将查询到的所有同学的名称中的<code>小</code>全部替换<code>大</code>：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT REPLACE(&#96;name&#96;, &#39;小&#39;, &#39;大&#39;) FROM student</code></pre>\n\n<p>字符串也支持进行拼接，系统提供了字符串的拼接函数：</p>\n<ul>\n<li>concat(字符串1, 字符串2)   连接两个字符串</li>\n</ul>\n<p>比如我们希望将查询到的所有同学的名称最后都添加一个<code>子</code>字：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT concat(name, &#39;子&#39;) FROM student</code></pre>\n\n<p>最后就是计算字符串的长度：</p>\n<ul>\n<li>length(字符串)    获取字符串长度（注意如果使用的是UTF-8编码格式，那么一个汉字占3字节，数字和字母占一个字节）</li>\n</ul>\n<p>比如我们要获取所有人名字的长度：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT LENGTH(&#96;name&#96;) FROM student</code></pre>\n\n<h4 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h4><p>MySQL提供的日期函数也非常实用，我们可以快速对日期进行操作，比如我们想要快速将日期添加N天，就可以使用：</p>\n<ul>\n<li>date_add(日期, interval 增量 单位)</li>\n</ul>\n<p>比如我们希望让2022-1-1向后5天：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DATE_ADD(&#39;2022-1-1&#39;,INTERVAL 5 day)</code></pre>\n\n<p>同理，向前1年：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DATE_ADD(&#39;2022-1-1&#39;,INTERVAL -1 year)</code></pre>\n\n<p>单位有：year（年）、month（月）、day（日）、hour（小时）、minute（分钟）、second（秒）</p>\n<p>我们还可以快速计算日期的间隔天数：</p>\n<ul>\n<li>datediff(日期1, 日期2)</li>\n</ul>\n<p>比如我们想计算2022年的2月有多少天：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DATEDIFF(&#39;2022-3-1&#39;,&#39;2022-2-1&#39;)</code></pre>\n\n<p>如果我们想快速获取当前时间的话，可以使用这些：</p>\n<ul>\n<li>curdate()     当前的日期</li>\n<li>curtime()     当前的时间</li>\n<li>now()    当前的日期+时间</li>\n</ul>\n<p>此函数之前我们在编写实战项目的时候已经使用过了，这里就不演示了。我们也可以单独获取时间中的某个值：</p>\n<ul>\n<li>day(日期)    获取日期是几号</li>\n<li>month(日期)   获取日期是几月</li>\n<li>year(日期)      获取日期是哪一年</li>\n</ul>\n<p>比如我们想获取今天是几号：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT DAY(NOW())</code></pre>\n\n<h4 id=\"数学函数\"><a href=\"#数学函数\" class=\"headerlink\" title=\"数学函数\"></a>数学函数</h4><p>数学函数比较常规，基本与Java的Math工具类一致，这里列出即可，各位可以自行尝试：</p>\n<ul>\n<li>abs(x)   求x的绝对值</li>\n<li>ceiling(x)   x向上取整</li>\n<li>floor(x)  x向下取整</li>\n<li>round(x, 精度)  x取四舍五入，遵循小数点精度 </li>\n<li>exp(x)   e的x次方</li>\n<li>rand()   0-1之间的随机数</li>\n<li>log(x)    x的对数</li>\n<li>pi()     π</li>\n<li>power(x, n)    x的n次方</li>\n<li>sqrt(x)     x的平方根</li>\n<li>sin(x)  cos(x)   tan(x)     三角函数（貌似没有arctan这类反函数？）</li>\n</ul>\n<h4 id=\"类型转换函数\"><a href=\"#类型转换函数\" class=\"headerlink\" title=\"类型转换函数\"></a>类型转换函数</h4><p>MySQL的类型转换也分为隐式类型转换和显示类型转换，首先我们来看看隐式类型转换：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT 1+&#39;2&#39;</code></pre>\n\n<p>虽然这句中既包含了数字和字符，但是字符串会被进行隐式转换（注意这里并不是按照字符的ASCII码转换，而是写的多少表示多少）所以最后得到的就是1+2的结果为3</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT CONCAT(1, &#39;2&#39;)</code></pre>\n\n<p>这里因为需要传入字符串类型的数据，但是我们给的是1这个数字，因此这里也会发生隐式类型转换，1会被直接转换为字符串的’1’，所以这里得到的结果是’12’</p>\n<p>在某些情况下，我们可能需要使用强制类型转换来将得到的数据转换成我们需要的数据类型，这时就需要用到类型转换函数了，MySQL提供了：</p>\n<ul>\n<li>cast(数据   as 数据类型)</li>\n</ul>\n<p>数据类型有以下几种：</p>\n<ul>\n<li>BINARY[(N)] ：二进制字符串，转换后长度小于N个字节</li>\n<li>CHAR[(N)] ：字符串，转换后长度小于N个字符</li>\n<li>DATE ：日期</li>\n<li>DATETIME ：日期时间</li>\n<li>DECIMAL[(M[,N])] ：浮点数，M为数字总位数(包括整数部分和小数部分)，N为小数点后的位数</li>\n<li>SIGNED [INTEGER] ：有符号整数</li>\n<li>TIME ：时间</li>\n<li>UNSIGNED [INTEGER] ：无符号整数</li>\n</ul>\n<p>比如我们现在需要将一个浮点数转换为一个整数：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT CAST(pi() AS SIGNED)</code></pre>\n\n<p>我们还可以将字符串转换为数字，会自动进行扫描，值得注意的是一旦遇到非数字的字符，会停止扫描：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT CAST(&#39;123abc456&#39; as SIGNED)</code></pre>\n\n<p>除了cast以外还有convert函数，功能比较相似，这里就不做讲解了。</p>\n<h4 id=\"流程控制函数\"><a href=\"#流程控制函数\" class=\"headerlink\" title=\"流程控制函数\"></a>流程控制函数</h4><p>MySQL还为我们提供了很多的逻辑判断函数，比如：</p>\n<ul>\n<li>if(条件表达式, 结果1, 结果2)    与Java中的三目运算符一致 a &gt; b ? “AAA” : “BBB”</li>\n<li>ifnull(值1, 值2)     如果值1为NULL则返回值2，否则返回值1</li>\n<li>nullif(值1, 值2)     如果值1与值2相等，那么返回NULL</li>\n<li>isnull(值)      判断值是否为NULL</li>\n</ul>\n<p>比如现在我们想判断：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT IF(1 &lt; 0,&#39;lbwnb&#39;,&#39;yyds&#39;)</code></pre>\n\n<p>通过判断函数，我们就可以很方便地进行一些条件判断操作。</p>\n<p>除了IF条件判断，我们还可以使用类似Switch一样的语句完成多分支结构：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \nCASE 2\n\tWHEN 1 THEN\n\t\t10\n\tELSE\n\t\t5\nEND;</code></pre>\n\n<p>我们也可以将自定义的判断条件放入When之后，它类似于else-if：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT \nCASE\n\tWHEN 3&gt;5 THEN\n\t\t10\n\tWHEN 0&lt;1 THEN\n\t\t11\n\tELSE\n\t\t5\nEND;</code></pre>\n\n<p>还有一个类似于Java中的Thread.sleep的函数，以秒为单位：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT sleep(10);</code></pre>\n\n<p>有关MySQL8.0新增的窗口函数这里暂时不做介绍。</p>\n<h3 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h3><p>除了使用系统为我们提供的函数以外，我们也可以自定义函数，并使用我们自定义的函数进行数据处理，唯一比较麻烦的就是函数定义后不能修改，只能删了重新写。</p>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>MySQL的函数与Java中的方法类似，也可以添加参数和返回值，可以通过<code>CREATE FUNCTION</code>创建函数：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE FUNCTION test() RETURNS INT\nBEGIN\nRETURN 666;\nEND</code></pre>\n\n<p>定义函数的格式为：</p>\n<ul>\n<li>create function 函数名称([参数列表]) returns 返回值类型</li>\n<li>begin 和 end 之间写函数的其他逻辑，begin和end就相当于Java中的花括号<code>&#123;  ...  &#125;</code></li>\n<li>return后紧跟返回的结果</li>\n</ul>\n<p>添加参数也很简单，我们只需要在函数名称括号中添加即可，注意类型需要写在参数名称后面：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE FUNCTION test(i INT) RETURNS INT\nBEGIN\nRETURN i * i;\nEND</code></pre>\n\n<p>我们可以在BEGIN和RETURN之间编写一些其他的逻辑，比如我们想要定义一个局部变量，并为其赋值：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT;\nSET a &#x3D; 10;\nRETURN i * i * a;\nEND</code></pre>\n\n<p>定义局部变量的格式为：</p>\n<ul>\n<li>declare 变量名称 变量类型 [, …]</li>\n<li>declare 变量名称 变量类型 default 默认值</li>\n</ul>\n<p>为变量赋值的格式为：</p>\n<ul>\n<li>set 变量名称 &#x3D; 值</li>\n</ul>\n<p>我们还可以在函数内部使用<code>select</code>语句，它可以直接从表中读取数据，并可以结合into关键字将查询结果赋值给变量：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT;\n-- select into from 语句\nSELECT COUNT(*) INTO a FROM student;\nRETURN a;\nEND</code></pre>\n\n<h4 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h4><p>接着我们来看一下如何使用流程控制语句，其中最关键的就是IF判断语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 10;\nIF a &gt; 10 THEN\n\tRETURN 1;\nELSE\n\tRETURN 2;\nEND IF;\nEND</code></pre>\n\n<p>IF分支语句的格式为：</p>\n<ul>\n<li>if 判断条件 then  … else if 判断条件 then …. else … end if;</li>\n</ul>\n<p>我们可以结合<code>exists</code>关键字来判断是否为NULL：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 0;\n-- IF EXISTS(SELECT * FROM student WHERE sid &#x3D; 100) THEN\nIF NOT EXISTS(SELECT * FROM student WHERE sid &#x3D; 100) THEN\n\tSET a &#x3D; 10;\nEND IF;\nRETURN a;\nEND</code></pre>\n\n<p>我们也可以在函数中使用switch语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 10;\nCASE a\n\tWHEN 10 THEN\n\t\tRETURN 2;\n\tELSE\n\t\tRETURN 1;\nEND CASE;\nEND</code></pre>\n\n<p>SWITCH分支语句的格式为：</p>\n<ul>\n<li>case 变量 when 具体值或是布尔表达式 then … when * then … else … end case;</li>\n</ul>\n<p>与Java不同的是，它支持使用布尔表达式：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 10;\nCASE\n\tWHEN 1 &lt; 5 THEN\n\t\tSET a &#x3D; 5;\n\tELSE\n\t\tSET a &#x3D; 10;\nEND CASE;\nRETURN a;\nEND</code></pre>\n\n<p>我们以类似于elseif的形式进行判断，其实和上面直接使用是一样的。</p>\n<p>我们接着来看循环语句，MySQL提供了三种循环语句，其中第一种是WHILE语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 10;\nWHILE a &lt; 11 DO\n\tSET a &#x3D; a + 1;\nEND WHILE;\nRETURN a;\nEND</code></pre>\n\n<p>格式为：</p>\n<ul>\n<li>while 循环条件 do …  end while;</li>\n</ul>\n<p>我们接着来看第二种循环语句，LOOP循环：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 10;\nlp1: LOOP\n  SET a &#x3D; a - 1;\n\tIF a &#x3D; 0 THEN\n\t\tLEAVE lp1; \n\tEND IF; \nEND LOOP lp1;\nRETURN a;\nEND</code></pre>\n\n<p>相比while语句，我们可以使用<code>LEAVE</code>精准控制结束哪个循环，有点类似于goto语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 0;\nlp1: LOOP\n  lp2: LOOP\n\tSET a &#x3D; a + 1;\n\tIF a &gt; 5 THEN\n\t\tLEAVE lp1; \n\tEND IF; \n\tEND LOOP lp2;\nEND LOOP lp1;\nRETURN a;\nEND</code></pre>\n\n<p>类似于Java中的goto写法（在JavaSE阶段已经讲解过）：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n    int a &#x3D; 0;\n    lp1: while (true)&#123;\n        lp2: while (true)&#123;\n            a++;\n            if(a &gt; 5) break lp1;\n        &#125;\n    &#125;\n    System.out.println(a);\n&#125;</code></pre>\n\n<p>它的语法格式如下：</p>\n<ul>\n<li>循环名称 loop …(可以插入leave语句结束) end loop 循环名称;</li>\n</ul>\n<p>接着我们来看最后一种循环语句，repeat语句：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\nDECLARE a INT DEFAULT 0;\nREPEAT\n\tSET a &#x3D; a + 1;\nUNTIL a &gt; 0 END REPEAT;\nRETURN a;\nEND</code></pre>\n\n<p>它类似于Java中的do-while循环语句，它会先去执行里面的内容，再进行判断，格式为：</p>\n<ul>\n<li>repeat … until 结束循环条件 end repeat;</li>\n</ul>\n<h4 id=\"全局变量\"><a href=\"#全局变量\" class=\"headerlink\" title=\"全局变量\"></a>全局变量</h4><p>某些情况下，我们可以直接在一次会话中直接定义变量并使用，这时它并不是位于函数内的，这就是全局变量，它无需预先定义，直接使用即可：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">set @x &#x3D; 10;</code></pre>\n\n<p>我们可以将全局变量作为参数传递给函数：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select test(@x);</code></pre>\n\n<p>除了我们自己定义的全部变量以外，系统默认也有很多的变量，因此我们自己定义的变量称为用户变量，系统默认变量称为系统变量。查看系统变量的命令为：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">show GLOBAL VARIABLES</code></pre>\n\n<hr>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><p>存储过程是一个包括多条SQL语句的集合，专用于特定表的特定操作，比如我们之前实战项目中的创建用户，那么我们就需要一次性为两张表添加数据，但是如果不使用Java，而是每次都去使用SQL命令来完成，就需要手动敲两次命令，非常麻烦，因此我们可以提前将这些操作定义好，预留出需要填写数据的位置，下次输入参数直接调用即可。</p>\n<p>这里很容易与函数搞混淆，存储过程也是执行多条SQL语句，但是它们的出发点不一样，函数是专用于进行数据处理，并将结果返回给调用者，它更多情况下是一条SQL语句的参与者，无法直接运行，并且不涉及某个特定表：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">select count(*) from student;</code></pre>\n\n<p>而存储过程是多条SQL语句的执行者，这是它们的本质区别。</p>\n<p>定义存储过程与定义函数极为相似，它也可以包含参数，函数中使用的语句这里也能使用，但是它没有返回值：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE PROCEDURE lbwnb(&#96;name&#96; VARCHAR(20), pwd VARCHAR(255))\nBEGIN\n  INSERT INTO users(username, &#96;password&#96;) VALUES(&#96;name&#96;, pwd);\nEND</code></pre>\n\n<p>我们可以在存储过程中编写多条SQL语句，但是注意，MySQL的存储过程不具有原子性，当出现错误时，并不会回滚之前的操作，因此需要我们自己来编写事务保证原子性。</p>\n<p>接着我们来看看如何执行存储过程：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CALL lbwnb(&#39;111&#39;, &#39;2222&#39;)</code></pre>\n\n<p>通过使用<code>call</code>来执行一个存储过程，如果存储过程有参数，那么还需要填写参数。</p>\n<p>比如现在我们想要实现查询用户表，如果包含用户<code>test</code>那么就删除用户，如果不包含，就添加用户：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE PROCEDURE &#96;lbwnb&#96;()\nBEGIN\n\tIF NOT EXISTS(SELECT * FROM users WHERE username &#x3D; &#39;test&#39;) THEN\n\t\tINSERT INTO users(username, &#96;password&#96;) VALUES(&#39;test&#39;, &#39;123456&#39;);\n\tELSE\n\t\tDELETE FROM users WHERE username &#x3D; &#39;test&#39;;\n\tEND IF;\nEND</code></pre>\n\n<p>这里其实只需要一个简单的IF判断即可实现。</p>\n<p>那么如果我们希望遍历一个SELECT语句查询的结果呢？我们可以使用游标来完成：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\n\tDECLARE id INT;\n\tDECLARE &#96;name&#96; VARCHAR(10);\n\tDECLARE sex VARCHAR(5);\n\tDECLARE cur CURSOR FOR SELECT * FROM student;\n\tOPEN cur;\n\tWHILE TRUE DO\n\t\tFETCH cur INTO id, &#96;name&#96;, sex;\n\t\tSELECT id, &#96;name&#96;, sex;\n\tEND WHILE;\n\tCLOSE cur;\nEND</code></pre>\n\n<p>游标的使用分为4个步骤：</p>\n<ul>\n<li>DECLARE 游标名称 CURSOR FOR 查询结果   -  定义游标</li>\n<li>OPEN cur     -   开启游标</li>\n<li>FETCH 游标名称 INTO 存储结果的变量    -    从顶部开始，每执行一次，向下移动，如果已经在最底部，则触发异常</li>\n<li>CLOSE cur    -   关闭游标</li>\n</ul>\n<p>我们这里利用了一个while循环来多次通过游标获取查询结果，但是最后是因为出现异常才退出的，这样会导致之后的代码就无法继续正常运行了。</p>\n<p>我们接着来看如何处理异常：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">BEGIN\n\tDECLARE id INT;\n\tDECLARE &#96;name&#96; VARCHAR(10);\n\tDECLARE sex VARCHAR(5);\n\tDECLARE score INT;\n\tDECLARE a INT DEFAULT 0;\n\tDECLARE cur CURSOR FOR SELECT * FROM student;\n\t-- 必须在游标定义之后编写\n\tDECLARE CONTINUE HANDLER FOR 1329 SET a &#x3D; 1;\n\tOPEN cur;\n\tWHILE a &#x3D; 0 DO\n\t\tFETCH cur INTO id, &#96;name&#96;, sex, score;\n\t\tSELECT id, &#96;name&#96;, sex, score;\n\tEND WHILE;\n\tCLOSE cur;\n\tSELECT 1;\nEND</code></pre>\n\n<p>我们可以声明一个异常处理器（句柄），格式如下：</p>\n<ul>\n<li>declear (continue&#x2F;exit) handler for 异常名称(ID) 做点什么</li>\n</ul>\n<p>我们还可以限定存储过程的参数传递，比如我们只希望用户给我们一个参数用于接收数据，而不是值传递，我们可以将其设定为OUT类型：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE PROCEDURE &#96;lbwnb&#96;(OUT a INT)\nBEGIN\n\tSELECT a;\n\tSET a &#x3D; 100;\nEND</code></pre>\n\n<p>所有的参数默认为<code>IN</code>类型，也就是只能作为传入参数，无法为其赋值，而这里讲参数设定为<code>OUT</code>类型，那么参数无法将值传入，而只能被赋值。</p>\n<p>如果我们既希望参数可以传入也可以被重新赋值，我们可以将其修改为<code>INOUT</code>类型。</p>\n<hr>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>存储引擎就像我们电脑中的CPU，它是整个MySQL最核心的部分，数据库中的数据如何存储，数据库能够支持哪些功能，我们的增删改查请求如何执行，都是由存储引擎来决定的。</p>\n<p>我们可以大致了解一下以下三种存储引擎：</p>\n<ul>\n<li><strong>MyISAM：</strong>MySQL5.5之前的默认存储引擎，在插入和查询的情况下性能很高，但是它不支持事务，只能添加表级锁。</li>\n<li><strong>InnoDB：</strong>MySQL5.5之后的默认存储引擎，它支持ACID事务、行级锁、外键，但是性能比不过MyISAM，更加消耗资源。</li>\n<li><strong>Memory：</strong>数据都存放在内存中，数据库重启或发生崩溃，表中的数据都将消失。</li>\n</ul>\n<p>我们可以使用下面的命令来查看MySQL支持的存储引擎：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">show engines;</code></pre>\n\n<p>在创建表时，我们也可以为表指定其存储引擎。</p>\n<p>我们还可以在配置文件中修改默认的存储引擎，在Windows 11系统下，MySQL的配置文件默认放在<code>C:\\ProgramData\\MySQL\\MySQL Server 5.7</code>中，注意ProgramData是个隐藏文件夹。</p>\n<hr>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p><strong>注意：</strong>本小节会涉及<code>数据结构与算法</code>相关知识。</p>\n<p>索引就好像我们书的目录，每本书都有一个目录用于我们快速定位我们想要的内容在哪一页，索引也是，通过建立索引，我们就可以根据索引来快速找到想要的一条记录，大大提高查询效率。</p>\n<p>本版块我们会详细介绍索引的几种类型，以及索引的底层存储原理。</p>\n<h3 id=\"单列索引\"><a href=\"#单列索引\" class=\"headerlink\" title=\"单列索引\"></a>单列索引</h3><p>单列索引只针对于某一列数据创建索引，单列索引有以下几种类型：</p>\n<ul>\n<li><strong>NORMAL：</strong>普通的索引类型，完完全全相当于一本书的目录。</li>\n<li><strong>UNIQUE：</strong>唯一索引，我们之前已经用过了，一旦建立唯一索引，那么整个列中将不允许出现重复数据。每个表的主键列，都有一个特殊的唯一索引，叫做Primary Key，它不仅仅要求不允许出现重复，还要求不能为NULL，它还可以自动递增。每张表可以有多个唯一索引，但是只能有一个Primary索引。</li>\n<li><strong>SPATIAL：</strong>空间索引，空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON，不是很常用，这里不做介绍。</li>\n<li><strong>FULLTEXT：</strong>全文索引（MySQL 5.6 之后InnoDB才支持），它是模糊匹配的一种更好的解决方案，它的效率要比使用<code>like %</code>更高，并且它还支持多种匹配方式，灵活性也更加强大。只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</li>\n</ul>\n<p>我们来看看如何使用全文索引，首先创建一张用于测试全文索引的表：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREATE TABLE articles (\n  id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY,\n  title VARCHAR(200),\n  body TEXT,\n  FULLTEXT (body));</code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">INSERT INTO articles VALUES\n\t(NULL,&#39;MySQL Tutorial&#39;, &#39;DBMS stands for DataBase ...&#39;),\n\t(NULL,&#39;How To Use MySQL Efficiently&#39;, &#39;After you went through a ...&#39;),\n\t(NULL,&#39;Optimising MySQL&#39;,&#39;In this tutorial we will show ...&#39;),\n\t(NULL,&#39;1001 MySQL Tricks&#39;,&#39;1. Never run mysqld as root. 2. ...&#39;),\n\t(NULL,&#39;MySQL vs. YourSQL&#39;, &#39;In the following database comparison ...&#39;),\n\t(NULL,&#39;MySQL Security&#39;, &#39;When configured properly, MySQL ...&#39;);</code></pre>\n\n<p>最后我们使用全文索引进行模糊匹配：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM articles WHERE MATCH (body) AGAINST (&#39;database&#39;);</code></pre>\n\n<p>注意全文索引如何定义字段的，match中就必须是哪些字段，against中定义需要模糊匹配的字符串，我们用作查找的字符串实际上是被分词之后的结果，如果进行模糊匹配的不是一个词语，那么会查找失败，但是它的效率远高于以下这种写法：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">SELECT * FROM articles WHERE body like &#39;%database%&#39;;</code></pre>\n\n<h3 id=\"组合索引\"><a href=\"#组合索引\" class=\"headerlink\" title=\"组合索引\"></a>组合索引</h3><p>组合索引实际上就是将多行捆绑在一起，作为一个索引，它同样支持以上几种索引类型，我们可以在Navicat中进行演示。</p>\n<p>注意组合索引在进行匹配时，遵循最左原则。</p>\n<p>我们可以使用<code>explain</code>语句（它可以用于分析select语句的执行计划，也就是MySQL到底是如何在执行某条select语句的）来分析查询语句到底有没有通过索引进行匹配。</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">explain select * from student where name &#x3D; &#39;小王&#39;;</code></pre>\n\n<p>得到的结果如下：</p>\n<ul>\n<li>select_type：查询类型，上面的就是简单查询（SIMPLE）</li>\n<li>table：查询的表</li>\n<li>type：MySQL决定如何查找对应的记录，效率从高到低：system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all</li>\n<li>possible_keys：执行查询时可能会用到的索引</li>\n<li>key：实际使用的索引</li>\n<li>key_len：Mysql在索引里使用的字节数，字段的最大可能长度</li>\n<li>rows：扫描的行数</li>\n<li>extra：附加说明</li>\n</ul>\n<h3 id=\"索引底层原理\"><a href=\"#索引底层原理\" class=\"headerlink\" title=\"索引底层原理\"></a>索引底层原理</h3><p>在了解完了索引的类型之后，我们接着来看看索引是如何实现的。</p>\n<p>既然我们要通过索引来快速查找内容，那么如何设计索引就是我们的重点内容，因为索引是存储在硬盘上的，跟我们之前使用的HashMap之类的不同，它们都是在内存中的，但是硬盘的读取速度远小于内存的速度，每一次IO操作都会耗费大量的时间，我们也不可能把整个磁盘上的索引全部导入内存，因此我们需要考虑尽可能多的减少IO次数，索引的实现可以依靠两种数据结构，一种是我们在JavaSE阶段已经学习过的Hash表，还有一种就是B-Tree。</p>\n<p>我们首先来看看哈希表，实际上就是计算Hash值来快速定位：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fnimg.ws.126.net%2F%3Furl%3Dhttp%3A%2F%2Fdingyue.ws.126.net%2F2020%2F1223%2F2dd7c986j00qlrut10012c000rq00eam.jpg%26thumbnail%3D650x2147483647%26quality%3D80%26type%3Djpg&refer=http%3A%2F%2Fnimg.ws.126.net&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1643975564&t=8c9eabd82da9ac2637b0bdfea57d99bf\" alt=\"点击查看源网页\"></p>\n<p>通过对Key进行散列值计算，我们可以直接得到对应数据的存放位置，它的查询效率能够达到O(1)，但是它也存在一定的缺陷：</p>\n<ul>\n<li>Hash索引仅仅能满足“&#x3D;”，“in”查询条件，不能使用范围查询。 </li>\n<li>Hash碰撞问题。</li>\n<li>不能用部分索引键来搜索，因为组合索引在计算哈希值的时候是一起计算的。</li>\n</ul>\n<p>那么，既然要解决这些问题，我们还有一种方案就是使用类似于二叉树那样的数据结构来存储索引，但是这样相比使用Hash索引，会牺牲一定的读取速度。</p>\n<p>但是这里并没有使用二叉树，而是使用了BTree，它是专门为磁盘数据读取设计的一种度为n的查找树：</p>\n<ul>\n<li><p>树中每个结点最多含有m个孩子（m &gt;&#x3D; 2）</p>\n</li>\n<li><p>除根结点和叶子结点外，其它每个结点至少有[ceil(m &#x2F; 2)]个孩子。</p>\n</li>\n<li><p>若根结点不是叶子结点，则至少有2个孩子。</p>\n</li>\n<li><p>所有叶子结点都出现在同一层。</p>\n</li>\n<li><p>每个非终端结点中包含有n个键值信息： (P1，K1，P2，K2，P3，……，Kn，Pn+1)。其中： </p>\n<ol>\n<li>Ki (i&#x3D;1…n)为键值，且键值按顺序升序排序K(i-1)&lt; Ki。  </li>\n<li>Pi为指向子树根的结点，且指针P(i)指向的子树中所有结点的键值均小于Ki，但都大于K(i-1)。  </li>\n<li>键值的个数n必须满足： [ceil(m &#x2F; 2)-1] &lt;&#x3D; n &lt;&#x3D; m-1。</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12058546-44a71668594a77d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/654\" alt=\"img\"></p>\n<p>比如现在我们要对键值为<strong>10</strong>的记录进行查找，过程如下：</p>\n<ol>\n<li>读取根节点数据（目前进行了一次IO操作）</li>\n<li>根据根节点数据进行判断得到10&lt;17，因为P1指向的子树中所有值都是小于17的，所以这时我们将P1指向的节点读取（目前进行了两次IO操作）</li>\n<li>再次进行判断，得到8&lt;10&lt;12，因为P2指向的子树中所有的值都是小于12大于8的，所以这时读取P2指向的节点（目前进行了三次IO操作）</li>\n<li>成功找到。</li>\n</ol>\n<p>我们接着来看，虽然BTree能够很好地利用二叉查找树的思想大幅度减少查找次数，但是它的查找效率还是很低，因此它的优化版本B+Tree诞生了，它拥有更稳定的查询效率和更低的IO读取次数：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12058546-2ae10c0ddc8ac9ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/646\" alt=\"img\"></p>\n<p>我们可以发现，它和BTree有一定的区别：</p>\n<ul>\n<li>有n棵子树的结点中含有n个键值，BTree只有n-1个。</li>\n<li>所有的键值信息只在叶子节点中包含，非叶子节点仅仅保存子节点的最小（或最大）值，和指向叶子节点的指针，这样相比BTree每一个节点在硬盘中存放了更少的内容（没有键值信息了）</li>\n<li>所有叶子节点都有一个根据大小顺序指向下一个叶子节点的指针Q，本质上数据就是一个链表。</li>\n</ul>\n<p>这样，读取IO的时间相比BTree就减少了很多，并且查询任何键值信息都需要完整地走到叶子节点，保证了查询的IO读取次数一致。因此MySQL默认选择B+Tree作为索引的存储数据结构。</p>\n<p>这是MyISAM存储引擎下的B+Tree实现：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12058546-316168444236022b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/664\" alt=\"img\"></p>\n<p>这是InnoDB存储引擎下的B+Tree实现：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12058546-0da96cb9de1ff1c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/543\" alt=\"img\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/12058546-8cb0dbfd433253b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/543\" alt=\"img\"></p>\n<p>InnoDB与MyISAM实现的不同之处：</p>\n<ul>\n<li>数据本身就是索引的一部分（所以这里建议主键使用自增）</li>\n<li>非主键索引的数据实际上存储的是对应记录的主键值（因此InnoDB必须有主键，若没有也会自动查找替代）</li>\n</ul>\n<hr>\n<h2 id=\"锁机制\"><a href=\"#锁机制\" class=\"headerlink\" title=\"锁机制\"></a>锁机制</h2><p>在JavaSE的学习中，我们在多线程板块首次用到了锁机制，当我们对某个方法或是某个代码块加锁后，除非锁的持有者释放当前的锁，否则其他线程无法进入此方法或是代码块，我们可以利用锁机制来保证多线程之间的安全性。</p>\n<p>在MySQL中，就很容易出现多线程同时操作表中数据的情况，如果要避免潜在的并发问题，那么我们可以使用之前讲解的事务隔离级别来处理，而事务隔离中利用了锁机制。</p>\n<ul>\n<li>读未提交(Read Uncommitted)：能够读取到其他事务中未提交的内容，存在脏读问题。</li>\n<li>读已提交(Read Committed RC)：只能读取其他事务已经提交的内容，存在不可重复读问题。</li>\n<li>可重复读(Repeated Read RR)：在读取某行后不允许其他事务操作此行，直到事务结束，但是依然存在幻读问题。</li>\n<li>串行读(Serializable)：一个事务的开始必须等待另一个事务的完成。</li>\n</ul>\n<p>我们可以切换隔离级别分别演示一下：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">set session transaction isolation level read uncommitted;</code></pre>\n\n<p>在RR级别下，MySQL在一定程度上解决了幻读问题：</p>\n<ul>\n<li>在快照读（不加锁）读情况下，mysql通过mvcc来避免幻读。</li>\n<li>在当前读（加锁）读情况下，mysql通过next-key来避免幻读。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>**<code>MVCC</code>**，全称 <code>Multi-Version Concurrency Control</code> ，即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p></blockquote>\n<h3 id=\"读锁和写锁\"><a href=\"#读锁和写锁\" class=\"headerlink\" title=\"读锁和写锁\"></a>读锁和写锁</h3><p>从对数据的操作类型上来说，锁分为读锁和写锁：</p>\n<ul>\n<li><strong>读锁：</strong>也叫共享锁，当一个事务添加了读锁后，其他的事务也可以添加读锁或是读取数据，但是不能进行写操作，只能等到所有的读锁全部释放。</li>\n<li><strong>写锁：</strong>也叫排他锁，当一个事务添加了写锁后，其他事务不能读不能写也不能添加任何锁，只能等待当前事务释放锁。</li>\n</ul>\n<h3 id=\"全局锁、表锁和行锁\"><a href=\"#全局锁、表锁和行锁\" class=\"headerlink\" title=\"全局锁、表锁和行锁\"></a>全局锁、表锁和行锁</h3><p>从锁的作用范围上划分，分为全局锁、表锁和行锁：</p>\n<ul>\n<li><strong>全局锁：</strong>锁作用于全局，整个数据库的所有操作全部受到锁限制。</li>\n<li><strong>表锁：</strong>锁作用于整个表，所有对表的操作都会收到锁限制。</li>\n<li><strong>行锁：</strong>锁作用于表中的某一行，只会通过锁限制对某一行的操作（仅InnoDB支持）</li>\n</ul>\n<h4 id=\"全局锁\"><a href=\"#全局锁\" class=\"headerlink\" title=\"全局锁\"></a>全局锁</h4><p>我们首先来看全局锁，它作用于整个数据库，我们可以使用以下命令来开启读全局锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">flush tables with read lock;</code></pre>\n\n<p>开启后，整个数据库被上读锁，我们只能去读取数据，但是不允许进行写操作（包括更新、插入、删除等）一旦执行写操作，会被阻塞，直到锁被释放，我们可以使用以下命令来解锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">unlock tables;</code></pre>\n\n<p>除了手动释放锁之外，当我们的会话结束后，锁也会被自动释放。</p>\n<h4 id=\"表锁\"><a href=\"#表锁\" class=\"headerlink\" title=\"表锁\"></a>表锁</h4><p>表锁作用于某一张表，也是MyISAM和InnoDB存储引擎支持的方式，我们可以使用以下命令来为表添加锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">lock table 表名称 read&#x2F;write;</code></pre>\n\n<p>在我们为表添加写锁后，我们发现其他地方是无法访问此表的，一律都被阻塞。</p>\n<h4 id=\"行锁\"><a href=\"#行锁\" class=\"headerlink\" title=\"行锁\"></a>行锁</h4><p>表锁的作用范围太广了，如果我们仅仅只是对某一行进行操作，那么大可不必对整个表进行加锁，因此<code>InnoDB</code>支持了行锁，我们可以使用以下命令来对某一行进行加锁：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 添加读锁（共享锁）\nselect * from ... lock in share mode;\n-- 添加写锁（排他锁）\nselect * from ... for update;</code></pre>\n\n<p>使用InnoDB的情况下，在执行更新、删除、插入操作时，数据库也会自动为所涉及的行添加写锁（排他锁），直到事务提交时，才会释放锁，执行普通的查询操作时，不会添加任何锁。使用MyISAM的情况下，在执行更新、删除、插入操作时，数据库会对涉及的表添加写锁，在执行查询操作时，数据库会对涉及的表添加读锁。</p>\n<p><strong>提问：</strong>当我们不使用id进行选择，行锁会发生什么变化？（行锁升级）</p>\n<h3 id=\"记录锁、间隙锁和临键锁\"><a href=\"#记录锁、间隙锁和临键锁\" class=\"headerlink\" title=\"记录锁、间隙锁和临键锁\"></a>记录锁、间隙锁和临键锁</h3><p>我们知道InnoDB支持使用行锁，但是行锁比较复杂，它可以继续分为多个类型。</p>\n<h4 id=\"记录锁\"><a href=\"#记录锁\" class=\"headerlink\" title=\"记录锁\"></a>记录锁</h4><p>（Record Locks）记录锁, 仅仅锁住索引记录的一行，在单条索引记录上加锁。Record lock锁住的永远是索引，而非记录本身，即使该表上没有任何索引，那么innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。所以说当一条sql没有走任何索引时，那么将会在每一条聚合索引后面加写锁，这个类似于表锁，但原理上和表锁应该是完全不同的。</p>\n<h4 id=\"间隙锁\"><a href=\"#间隙锁\" class=\"headerlink\" title=\"间隙锁\"></a>间隙锁</h4><p>（Gap Locks）仅仅锁住一个索引区间（开区间，不包括双端端点）。在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录本身。比如在 1、2中，间隙锁的可能值有 (-∞, 1)，(1, 2)，(2, +∞)，间隙锁可用于防止幻读，保证索引间的不会被插入数据。</p>\n<h4 id=\"临键锁\"><a href=\"#临键锁\" class=\"headerlink\" title=\"临键锁\"></a>临键锁</h4><p>（Next-Key Locks）Record lock + Gap lock，左开右闭区间。默认情况下，<code>InnoDB</code>正是使用Next-key Locks来锁定记录（如select … for update语句）它还会根据场景进行灵活变换：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">场景</th>\n<th>转换</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">使用唯一索引进行精确匹配，但表中不存在记录</td>\n<td>自动转换为 Gap Locks</td>\n</tr>\n<tr>\n<td align=\"left\">使用唯一索引进行精确匹配，且表中存在记录</td>\n<td>自动转换为 Record Locks</td>\n</tr>\n<tr>\n<td align=\"left\">使用非唯一索引进行精确匹配</td>\n<td>不转换</td>\n</tr>\n<tr>\n<td align=\"left\">使用唯一索引进行范围匹配</td>\n<td>不转换，但是只锁上界，不锁下界</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://zhuanlan.zhihu.com/p/48269420\">https://zhuanlan.zhihu.com/p/48269420</a></p>\n","text":"MySQL高级在JavaWeb阶段，我们初步认识了MySQL数据库，包括一些基本操作，比如创建数据库、表、触发器，以及最基本的增删改查、事务等操作。而在此阶段，我们将继续深入学习MySQL，了解它的更多高级玩法，也相当于进行复习。 函数其实函数我们在之前已经接触到一部分了，在Ja...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#MySQL%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">MySQL高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">系统函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">字符串函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">日期函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">数学函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">类型转换函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">流程控制函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">自定义函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">基本语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">全局变量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">存储过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">存储引擎</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%88%97%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">单列索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E5%90%88%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">组合索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">索引底层原理</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%81%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">锁机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E9%94%81%E5%92%8C%E5%86%99%E9%94%81\"><span class=\"toc-text\">读锁和写锁</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E9%94%81%E3%80%81%E8%A1%A8%E9%94%81%E5%92%8C%E8%A1%8C%E9%94%81\"><span class=\"toc-text\">全局锁、表锁和行锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E9%94%81\"><span class=\"toc-text\">全局锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E9%94%81\"><span class=\"toc-text\">表锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%8C%E9%94%81\"><span class=\"toc-text\">行锁</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E9%94%81%E3%80%81%E9%97%B4%E9%9A%99%E9%94%81%E5%92%8C%E4%B8%B4%E9%94%AE%E9%94%81\"><span class=\"toc-text\">记录锁、间隙锁和临键锁</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%B0%E5%BD%95%E9%94%81\"><span class=\"toc-text\">记录锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%97%B4%E9%9A%99%E9%94%81\"><span class=\"toc-text\">间隙锁</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%B4%E9%94%AE%E9%94%81\"><span class=\"toc-text\">临键锁</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaSE笔记（一）","uid":"c77d7175e79dc8945326daf0b5bc2787","slug":"JavaSE笔记（一）","date":"2022-03-09T03:41:38.630Z","updated":"2022-03-09T05:25:46.843Z","comments":true,"path":"api/articles/JavaSE笔记（一）.json","keywords":null,"cover":null,"text":"Java语法规范所有的Java语句必须以;结尾！ 无论是()、[]还是&#123;&#125;，所有的括号必须一一匹配！ 主方法的代码只能写在&#123;&#125;中！ Java基础语法（面向过程）在学习面向对象之前，我们需要了解面向过程的编程思维，如果你学习过C语言和Pyth...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSE笔记","slug":"JavaSE笔记","count":7,"path":"api/tags/JavaSE笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaSSM笔记（三）","uid":"7706992de04d833db29722d37e1933b8","slug":"JavaSSM笔记（三）","date":"2022-03-05T16:22:50.343Z","updated":"2022-03-05T16:24:05.940Z","comments":true,"path":"api/articles/JavaSSM笔记（三）.json","keywords":null,"cover":[],"text":" SpringSecurity本章我们会一边讲解SpringSecurity框架，一边从头开始编写图书管理系统。 SpringSecurity是一个基于Spring开发的非常强大的权限验证框架，其核心功能包括： 认证 （用户登录） 授权 （此用户能够做哪些事情） 攻击防护 （防止...","link":"","photos":[],"count_time":{"symbolsCount":"40k","symbolsTime":"37 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}