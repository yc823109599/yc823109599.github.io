{"title":"JavaSE笔记（一）","uid":"c77d7175e79dc8945326daf0b5bc2787","slug":"JavaSE笔记（一）","date":"2022-03-09T03:41:38.630Z","updated":"2022-03-09T05:25:46.843Z","comments":true,"path":"api/articles/JavaSE笔记（一）.json","keywords":null,"cover":null,"content":"<h1 id=\"Java语法规范\"><a href=\"#Java语法规范\" class=\"headerlink\" title=\"Java语法规范\"></a>Java语法规范</h1><p>所有的Java语句必须以<code>;</code>结尾！</p>\n<p>无论是<code>()</code>、<code>[]</code>还是<code>&#123;&#125;</code>，所有的括号必须一一匹配！</p>\n<p>主方法的代码只能写在<code>&#123;&#125;</code>中！</p>\n<h1 id=\"Java基础语法（面向过程）\"><a href=\"#Java基础语法（面向过程）\" class=\"headerlink\" title=\"Java基础语法（面向过程）\"></a>Java基础语法（面向过程）</h1><p>在学习面向对象之前，我们需要了解面向过程的编程思维，如果你学习过C语言和Python就会很轻松！</p>\n<h2 id=\"变量和关键字\"><a href=\"#变量和关键字\" class=\"headerlink\" title=\"变量和关键字\"></a>变量和关键字</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量就是一个可变的量，例如定义一个int类型的变量（int就是整数类型）：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\na &#x3D; 20;\na &#x3D; 30;</code></pre>\n\n<p>我们能够随意更改它的值，也就是说它的值是随时可变的，我们称为变量。变量可以是类的变量，也可以是方法内部的局部变量（我们现阶段主要用局部变量，类变量在面向对象再讲解）</p>\n<p>变量和C语言中的变量不同，Java中的变量是存放在JVM管理的内存中，C语言的变量存放在内存（某些情况下需要手动释放内存，而Java会自动帮助我们清理变量占据的内存）Java和C++很类似，但是没有指针！Java也叫C++–</p>\n<p>Java是强类型语言，只有明确定义了变量之后，你才能使用！一旦被指定某个数据类型，那么它将始终被认为是对应的类型（和JS不一样！）</p>\n<p>定义一个变量的格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">[类型] [标识符(名字)] &#x3D; [初始值(可选)]\nint a &#x3D; 10;</code></pre>\n\n<p>注意：标识符不能为以下内容：</p>\n<ul>\n<li>标识符以由大小写字母、数字、下划线(_)和美元符号($)组成，但是不能以数字开头。</li>\n<li>大小写敏感！</li>\n<li>不能有空格、@、#、+、-、&#x2F; 等符号</li>\n<li>应该使用有意义的名称，达到见名知意的目的，最好以小写字母开头</li>\n<li>不可以是 true 和 false </li>\n<li>不能与Java语言的关键字重名</li>\n</ul>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>![image-20210817150135886](&#x2F;Users&#x2F;nagocoler&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210817150135886.png)</p>\n<p>包括基本数据类型、流程控制语句等，了解就行，不用去记，后面我们会一点一点带大家认识！</p>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>常量就是无法修改值的变量，常量的值，只能定义一次：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final int a &#x3D; 10;\na &#x3D; 10;  &#x2F;&#x2F;报错！</code></pre>\n\n<p>常量前面必须添加final关键字（C语言里面是const，虽然Java也有，但是不能使用！）</p>\n<p>这只是final关键字的第一个用法，后面还会有更多的用法。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>养成注释的好习惯，不然以后自己都看不懂自己的代码！注释包括单行注释和多行注释：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;我是单行注释\n\n&#x2F;**\n* 我是\n* 多行注释\n*&#x2F;\n\n&#x2F;&#x2F;TODO 待做标记</code></pre>\n\n<hr>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>Java中的数据类型分为基本数据类型和引用类型两大类，引用类型我们在面向对象时再提，基本数据类型是重点中的重点！首先我们需要了解有哪些类型。然后，我们需要知道的，并不是他们的精度如何，能够表示的范围有多大，而是为什么Java会给我们定义这些类型，计算机是怎么表示这些类型的，这样我们才能够更好的记忆他们的精度、表示的范围大小。所以，我们从计算机原理的角度出发，带领大家走进Java的基本数据类型。</p>\n<p>这一部分稍微有点烧脑，但是是重中之重，如果你掌握了这些，任何相关的面试题都难不倒你！（如果你学习过计算机组成原理就很好理解了）</p>\n<h3 id=\"计算机中的二进制表示\"><a href=\"#计算机中的二进制表示\" class=\"headerlink\" title=\"计算机中的二进制表示\"></a>计算机中的二进制表示</h3><p>在计算机中，所有的内容都是二进制形式表示。十进制是以10为进位，如9+1&#x3D;10；二进制则是满2进位（因为我们的计算机是电子的，电平信号只有高位和低位，你也可以暂且理解为通电和不通电，高电平代表1，低电平代表0，由于只有0和1，因此只能使用2进制表示我们的数字！）比如1+1&#x3D;10&#x3D;2^1+0，一个位也叫一个bit，8个bit称为1字节，16个bit称为一个字，32个bit称为一个双字，64个bit称为一个四字，我们一般采用字节来描述数据大小。</p>\n<p>十进制的7 -&gt; 在二进制中为 111 &#x3D; 2^2 + 2^1 + 2^0</p>\n<p>现在有4个bit位，最大能够表示多大的数字呢？</p>\n<ul>\n<li>最小：0000 &#x3D;&gt; 0</li>\n<li>最大：1111 &#x3D;&gt; 2^3+2^2+2^1+2^0 &#x3D;&gt; 8 + 4 + 2 + 1 &#x3D; 15</li>\n</ul>\n<p>在Java中，无论是小数还是整数，他们都要带有符号（和C语言不同，C语言有无符号数）所以，首位就作为我们的符号位，还是以4个bit为例，首位现在作为符号位（1代表负数，0代表正数）：</p>\n<ul>\n<li>最小：1111 &#x3D;&gt; -(2^2+2^1+2^0) &#x3D;&gt; -7</li>\n<li>最大：0111 &#x3D;&gt; +(2^2+2^1+2^0) &#x3D;&gt; +7 &#x3D;&gt; 7</li>\n</ul>\n<p>现在，我们4bit能够表示的范围变为了-7~+7，这样的表示方式称为原码。</p>\n<h3 id=\"计算机中的加减法\"><a href=\"#计算机中的加减法\" class=\"headerlink\" title=\"计算机中的加减法\"></a>计算机中的加减法</h3><h4 id=\"原码\"><a href=\"#原码\" class=\"headerlink\" title=\"原码\"></a>原码</h4><p>虽然原码表示简单，但是原码在做加减法的时候，很麻烦！以4bit位为例：</p>\n<p>1+(-1) &#x3D; 0001 + 1001 &#x3D; 怎么让计算机去计算？（虽然我们知道该去怎么算，但是计算机不知道！）</p>\n<p>我们得创造一种更好的表示方式！于是我们引入了反码：</p>\n<h4 id=\"反码\"><a href=\"#反码\" class=\"headerlink\" title=\"反码\"></a>反码</h4><ul>\n<li>正数的反码是其本身</li>\n<li>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反</li>\n</ul>\n<p>经过上面的定义，我们再来进行加减法：</p>\n<p>1+(-1) &#x3D; 0001 + 1110 &#x3D; 1111 &#x3D;&gt; -0 （直接相加，这样就简单多了！）</p>\n<p>思考：1111代表-0，0000代表+0，在我们实数的范围内，0有正负之分吗？</p>\n<ul>\n<li>0既不是正数也不是负数，那么显然这样的表示依然不够合理！</li>\n</ul>\n<h4 id=\"补码\"><a href=\"#补码\" class=\"headerlink\" title=\"补码\"></a>补码</h4><p>根据上面的问题，我们引入了最终的解决方案，那就是补码，定义如下：</p>\n<ul>\n<li>正数的补码就是其本身 （不变！）</li>\n<li>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</li>\n</ul>\n<p>其实现在就已经能够想通了，-0其实已经被消除了！我们再来看上面的运算：</p>\n<p>1+(-1) &#x3D; 0001 + 1111 &#x3D; (1)0000 &#x3D;&gt; +0 （现在无论你怎么算，也不会有-0了！）</p>\n<p>所以现在，4bit位能够表示的范围是：-8~+7（Java使用的就是补码！）</p>\n<p><code>以上内容是重点， 是一定要掌握的知识，这些知识是你在面试中的最终防线！有了这些理论基础，无论面试题如何变换，都能够通过理论知识来破解</code></p>\n<hr>\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><p>整数类型是最容易理解的类型！既然我们知道了计算机中的二进制数字是如何表示的，那么我们就可以很轻松的以二进制的形式来表达我们十进制的内容了。</p>\n<p>在Java中，整数类型包括以下几个：</p>\n<ul>\n<li>byte 字节型 （8个bit，也就是1个字节）范围：-128~+127</li>\n<li>short 短整形（16个bit，也就是2个字节）范围：-32768~+32767</li>\n<li>int 整形（32个bit，也就是4个字节）最常用的类型！</li>\n<li>long 长整形（64个bit，也就是8个字节）最后需要添加l或L</li>\n</ul>\n<p>long都装不下怎么办？BigInteger！</p>\n<p>数字已经达到byte的最大值了，还能加吗？为了便于理解，以4bit为例：</p>\n<p>0111 + 0001 &#x3D; 1000 &#x3D;&gt;  -8（你没看错，就是这样！）</p>\n<p>整数还能使用8进制、16进制表示：</p>\n<ul>\n<li>十进制为15 &#x3D; 八进制表示为017 &#x3D; 十六进制表示为 0xF &#x3D; 二进制表示 1111 (代码里面不能使用二进制！)</li>\n</ul>\n<h3 id=\"字符类型和字符串\"><a href=\"#字符类型和字符串\" class=\"headerlink\" title=\"字符类型和字符串\"></a>字符类型和字符串</h3><p>在Java中，存在字符类型，它能够代表一个字符：</p>\n<ul>\n<li>char 字符型（16个bit，也就是2字节，它不带符号！）范围是0 ~ 65535</li>\n<li>使用Unicode表示就是：\\u0000 ~ \\uffff</li>\n</ul>\n<p>字符要用单引号扩起来！比如 char c &#x3D; ‘淦’;</p>\n<p>字符其实本质也是数字，但是这些数字通过编码表进行映射，代表了不同的字符，比如字符<code>&#39;A&#39;</code>的ASCII码就是数字<code>65</code>，所以，char类型其实可以转换为上面的整数类型。</p>\n<p>Java的char采用Unicode编码表（不是ASCII编码！），Unicode编码表包含ASCII的所有内容，同时还包括了全世界的语言，ASCII只有1字节，而Unicode编码是2字节，能够代表65536种文字，足以包含全世界的文字了！（我们编译出来的字节码文件也是使用Unicode编码的，所以利用这种特性，其实Java支持中文变量名称、方法名称甚至是类名）</p>\n<p>既然char只能代表一个字符，那怎么才能包含一句话呢？（关于数组，我们这里先不了解，数组我们放在面向对象章节讲解）</p>\n<p>String就是Java中的字符串类型（注意，它是一个类，创建出来的字符串本质是一个对象，不是我们的基本类型）字符串就像它的名字一样，代表一串字符，也就是一句完整的话。</p>\n<p>字符串用双引号括起来！比如：String str &#x3D; “一日三餐没烦恼”;</p>\n<h3 id=\"小数类型\"><a href=\"#小数类型\" class=\"headerlink\" title=\"小数类型\"></a>小数类型</h3><p>小数类型比较难理解（比较难理解指的是原理，不是使用）首先来看看Java中的小数类型包含哪些：</p>\n<ul>\n<li>float 单精度浮点型 （32bit，4字节）</li>\n<li>double 双精度浮点型（64bit，8字节）</li>\n</ul>\n<p>思考：小数的范围该怎么定义呢？我们首先要了解的是小数在计算机里面是如何存放的：</p>\n<p>![image-20210817143234500](&#x2F;Users&#x2F;nagocoler&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210817143234500.png)</p>\n<p>根据国际标准 IEEE 754，任意一个二进制浮点数 V 可以表示成下面的形式：<br>V &#x3D; (-1)^S × M × 2^E<br>（1）(-1)^S 表示符号位，当 S&#x3D;0，V 为正数；当 S&#x3D;1，V 为负数。<br>（2）M 表示有效数字，大于等于 1，小于 2，但整数部分的 1 不变，因此可以省略。（例如尾数为1111010，那么M实际上就是1.111010，尾数首位必须是1，1后面紧跟小数点，如果出现0001111这样的情况，去掉前面的0，移动1到首位；题外话：随着时间的发展，IEEE 754标准默认第一位为1，故为了能够存放更多数据，就舍去了第一位，比如保存1.0101 的时候， 只保存 0101，这样能够多存储一位数据）<br>（3）2^E 表示指数位。（用于移动小数点）</p>\n<p>比如： 对于十进制的 5.25 对应的二进制为：101.01，相当于：1.0101*2^2。所以，S 为 0，M 为 1.0101，E 为 2。所以，对于浮点类型，最大值和最小值不仅取决于符号和尾数，还有它的阶码。我们在这里就不去计算了，想了解的可以去搜索相关资料。</p>\n<p>思考：就算double有64bit位数，但是依然存在精度限制，如果我要进行高精度的计算，怎么办？BigDecimal！</p>\n<h3 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h3><p>布尔类型（boolean）只有<code>true</code>和<code>false</code>两种值，也就是要么为真，要么为假，布尔类型的变量通常用作流程控制判断语句。（C语言一般使用0表示false，除0以外的所有数都表示true）布尔类型占据的空间大小并未明确定义，而是根据不同的JVM会有不同的实现。</p>\n<hr>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><p>隐式类型转换支持字节数小的类型自动转换为字节数大的类型，整数类型自动转换为小数类型，转换规则如下：</p>\n<ul>\n<li>byte→short(char)→int→long→float→double</li>\n</ul>\n<p>问题：为什么long比float大，还能转换为float呢？小数的存储规则让float的最大值比long还大，只是可能会丢失某些位上的精度！</p>\n<p>所以，如下的代码就能够正常运行：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">byte b &#x3D; 9;\nshort s &#x3D; b;\nint i &#x3D; s;\nlong l &#x3D; i;\nfloat f &#x3D; l;\ndouble d &#x3D; f;\nSystem.out.println(d);\n\n&#x2F;&#x2F;输出 9.0</code></pre>\n\n<h3 id=\"显示类型转换\"><a href=\"#显示类型转换\" class=\"headerlink\" title=\"显示类型转换\"></a>显示类型转换</h3><p>显示类型转换也叫做强制类型转换，也就是说，违反隐式转换的规则，牺牲精度强行进行类型转换。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int i &#x3D; 128;\nbyte b &#x3D; (byte)i;\nSystem.out.println(b);\n\n&#x2F;&#x2F;输出 -128</code></pre>\n\n<p>为什么结果是-128？精度丢失了！</p>\n<ul>\n<li>int 类型的128表示：00000000 00000000 00000000 10000000</li>\n<li>byte类型转换后表示：xxxxxxxx xxxxxxxx xxxxxxxx 10000000 &#x3D;&gt; -128</li>\n</ul>\n<h3 id=\"数据类型自动提升\"><a href=\"#数据类型自动提升\" class=\"headerlink\" title=\"数据类型自动提升\"></a>数据类型自动提升</h3><p>在参与运算时（也可以位于表达式中时，自增自减除外），所有的byte型、short型和char的值将被提升到int型：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">byte b &#x3D; 105;\nb &#x3D; b + 1;   &#x2F;&#x2F;报错！\nSystem.out.println(b);</code></pre>\n\n<p>这个特性是由 <strong>Java虚拟机规范</strong> 定义的，也是为了提高运行的效率。其他的特性还有：</p>\n<ul>\n<li>如果一个操作数是long型，计算结果就是long型</li>\n<li>如果一个操作数是float型，计算结果就是float型</li>\n<li>如果一个操作数是double型，计算结果就是double型</li>\n</ul>\n<hr>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><h3 id=\"赋值和算术运算符\"><a href=\"#赋值和算术运算符\" class=\"headerlink\" title=\"赋值和算术运算符\"></a>赋值和算术运算符</h3><p>赋值运算符<code>=</code>是最常用的运算符，其实就是将我们等号右边的结果，传递给等号左边的变量，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 1 + 8;\nint c &#x3D; 5 * 5;</code></pre>\n\n<p>算术运算符也就是我们在小学阶段学习的<code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code>，分别代表加减乘除还有取余，例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 2;\nint b &#x3D; 3;\nint c &#x3D; a * b;\n&#x2F;&#x2F;结果为6</code></pre>\n\n<p>需要注意的是，<code>+</code>还可以用作字符串连接符使用：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(&quot;lbw&quot; + &quot;nb&quot;);  &#x2F;&#x2F;lbwnb</code></pre>\n\n<p>当然，字符串可以直接连接其他类型，但是会全部当做字符串处理：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 7, b &#x3D; 15;\nSystem.out.println(&quot;lbw&quot; + a + b); &#x2F;&#x2F;lbw715</code></pre>\n\n<p>算术运算符还包括<code>++</code>和<code>--</code>也就是自增和自减，以自增为例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\na++;\nSystem.out.println(a); &#x2F;&#x2F;输出为11</code></pre>\n\n<p>自增自减运算符放在变量的前后的返回值是有区别的：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nSystem.out.println(a++);  &#x2F;&#x2F;10 （先返回值，再自增）\nSystem.out.println(a);   &#x2F;&#x2F;11</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nSystem.out.println(++a);  &#x2F;&#x2F;11 （先自增，再返回值）\nSystem.out.println(a);  &#x2F;&#x2F;11</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 2;\nSystem.out.println(b+++a++);  &#x2F;&#x2F;猜猜看结果是多少</code></pre>\n\n<p>为了使得代码更简洁，你还可以使用扩展的赋值运算符，包括<code>+=</code>、<code>-=</code>、<code>/=</code>、<code>*=</code>、<code>%=</code>，和自增自减类似，先执行运算，再返回结果，同时自身改变：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nSystem.out.println(a +&#x3D; 2);  &#x2F;&#x2F;等价于 a &#x3D; a + 2</code></pre>\n\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>关系运算符的结果只能是布尔类型，也就是要么为真要么为假，关系运算符包括：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&gt; &lt; &#x3D;&#x3D; &#x2F;&#x2F;大于小于等于\n&gt;&#x3D; &lt;&#x3D;  !&#x3D;  &#x2F;&#x2F;大于等于，小于等于，不等于</code></pre>\n\n<p>关系运算符一般只用于基本类型的比较，运算结果只能是boolean：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 2;\nboolean x &#x3D; a &gt; b;\nSystem.out.println(x);\n&#x2F;&#x2F;结果为 true</code></pre>\n\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>逻辑运算符两边只能是boolean类型或是关系&#x2F;逻辑运算表达式，返回值只能是boolean类型！逻辑运算符包括：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&amp;&amp; &#x2F;&#x2F;与运算，要求两边同时为true才能返回true\n|| &#x2F;&#x2F;或运算，要求两边至少要有一个为true才能返回true\n! &#x2F;&#x2F;非运算，一般放在表达式最前面，表达式用括号扩起来，表示对表达式的结果进行反转</code></pre>\n\n<p>实际案例来看看：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 2;\nboolean x &#x3D; a &gt; b &amp;&amp; a &lt; b;  &#x2F;&#x2F;怎么可能同时满足呢\nSystem.out.println(x);   &#x2F;&#x2F;false</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 2;\nboolean x &#x3D; a &gt; b || a &lt;&#x3D; b;  &#x2F;&#x2F;一定有一个满足！\nSystem.out.println(x);   &#x2F;&#x2F;true</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\nint b &#x3D; 2;\nboolean x &#x3D; !(a &gt; b); &#x2F;&#x2F;对结果进行反转，本来应该是true\nSystem.out.println(x); &#x2F;&#x2F;false</code></pre>\n\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&amp; &#x2F;&#x2F;按位与，注意，返回的是运算后的同类型值，不是boolean！\n| &#x2F;&#x2F;按位或\n^ &#x2F;&#x2F;按位异或 0 ^ 0 &#x3D; 0\n~ &#x2F;&#x2F;按位非</code></pre>\n\n<p>按位运算实际上是根据值的二进制编码来计算结果，例如按位与，以4bit为例：</p>\n<p>0101 &amp; 0100 &#x3D; 0100 （只有同时为1对应位才得1）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 7, b &#x3D; 15;\nSystem.out.println(a &amp; b); &#x2F;&#x2F;结果为7</code></pre>\n\n<h3 id=\"三目运算符\"><a href=\"#三目运算符\" class=\"headerlink\" title=\"三目运算符\"></a>三目运算符</h3><p>三目运算符其实是为了简化代码而生，可以根据条件是否满足来决定返回值，格式如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 7, b &#x3D; 15;\nString str &#x3D; a &gt; b ? &quot;行&quot; : &quot;不行&quot;;  &#x2F;&#x2F; 判断条件(只能是boolean,或返回boolean的表达式) ? 满足的返回值 : 不满足的返回值 \nSystem.out.println(&quot;汉堡做的行不行？&quot;+str);  &#x2F;&#x2F;汉堡做的行不行？不行</code></pre>\n\n<p>理解三目运算符，就很容易理解后面的if-else语句了。</p>\n<hr>\n<h2 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h2><p>我们的程序都是从上往下依次运行的，但是，仅仅是这样还不够，我们需要更加高级的控制语句来帮我进行更灵活的控制。比如，判断用户输入的数字，大于1则输出ok，小于1则输出no，这时我们就需要用到选择结构来帮助我们完成条件的判断和程序的分支走向。学习过C语言就很轻松！</p>\n<h3 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h3><p>选择结构包含if和switch类型，选择结构能够帮助我们根据条件判断，再执行哪一块代码。</p>\n<h4 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h4><p>就像上面所说，判断用户输入的数字，大于1则输出ok，小于1则输出no，要实现这种效果，我们首先可以采用if语句：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(判断条件)&#123;\n  &#x2F;&#x2F;判断成功执行的内容\n&#125;else&#123;\n  &#x2F;&#x2F;判断失败执行的内容\n&#125;\n&#x2F;&#x2F;if的内容执行完成后，后面的内容正常执行</code></pre>\n\n<p>其中，<code>else</code>语句不是必须的。</p>\n<p>现在，又来了一个新的需求，用户输入的是1打印ok，输入2，打印yes，其他打印no，那么这样就需要我们进行多种条件的判断了，当然if能进行多分支判断：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(判断条件1)&#123;\n  &#x2F;&#x2F;判断成功执行的内容\n&#125;else if(判断条件2)&#123;\n  &#x2F;&#x2F;再次判断，如果判断成功执行的内容\n&#125;else&#123;\n  &#x2F;&#x2F;上面的都没成功，只能走这里\n&#125;</code></pre>\n\n<p>同样，<code>else</code>语句不是必须的。</p>\n<p>现在，又来了一个新的需求，用户输入1之后，在判断用户下一次输入的是什么，如果是1，打印yes，不是就打印no，这样就可以用嵌套if了：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">if(判断条件1)&#123;\n  &#x2F;&#x2F;前提是判断条件1要成功才能进来！\n  if(判断条件2)&#123;\n    &#x2F;&#x2F;判断成功执行的内容\n  &#125;else&#123;\n    &#x2F;&#x2F;判断失败执行的内容\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h4><p>我们不难发现，虽然<code>else-if</code>能解决多分支判断的问题，但是效率实在是太低了，多分支if采用的是逐级向下判断，显然费时费力，那么有没有一直更专业的解决多分支判断问题的东西呢？</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">switch(判断主体)&#123;\n  case 值1:\n    &#x2F;&#x2F;运行xxx\n    break;  &#x2F;&#x2F;break用于跳出switch语句，不添加会导致程序继续向下运行！\n  case 值2:\n    &#x2F;&#x2F;运行xxx\n    break;\n  case 值3:\n    &#x2F;&#x2F;运行xxx\n    break;\n&#125;</code></pre>\n\n<p>在上述语句中，只有判断主体等于case后面的值时，才会执行case中的语句，同时需要使用break来跳出switch语句，否则会继续向下运行！</p>\n<p>为什么switch效率更高呢，因为switch采用二分思想进行查找（这也是为什么switch只能判断值相等的原因），能够更快地找到我们想要的结果！</p>\n<h3 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h3><p>小明想向小红表白，于是他在屏幕上打印了520个 “我爱你”，我们用Java该如何实现呢？</p>\n<h4 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h4><p>for语句是比较灵活的循环控制语句，一个for语句的定义如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(初始条件;循环条件;更新)&#123;\n  &#x2F;&#x2F;循环执行的内容\n&#125;\n&#x2F;&#x2F;循环结束后，继续执行</code></pre>\n\n<ul>\n<li>初始条件：循环开始时的条件，一般用于定义控制循环的变量。</li>\n<li>循环条件：每轮循环开始之前，进行一次判断，如果满足则继续，不满足则结束，要求为boolean变量或是boolean表达式。</li>\n<li>更新：每轮循环结束后都会执行的内容，一般写增量表达式。</li>\n</ul>\n<p>初始条件、循环条件、更新条件不是缺一不可，甚至可以都缺！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(int i &#x3D; 0;i &lt; 520;i++)&#123;\n  System.out.println(&quot;我爱你&quot;);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(;;)&#123;\n  &#x2F;&#x2F;这里的内容将会永远地进行下去！\n&#125;</code></pre>\n\n<p>增强for循环在数组时再讲解！</p>\n<h4 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h4><p>while循环和for循环类似，但是它更加的简单，只需要添加维持循环的判断条件即可！</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while(循环条件)&#123;\n  &#x2F;&#x2F;循环执行的内容\n&#125;</code></pre>\n\n<p>和for一样，每次循环开始，当循环条件不满足时，自动退出！那么有时候我们希望先执行了我们的代码再去判断怎么办呢，我们可以使用do-while语句：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">do&#123;\n  &#x2F;&#x2F;执行内容\n&#125;while(循环条件);</code></pre>\n\n<p>一定会先执行do里面的内容，再做判断！</p>\n<p>思考：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(;;)&#123;\n  \n&#125;\n\nwhile(true)&#123;\n  \n&#125;\n\n&#x2F;&#x2F;它们的性能谁更高？</code></pre>\n\n<hr>\n<h2 id=\"面向过程编程实战（基础-算法）\"><a href=\"#面向过程编程实战（基础-算法）\" class=\"headerlink\" title=\"面向过程编程实战（基础+算法）\"></a>面向过程编程实战（基础+算法）</h2><h3 id=\"打印九九乘法表\"><a href=\"#打印九九乘法表\" class=\"headerlink\" title=\"打印九九乘法表\"></a>打印九九乘法表</h3><p>简单：将九九乘法表打印到控制台。</p>\n<h3 id=\"求1000以内的水仙花数\"><a href=\"#求1000以内的水仙花数\" class=\"headerlink\" title=\"求1000以内的水仙花数\"></a>求1000以内的水仙花数</h3><p>中等：打印1000以内所有满足水仙花的数，“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如153是“水仙花数”，因为：153 &#x3D; 1^3 + 5^3 + 3^3</p>\n<h3 id=\"青蛙跳台阶问题\"><a href=\"#青蛙跳台阶问题\" class=\"headerlink\" title=\"青蛙跳台阶问题\"></a>青蛙跳台阶问题</h3><p>困难：一共有n个台阶，一只青蛙每次只能跳一阶或是两阶，那么一共有多少种跳到顶端的方案？例如n&#x3D;2，那么一共有两种方案，一次性跳两阶或是每次跳一阶。</p>\n<p>动态规划：其实，就是利用，上次得到的结果，给下一次作参考，下一次就能利用上次的结果快速得到结果，依次类推</p>\n<hr>\n<p>不对啊，别的教程都讲了数组、方法，怎么我们还没讲就进入面向对象了呢？</p>\n<ul>\n<li>数组在Java中，并非基本类型，数组是编程不可见的对象类型，学习了面向对象再来理解，会更加容易！</li>\n<li>方法在Java中是类具有的属性，所以，在了解了对象类型之后，再来了解方法，就更加简单了！</li>\n</ul>\n","text":"Java语法规范所有的Java语句必须以;结尾！ 无论是()、[]还是&#123;&#125;，所有的括号必须一一匹配！ 主方法的代码只能写在&#123;&#125;中！ Java基础语法（面向过程）在学习面向对象之前，我们需要了解面向过程的编程思维，如果你学习过C语言和Pyth...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSE笔记","slug":"JavaSE笔记","count":7,"path":"api/tags/JavaSE笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">Java语法规范</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%EF%BC%89\"><span class=\"toc-text\">Java基础语法（面向过程）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">变量和关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">计算机中的二进制表示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%8A%A0%E5%87%8F%E6%B3%95\"><span class=\"toc-text\">计算机中的加减法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%A0%81\"><span class=\"toc-text\">原码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E7%A0%81\"><span class=\"toc-text\">反码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A0%81\"><span class=\"toc-text\">补码</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">整数类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">字符类型和字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">小数类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">布尔类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">类型转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">隐式类型转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">显示类型转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E6%8F%90%E5%8D%87\"><span class=\"toc-text\">数据类型自动提升</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E5%92%8C%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值和算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">关系运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三目运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">选择结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#switch%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">switch语句</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#for%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">for语句</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">while循环</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%EF%BC%88%E5%9F%BA%E7%A1%80-%E7%AE%97%E6%B3%95%EF%BC%89\"><span class=\"toc-text\">面向过程编程实战（基础+算法）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8\"><span class=\"toc-text\">打印九九乘法表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B1%821000%E4%BB%A5%E5%86%85%E7%9A%84%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0\"><span class=\"toc-text\">求1000以内的水仙花数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">青蛙跳台阶问题</span></a></li></ol></li></ol></li></ol>","author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaSE笔记（二）","uid":"c02ca665cd1f72f1b198d0583b891337","slug":"JavaSE笔记（二）","date":"2022-03-09T03:41:48.987Z","updated":"2022-03-09T05:26:00.939Z","comments":true,"path":"api/articles/JavaSE笔记（二）.json","keywords":null,"cover":[],"text":"Java对象和多态 （面向对象）面向对象基础面向对象程序设计(Object Oriented Programming) 对象基于类创建，类相当于一个模板，对象就是根据模板创建出来的实体（就像做月饼，我们要做一个月饼首先需要一个模具，模具就是我们的类，而做出来的月饼，就是类的实现，...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"25 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSE笔记","slug":"JavaSE笔记","count":7,"path":"api/tags/JavaSE笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaSSM笔记（四）","uid":"98f040fb8fb5c5ced4fb87fa4094e887","slug":"JavaSSM笔记（四）","date":"2022-03-05T16:22:54.848Z","updated":"2022-03-05T16:24:16.223Z","comments":true,"path":"api/articles/JavaSSM笔记（四）.json","keywords":null,"cover":[],"text":"MySQL高级在JavaWeb阶段，我们初步认识了MySQL数据库，包括一些基本操作，比如创建数据库、表、触发器，以及最基本的增删改查、事务等操作。而在此阶段，我们将继续深入学习MySQL，了解它的更多高级玩法，也相当于进行复习。 函数其实函数我们在之前已经接触到一部分了，在Ja...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":11,"path":"api/categories/JavaSSM笔记.json"}],"tags":[{"name":"JavaSSM笔记","slug":"JavaSSM笔记","count":4,"path":"api/tags/JavaSSM笔记.json"}],"author":{"name":"YangChao","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"一个不太懂开发的程序猿","socials":{"github":"https://github.com/yc823109599","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}